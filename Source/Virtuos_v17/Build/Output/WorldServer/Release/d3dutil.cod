; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_DirectX\d3dutil.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JNGIHEFB@D3DFMT_A8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09IAIMLNBG@D3DFMT_P8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09JFLAOHAC@D3DFMT_L8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0P@BJJPCHFI@Unknown?5format?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07NCBDPBMK@D3DFMT_?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
;	COMDAT ?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL9@@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DUtil_InitLight@@YAXAAU_D3DLIGHT9@@W4_D3DLIGHTTYPE@@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@W4_D3DFORMAT@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice9@@PAUHICON__@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DUtil_D3DFormatToString@@YAPADW4_D3DFORMAT@@_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CD3DArcBall@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Init@CD3DArcBall@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetWindow@CD3DArcBall@@QAEXHHM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetRadius@CD3DArcBall@@QAEXM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CD3DCamera@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetProjParams@CD3DCamera@@QAEXMMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsFull@?$CStack@K@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@KPAVCCtrl@@@std@@QAE@ABKABQAVCCtrl@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMax@?$CItemContainer@VCItemElem@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBEAAPAUtagACTMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBEAAPAUtagMAGICATKMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@IAE@V?$allocator@PAUtagACTMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagACTMSG@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@IAE@V?$allocator@PAUtagMAGICATKMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagMAGICATKMSG@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBEABQAUtagACTMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBEABQAUtagMAGICATKMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@IAE@V?$allocator@PAUtagACTMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagACTMSG@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagACTMSG@@@std@@QAEXPAPAUtagACTMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAUtagACTMSG@@@std@@QAEXPAPAPAUtagACTMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAUtagACTMSG@@@std@@QAEXPAPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@IAE@V?$allocator@PAUtagMAGICATKMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagMAGICATKMSG@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagMAGICATKMSG@@@std@@QAEXPAPAUtagMAGICATKMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAUtagMAGICATKMSG@@@std@@QAEXPAPAPAUtagMAGICATKMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAUtagMAGICATKMSG@@@std@@QAEXPAPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAUtagACTMSG@@@std@@QAEXPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAUtagMAGICATKMSG@@@std@@QAEXPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@EV?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Assign@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAEV?$allocator@E@3@@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__SPAWNREGION@CEventLua@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__SPAWNREGION@CEventLua@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU__SPAWNREGION@CEventLua@@IU12@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAXPAU__SPAWNREGION@CEventLua@@IABU12@AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUWORMON@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWORMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UWORMON@@V?$allocator@UWORMON@@@std@@@std@@YAXPAUWORMON@@0AAV?$allocator@UWORMON@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__ITEMGAME@CMiniGame@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__ITEMGAME@CMiniGame@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__ITEMGAME@CMiniGame@@V?$allocator@U__ITEMGAME@CMiniGame@@@std@@@std@@YAXPAU__ITEMGAME@CMiniGame@@0AAV?$allocator@U__ITEMGAME@CMiniGame@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@HV?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__ITEM@CExchange@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__ITEM@CExchange@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__ITEM@CExchange@@V?$allocator@U__ITEM@CExchange@@@std@@@std@@YAXPAU__ITEM@CExchange@@0AAV?$allocator@U__ITEM@CExchange@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__POINT@CExchange@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__POINT@CExchange@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__POINT@CExchange@@V?$allocator@U__POINT@CExchange@@@std@@@std@@YAXPAU__POINT@CExchange@@0AAV?$allocator@U__POINT@CExchange@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@EV?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAU__SPAWNREGION@CEventLua@@PAU12@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAPAU__SPAWNREGION@CEventLua@@PAU12@00AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU__SPAWNREGION@CEventLua@@PAU12@@std@@YAPAU__SPAWNREGION@CEventLua@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUD3DXVECTOR3@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU_GIFTBOX@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_GIFTBOX@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U_GIFTBOX@@V?$allocator@U_GIFTBOX@@@std@@@std@@YAXPAU_GIFTBOX@@0AAV?$allocator@U_GIFTBOX@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__SPAWNREGION@CEventLua@@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAXPAU__SPAWNREGION@CEventLua@@0AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAUtagACTMSG@@@?$allocator@PAPAUtagACTMSG@@@std@@QAE@ABV?$allocator@PAUtagACTMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAUtagACTMSG@@@std@@YAXPAPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAUtagMAGICATKMSG@@@?$allocator@PAPAUtagMAGICATKMSG@@@std@@QAE@ABV?$allocator@PAUtagMAGICATKMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAUtagMAGICATKMSG@@@std@@YAXPAPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAUtagACTMSG@@@std@@YAXPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAUtagMAGICATKMSG@@@std@@YAXPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UWORMON@@@std@@QAEXPAUWORMON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__ITEMGAME@CMiniGame@@@std@@QAEXPAU__ITEMGAME@CMiniGame@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__ITEM@CExchange@@@std@@QAEXPAU__ITEM@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__POINT@CExchange@@@std@@QAEXPAU__POINT@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U__SPAWNREGION@CEventLua@@@std@@QAEXPAU__SPAWNREGION@CEventLua@@ABU34@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__SPAWNREGION@CEventLua@@@std@@QAEXPAU__SPAWNREGION@CEventLua@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_GIFTBOX@@@std@@QAEXPAU_GIFTBOX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@EV?$allocator@E@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@EV?$allocator@E@std@@@std@@QAE@PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@EV?$allocator@E@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$insert@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAE@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@EV?$allocator@E@std@@@0@AAPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAEV?$allocator@E@3@@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAEAAV?$allocator@E@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAU__SPAWNREGION@CEventLua@@PAU12@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAPAU__SPAWNREGION@CEventLua@@PAU12@00AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UWORMON@@@std@@YAXPAUWORMON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__ITEMGAME@CMiniGame@@@std@@YAXPAU__ITEMGAME@CMiniGame@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__ITEM@CExchange@@@std@@YAXPAU__ITEM@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__POINT@CExchange@@@std@@YAXPAU__POINT@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@U__SPAWNREGION@CEventLua@@U12@@std@@YAXPAU__SPAWNREGION@CEventLua@@ABU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__SPAWNREGION@CEventLua@@@std@@YAXPAU__SPAWNREGION@CEventLua@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_GIFTBOX@@@std@@YAXPAU_GIFTBOX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@E@std@@QAEXPAEABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@E@std@@QAEXPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@EV?$allocator@E@std@@@std@@QBEABEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@EV?$allocator@E@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Insert@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@EE@std@@YAXPAEABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@E@std@@YAXPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@EV?$allocator@E@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@EV?$allocator@E@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@I@std@@YAXVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$advance@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@EV?$allocator@E@std@@@0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAE@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@I@std@@YAXVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Advance@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@EV?$allocator@E@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAE@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAEU_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@EV?$allocator@E@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@EE@std@@YAPAEPAE00AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@IAEPAEVconst_iterator@01@0PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@EV?$allocator@E@std@@@std@@QAE@PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@EV?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsstr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _asinf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _sqrtf
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_D3DXMATRIXA16@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL9@@MMMM@Z ; D3DUtil_InitMaterial
EXTRN	__fltused:NEAR
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
;	COMDAT ?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL9@@MMMM@Z
_TEXT	SEGMENT
_mtrl$ = 8						; size = 4
_r$ = 12						; size = 4
_g$ = 16						; size = 4
_b$ = 20						; size = 4
_a$ = 24						; size = 4
?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL9@@MMMM@Z PROC NEAR ; D3DUtil_InitMaterial, COMDAT

; 30   :     ZeroMemory( &mtrl, sizeof(D3DMATERIAL9) );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _mtrl$[esp-4]
  00004	33 c0		 xor	 eax, eax
  00006	57		 push	 edi
  00007	b9 11 00 00 00	 mov	 ecx, 17			; 00000011H
  0000c	8b fa		 mov	 edi, edx
  0000e	f3 ab		 rep stosd

; 31   :     mtrl.Diffuse.r = mtrl.Ambient.r = r;

  00010	8b 44 24 0c	 mov	 eax, DWORD PTR _r$[esp]
  00014	8b c8		 mov	 ecx, eax
  00016	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 32   :     mtrl.Diffuse.g = mtrl.Ambient.g = g;

  00019	8b 44 24 10	 mov	 eax, DWORD PTR _g$[esp]
  0001d	89 0a		 mov	 DWORD PTR [edx], ecx
  0001f	8b c8		 mov	 ecx, eax
  00021	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 33   :     mtrl.Diffuse.b = mtrl.Ambient.b = b;

  00024	8b 44 24 14	 mov	 eax, DWORD PTR _b$[esp]
  00028	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0002b	8b c8		 mov	 ecx, eax
  0002d	89 42 18	 mov	 DWORD PTR [edx+24], eax

; 34   :     mtrl.Diffuse.a = mtrl.Ambient.a = a;

  00030	8b 44 24 18	 mov	 eax, DWORD PTR _a$[esp]
  00034	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00037	8b c8		 mov	 ecx, eax
  00039	89 42 1c	 mov	 DWORD PTR [edx+28], eax
  0003c	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  0003f	5f		 pop	 edi

; 35   : }

  00040	c3		 ret	 0
?D3DUtil_InitMaterial@@YAXAAU_D3DMATERIAL9@@MMMM@Z ENDP	; D3DUtil_InitMaterial
_TEXT	ENDS
PUBLIC	?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@W4_D3DFORMAT@@@Z ; D3DUtil_CreateTexture
; Function compile flags: /Ogty
;	COMDAT ?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@W4_D3DFORMAT@@@Z
_TEXT	SEGMENT
_pd3dDevice$ = 8					; size = 4
_strTexture$ = 12					; size = 4
_ppTexture$ = 16					; size = 4
_d3dFormat$ = 20					; size = 4
?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@W4_D3DFORMAT@@@Z PROC NEAR ; D3DUtil_CreateTexture, COMDAT

; 72   : #ifdef __WORLDSERVER	
; 73   : 	return S_OK;

  00000	33 c0		 xor	 eax, eax

; 74   : #else
; 75   :     HRESULT hr;
; 76   :     TCHAR strPath[MAX_PATH];
; 77   : 
; 78   :     // Get the path to the texture
; 79   :     if( FAILED( hr = DXUtil_FindMediaFileCb( strPath, sizeof(strPath), (TCHAR*)strTexture ) ) )
; 80   :         return hr;
; 81   : 
; 82   :     // Create the texture using D3DX
; 83   :     return D3DXCreateTextureFromFileEx( pd3dDevice, strPath, 
; 84   :                 D3DX_DEFAULT, D3DX_DEFAULT, D3DX_DEFAULT, 0, d3dFormat, 
; 85   :                 D3DPOOL_MANAGED, D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 
; 86   :                 D3DX_FILTER_TRIANGLE|D3DX_FILTER_MIRROR, 0, NULL, NULL, ppTexture );
; 87   : #endif // not WORLDSERVER
; 88   : }

  00002	c3		 ret	 0
?D3DUtil_CreateTexture@@YAJPAUIDirect3DDevice9@@PBDPAPAUIDirect3DTexture9@@W4_D3DFORMAT@@@Z ENDP ; D3DUtil_CreateTexture
_TEXT	ENDS
PUBLIC	?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice9@@PAUHICON__@@H@Z ; D3DUtil_SetDeviceCursor
EXTRN	__imp__DeleteDC@4:NEAR
EXTRN	__imp__DeleteObject@4:NEAR
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
EXTRN	__imp__GetDIBits@28:NEAR
EXTRN	__imp__GetObjectA@12:NEAR
EXTRN	__imp__GetIconInfo@8:NEAR
EXTRN	__imp__GetDC@4:NEAR
EXTRN	__imp__ReleaseDC@8:NEAR
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__CreateCompatibleDC@4:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice9@@PAUHICON__@@H@Z
_TEXT	SEGMENT
_dwHeightDest$ = -180					; size = 4
_dwWidth$ = -176					; size = 4
_pCursorSurface$ = -172					; size = 4
_y$ = -168						; size = 4
_hdcMask$ = -164					; size = 4
_hdcColor$ = -160					; size = 4
_pcrArrayColor$ = -156					; size = 4
_hdcScreen$ = -152					; size = 4
_bBWCursor$ = -148					; size = 4
tv977 = -144						; size = 4
tv921 = -140						; size = 4
_iconinfo$ = -136					; size = 20
_pcrArrayMask$ = -116					; size = 4
tv998 = -112						; size = 4
tv927 = -108						; size = 4
$T227300 = -104						; size = 4
tv692 = -100						; size = 4
tv852 = -96						; size = 4
_lr$ = -92						; size = 8
_bmi$ = -84						; size = 44
_bm$ = -40						; size = 24
_wMask$225739 = -16					; size = 10
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_pd3dDevice$ = 8					; size = 4
_hCursor$ = 12						; size = 4
_bAddWatermark$ = 16					; size = 4
?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice9@@PAUHICON__@@H@Z PROC NEAR ; D3DUtil_SetDeviceCursor, COMDAT

; 197  : {

  00000	81 ec b4 00 00
	00		 sub	 esp, 180		; 000000b4H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	53		 push	 ebx
  0000e	8b 9c 24 bc 00
	00 00		 mov	 ebx, DWORD PTR _pd3dDevice$[esp+180]
  00015	55		 push	 ebp

; 198  :     HRESULT hr = E_FAIL;
; 199  :     ICONINFO iconinfo;
; 200  :     BOOL bBWCursor;
; 201  :     LPDIRECT3DSURFACE9 pCursorSurface = NULL;
; 202  :     HDC hdcColor = NULL;
; 203  :     HDC hdcMask = NULL;
; 204  :     HDC hdcScreen = NULL;
; 205  :     BITMAP bm;
; 206  :     DWORD dwWidth;
; 207  :     DWORD dwHeightSrc;
; 208  :     DWORD dwHeightDest;
; 209  :     COLORREF crColor;
; 210  :     COLORREF crMask;
; 211  :     UINT x;
; 212  :     UINT y;
; 213  :     BITMAPINFO bmi;
; 214  :     COLORREF* pcrArrayColor = NULL;
; 215  :     COLORREF* pcrArrayMask = NULL;
; 216  :     DWORD* pBitmap;
; 217  :     HGDIOBJ hgdiobjOld;
; 218  : 
; 219  :     ZeroMemory( &iconinfo, sizeof(iconinfo) );

  00016	33 c9		 xor	 ecx, ecx
  00018	89 4c 24 34	 mov	 DWORD PTR _iconinfo$[esp+188], ecx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	89 4c 24 40	 mov	 DWORD PTR _iconinfo$[esp+200], ecx
  00022	33 ed		 xor	 ebp, ebp

; 220  :     if( !GetIconInfo( hCursor, &iconinfo ) )

  00024	8d 54 24 3c	 lea	 edx, DWORD PTR _iconinfo$[esp+196]
  00028	89 84 24 c0 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+196], eax
  0002f	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR _hCursor$[esp+192]
  00036	89 4c 24 44	 mov	 DWORD PTR _iconinfo$[esp+204], ecx
  0003a	52		 push	 edx
  0003b	89 4c 24 4c	 mov	 DWORD PTR _iconinfo$[esp+212], ecx
  0003f	50		 push	 eax
  00040	89 5c 24 64	 mov	 DWORD PTR $T227300[esp+204], ebx
  00044	bf 05 40 00 80	 mov	 edi, -2147467259	; 80004005H
  00049	89 6c 24 20	 mov	 DWORD PTR _pCursorSurface$[esp+204], ebp
  0004d	89 6c 24 2c	 mov	 DWORD PTR _hdcColor$[esp+204], ebp
  00051	89 6c 24 28	 mov	 DWORD PTR _hdcMask$[esp+204], ebp
  00055	89 6c 24 34	 mov	 DWORD PTR _hdcScreen$[esp+204], ebp
  00059	89 6c 24 30	 mov	 DWORD PTR _pcrArrayColor$[esp+204], ebp
  0005d	89 4c 24 54	 mov	 DWORD PTR _iconinfo$[esp+220], ecx
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetIconInfo@8
  00067	85 c0		 test	 eax, eax
  00069	0f 84 28 03 00
	00		 je	 $End$225703

; 221  :         goto End;
; 222  : 
; 223  :     if (0 == GetObject((HGDIOBJ)iconinfo.hbmMask, sizeof(BITMAP), (LPVOID)&bm))

  0006f	8b 4c 24 48	 mov	 ecx, DWORD PTR _iconinfo$[esp+208]
  00073	8d 84 24 9c 00
	00 00		 lea	 eax, DWORD PTR _bm$[esp+196]
  0007a	50		 push	 eax
  0007b	6a 18		 push	 24			; 00000018H
  0007d	51		 push	 ecx
  0007e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetObjectA@12
  00084	85 c0		 test	 eax, eax
  00086	0f 84 0b 03 00
	00		 je	 $End$225703

; 224  :         goto End;
; 225  :     dwWidth = bm.bmWidth;
; 226  :     dwHeightSrc = bm.bmHeight;
; 227  : 
; 228  :     if( iconinfo.hbmColor == NULL )

  0008c	8b 54 24 4c	 mov	 edx, DWORD PTR _iconinfo$[esp+212]
  00090	85 d2		 test	 edx, edx
  00092	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR _bm$[esp+200]
  00099	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR _bm$[esp+204]
  000a0	89 4c 24 14	 mov	 DWORD PTR _dwWidth$[esp+196], ecx
  000a4	8b f0		 mov	 esi, eax
  000a6	75 0c		 jne	 SHORT $L225710

; 229  :     {
; 230  :         bBWCursor = TRUE;

  000a8	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR _bBWCursor$[esp+196], 1

; 231  :         dwHeightDest = dwHeightSrc / 2;

  000b0	d1 e8		 shr	 eax, 1

; 232  :     }
; 233  :     else 

  000b2	eb 08		 jmp	 SHORT $L227316
$L225710:

; 234  :     {
; 235  :         bBWCursor = FALSE;

  000b4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _bBWCursor$[esp+196], 0
$L227316:

; 236  :         dwHeightDest = dwHeightSrc;
; 237  :     }
; 238  : 
; 239  :     // Create a surface for the fullscreen cursor
; 240  :     if( FAILED( hr = pd3dDevice->CreateOffscreenPlainSurface( dwWidth, dwHeightDest, 
; 241  :         D3DFMT_A8R8G8B8, D3DPOOL_SCRATCH, &pCursorSurface, NULL ) ) )

  000bc	8b 13		 mov	 edx, DWORD PTR [ebx]
  000be	6a 00		 push	 0
  000c0	89 44 24 14	 mov	 DWORD PTR _dwHeightDest$[esp+200], eax
  000c4	8d 44 24 1c	 lea	 eax, DWORD PTR _pCursorSurface$[esp+200]
  000c8	50		 push	 eax
  000c9	8b 44 24 18	 mov	 eax, DWORD PTR _dwHeightDest$[esp+204]
  000cd	6a 03		 push	 3
  000cf	6a 15		 push	 21			; 00000015H
  000d1	50		 push	 eax
  000d2	51		 push	 ecx
  000d3	53		 push	 ebx
  000d4	ff 92 90 00 00
	00		 call	 DWORD PTR [edx+144]
  000da	8b f8		 mov	 edi, eax
  000dc	85 ff		 test	 edi, edi
  000de	0f 8c b3 02 00
	00		 jl	 $End$225703

; 242  :     {
; 243  :         goto End;
; 244  :     }
; 245  : 
; 246  :     pcrArrayMask = new DWORD[dwWidth * dwHeightSrc];

  000e4	8b 5c 24 14	 mov	 ebx, DWORD PTR _dwWidth$[esp+196]
  000e8	8b ce		 mov	 ecx, esi
  000ea	0f af cb	 imul	 ecx, ebx
  000ed	c1 e1 02	 shl	 ecx, 2
  000f0	51		 push	 ecx
  000f1	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  000f6	8b e8		 mov	 ebp, eax

; 247  : 
; 248  :     ZeroMemory(&bmi, sizeof(bmi));

  000f8	33 c0		 xor	 eax, eax
  000fa	83 c4 04	 add	 esp, 4
  000fd	b9 0b 00 00 00	 mov	 ecx, 11			; 0000000bH
  00102	8d 7c 24 70	 lea	 edi, DWORD PTR _bmi$[esp+196]
  00106	f3 ab		 rep stosd

; 249  :     bmi.bmiHeader.biSize = sizeof(bmi.bmiHeader);
; 250  :     bmi.bmiHeader.biWidth = dwWidth;
; 251  :     bmi.bmiHeader.biHeight = dwHeightSrc;
; 252  :     bmi.bmiHeader.biPlanes = 1;
; 253  :     bmi.bmiHeader.biBitCount = 32;
; 254  :     bmi.bmiHeader.biCompression = BI_RGB;
; 255  : 
; 256  :     hdcScreen = GetDC( NULL );

  00108	50		 push	 eax
  00109	89 6c 24 54	 mov	 DWORD PTR _pcrArrayMask$[esp+200], ebp
  0010d	c7 44 24 74 28
	00 00 00	 mov	 DWORD PTR _bmi$[esp+200], 40 ; 00000028H
  00115	89 5c 24 78	 mov	 DWORD PTR _bmi$[esp+204], ebx
  00119	89 74 24 7c	 mov	 DWORD PTR _bmi$[esp+208], esi
  0011d	66 c7 84 24 80
	00 00 00 01 00	 mov	 WORD PTR _bmi$[esp+212], 1
  00127	66 c7 84 24 82
	00 00 00 20 00	 mov	 WORD PTR _bmi$[esp+214], 32 ; 00000020H
  00131	89 84 24 84 00
	00 00		 mov	 DWORD PTR _bmi$[esp+216], eax
  00138	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDC@4

; 257  :     hdcMask = CreateCompatibleDC( hdcScreen );

  0013e	50		 push	 eax
  0013f	89 44 24 30	 mov	 DWORD PTR _hdcScreen$[esp+200], eax
  00143	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4

; 258  :     if( hdcMask == NULL )

  00149	85 c0		 test	 eax, eax
  0014b	89 44 24 20	 mov	 DWORD PTR _hdcMask$[esp+196], eax
  0014f	75 0a		 jne	 SHORT $L225717

; 259  :     {
; 260  :         hr = E_FAIL;

  00151	bf 05 40 00 80	 mov	 edi, -2147467259	; 80004005H

; 332  :     {
; 333  :         goto End;
; 334  :     }
; 335  : 
; 336  :     hr = S_OK;

  00156	e9 3c 02 00 00	 jmp	 $End$225703
$L225717:

; 261  :         goto End;
; 262  :     }
; 263  :     hgdiobjOld = SelectObject(hdcMask, iconinfo.hbmMask);

  0015b	8b 54 24 48	 mov	 edx, DWORD PTR _iconinfo$[esp+208]
  0015f	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__SelectObject@8
  00165	52		 push	 edx
  00166	50		 push	 eax
  00167	ff d7		 call	 edi

; 264  :     GetDIBits(hdcMask, iconinfo.hbmMask, 0, dwHeightSrc, 
; 265  :         pcrArrayMask, &bmi, DIB_RGB_COLORS);

  00169	8b 4c 24 48	 mov	 ecx, DWORD PTR _iconinfo$[esp+208]
  0016d	8b 54 24 20	 mov	 edx, DWORD PTR _hdcMask$[esp+196]
  00171	6a 00		 push	 0
  00173	8b d8		 mov	 ebx, eax
  00175	8d 44 24 74	 lea	 eax, DWORD PTR _bmi$[esp+200]
  00179	50		 push	 eax
  0017a	55		 push	 ebp
  0017b	56		 push	 esi
  0017c	6a 00		 push	 0
  0017e	51		 push	 ecx
  0017f	52		 push	 edx
  00180	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDIBits@28

; 266  :     SelectObject(hdcMask, hgdiobjOld);

  00186	8b 44 24 20	 mov	 eax, DWORD PTR _hdcMask$[esp+196]
  0018a	53		 push	 ebx
  0018b	50		 push	 eax
  0018c	ff d7		 call	 edi

; 267  : 
; 268  :     if (!bBWCursor)

  0018e	8b 44 24 30	 mov	 eax, DWORD PTR _bBWCursor$[esp+196]
  00192	85 c0		 test	 eax, eax

; 269  :     {
; 270  :         pcrArrayColor = new DWORD[dwWidth * dwHeightDest];

  00194	8b 5c 24 14	 mov	 ebx, DWORD PTR _dwWidth$[esp+196]
  00198	75 61		 jne	 SHORT $L227308
  0019a	8b 4c 24 10	 mov	 ecx, DWORD PTR _dwHeightDest$[esp+196]
  0019e	0f af cb	 imul	 ecx, ebx
  001a1	c1 e1 02	 shl	 ecx, 2
  001a4	51		 push	 ecx
  001a5	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 271  :         hdcColor = CreateCompatibleDC( hdcScreen );

  001aa	8b 54 24 30	 mov	 edx, DWORD PTR _hdcScreen$[esp+200]
  001ae	83 c4 04	 add	 esp, 4
  001b1	52		 push	 edx
  001b2	89 44 24 2c	 mov	 DWORD PTR _pcrArrayColor$[esp+200], eax
  001b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateCompatibleDC@4

; 272  :         if( hdcColor == NULL )

  001bc	85 c0		 test	 eax, eax
  001be	89 44 24 24	 mov	 DWORD PTR _hdcColor$[esp+196], eax
  001c2	75 0a		 jne	 SHORT $L225723

; 273  :         {
; 274  :             hr = E_FAIL;

  001c4	bf 05 40 00 80	 mov	 edi, -2147467259	; 80004005H

; 332  :     {
; 333  :         goto End;
; 334  :     }
; 335  : 
; 336  :     hr = S_OK;

  001c9	e9 c9 01 00 00	 jmp	 $End$225703
$L225723:

; 275  :             goto End;
; 276  :         }
; 277  :         SelectObject(hdcColor, iconinfo.hbmColor);

  001ce	8b 4c 24 4c	 mov	 ecx, DWORD PTR _iconinfo$[esp+212]
  001d2	51		 push	 ecx
  001d3	50		 push	 eax
  001d4	ff d7		 call	 edi

; 278  :         GetDIBits(hdcColor, iconinfo.hbmColor, 0, dwHeightDest, 
; 279  :             pcrArrayColor, &bmi, DIB_RGB_COLORS);

  001d6	8b 44 24 28	 mov	 eax, DWORD PTR _pcrArrayColor$[esp+196]
  001da	8b 7c 24 10	 mov	 edi, DWORD PTR _dwHeightDest$[esp+196]
  001de	8b 4c 24 4c	 mov	 ecx, DWORD PTR _iconinfo$[esp+212]
  001e2	6a 00		 push	 0
  001e4	8d 54 24 74	 lea	 edx, DWORD PTR _bmi$[esp+200]
  001e8	52		 push	 edx
  001e9	8b 54 24 2c	 mov	 edx, DWORD PTR _hdcColor$[esp+204]
  001ed	50		 push	 eax
  001ee	57		 push	 edi
  001ef	6a 00		 push	 0
  001f1	51		 push	 ecx
  001f2	52		 push	 edx
  001f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetDIBits@28
  001f9	eb 04		 jmp	 SHORT $L225720
$L227308:
  001fb	8b 7c 24 10	 mov	 edi, DWORD PTR _dwHeightDest$[esp+196]
$L225720:

; 280  :     }
; 281  : 
; 282  :     // Transfer cursor image into the surface
; 283  :     D3DLOCKED_RECT lr;
; 284  :     pCursorSurface->LockRect( &lr, NULL, 0 );

  001ff	8b 44 24 18	 mov	 eax, DWORD PTR _pCursorSurface$[esp+196]
  00203	8b 08		 mov	 ecx, DWORD PTR [eax]
  00205	6a 00		 push	 0
  00207	6a 00		 push	 0
  00209	8d 54 24 70	 lea	 edx, DWORD PTR _lr$[esp+204]
  0020d	52		 push	 edx
  0020e	50		 push	 eax
  0020f	ff 51 34	 call	 DWORD PTR [ecx+52]

; 285  :     pBitmap = (DWORD*)lr.pBits;
; 286  :     for( y = 0; y < dwHeightDest; y++ )

  00212	85 ff		 test	 edi, edi
  00214	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _y$[esp+196], 0
  0021c	0f 86 4a 01 00
	00		 jbe	 $L225730
  00222	8b 44 24 6c	 mov	 eax, DWORD PTR _lr$[esp+200]
  00226	89 44 24 38	 mov	 DWORD PTR tv921[esp+196], eax
  0022a	8b c3		 mov	 eax, ebx
  0022c	f7 d8		 neg	 eax
  0022e	8b cb		 mov	 ecx, ebx
  00230	f7 d9		 neg	 ecx
  00232	c1 e0 02	 shl	 eax, 2
  00235	8d 14 bd fc ff
	ff ff		 lea	 edx, DWORD PTR [edi*4-4]
  0023c	4e		 dec	 esi
  0023d	0f af d3	 imul	 edx, ebx
  00240	0f af f3	 imul	 esi, ebx
  00243	03 d5		 add	 edx, ebp
  00245	89 4c 24 64	 mov	 DWORD PTR tv852[esp+196], ecx
  00249	89 44 24 58	 mov	 DWORD PTR tv927[esp+196], eax
  0024d	89 74 24 34	 mov	 DWORD PTR tv977[esp+196], esi
  00251	89 54 24 54	 mov	 DWORD PTR tv998[esp+196], edx
$L227311:

; 287  :     {
; 288  :         for( x = 0; x < dwWidth; x++ )

  00255	33 ff		 xor	 edi, edi
  00257	85 db		 test	 ebx, ebx
  00259	0f 86 d3 00 00
	00		 jbe	 $L225729

; 303  :                 pBitmap[dwWidth*y + x] = 0x00000000;

  0025f	8b 44 24 28	 mov	 eax, DWORD PTR _pcrArrayColor$[esp+196]
  00263	8b 5c 24 38	 mov	 ebx, DWORD PTR tv921[esp+196]
  00267	2b c5		 sub	 eax, ebp
  00269	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  0026e	89 44 24 60	 mov	 DWORD PTR tv692[esp+196], eax
  00272	eb 04		 jmp	 SHORT $L225731
$L227309:
  00274	8b 44 24 60	 mov	 eax, DWORD PTR tv692[esp+196]
$L225731:

; 289  :         {
; 290  :             if (bBWCursor)

  00278	8b 74 24 30	 mov	 esi, DWORD PTR _bBWCursor$[esp+196]
  0027c	85 f6		 test	 esi, esi
  0027e	74 0e		 je	 SHORT $L225734

; 291  :             {
; 292  :                 crColor = pcrArrayMask[dwWidth*(dwHeightDest-1-y) + x];
; 293  :                 crMask = pcrArrayMask[dwWidth*(dwHeightSrc-1-y) + x];

  00280	8b 74 24 34	 mov	 esi, DWORD PTR tv977[esp+196]
  00284	8b 02		 mov	 eax, DWORD PTR [edx]
  00286	03 f7		 add	 esi, edi
  00288	8b 74 b5 00	 mov	 esi, DWORD PTR [ebp+esi*4]

; 294  :             }
; 295  :             else

  0028c	eb 05		 jmp	 SHORT $L225735
$L225734:

; 296  :             {
; 297  :                 crColor = pcrArrayColor[dwWidth*(dwHeightDest-1-y) + x];

  0028e	8b 04 10	 mov	 eax, DWORD PTR [eax+edx]

; 298  :                 crMask = pcrArrayMask[dwWidth*(dwHeightDest-1-y) + x];

  00291	8b 32		 mov	 esi, DWORD PTR [edx]
$L225735:

; 299  :             }
; 300  :             if (crMask == 0)

  00293	85 f6		 test	 esi, esi
  00295	75 09		 jne	 SHORT $L225736

; 301  :                 pBitmap[dwWidth*y + x] = 0xff000000 | crColor;

  00297	0d 00 00 00 ff	 or	 eax, -16777216		; ff000000H
  0029c	89 03		 mov	 DWORD PTR [ebx], eax

; 302  :             else

  0029e	eb 06		 jmp	 SHORT $L225737
$L225736:

; 303  :                 pBitmap[dwWidth*y + x] = 0x00000000;

  002a0	c7 03 00 00 00
	00		 mov	 DWORD PTR [ebx], 0
$L225737:

; 304  : 
; 305  :             // It may be helpful to make the D3D cursor look slightly 
; 306  :             // different from the Windows cursor so you can distinguish 
; 307  :             // between the two when developing/testing code.  When
; 308  :             // bAddWatermark is TRUE, the following code adds some
; 309  :             // small grey "D3D" characters to the upper-left corner of
; 310  :             // the D3D cursor image.
; 311  :             if( bAddWatermark && x < 12 && y < 5 )

  002a6	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR _bAddWatermark$[esp+192]
  002ad	85 c0		 test	 eax, eax
  002af	74 5f		 je	 SHORT $L225732
  002b1	83 ff 0c	 cmp	 edi, 12			; 0000000cH
  002b4	73 5a		 jae	 SHORT $L225732
  002b6	8b 44 24 1c	 mov	 eax, DWORD PTR _y$[esp+196]
  002ba	83 f8 05	 cmp	 eax, 5
  002bd	73 51		 jae	 SHORT $L225732

; 312  :             {
; 313  :                 // 11.. 11.. 11.. .... CCC0
; 314  :                 // 1.1. ..1. 1.1. .... A2A0
; 315  :                 // 1.1. .1.. 1.1. .... A4A0
; 316  :                 // 1.1. ..1. 1.1. .... A2A0
; 317  :                 // 11.. 11.. 11.. .... CCC0
; 318  : 
; 319  :                 const WORD wMask[5] = { 0xccc0, 0xa2a0, 0xa4a0, 0xa2a0, 0xccc0 };

  002bf	be a0 a2 00 00	 mov	 esi, 41632		; 0000a2a0H
  002c4	66 89 b4 24 b6
	00 00 00	 mov	 WORD PTR _wMask$225739[esp+198], si
  002cc	66 89 b4 24 ba
	00 00 00	 mov	 WORD PTR _wMask$225739[esp+202], si
  002d4	bd c0 cc 00 00	 mov	 ebp, 52416		; 0000ccc0H

; 320  :                 if( wMask[y] & (1 << (15 - x)) )

  002d9	be 01 00 00 00	 mov	 esi, 1
  002de	66 89 ac 24 b4
	00 00 00	 mov	 WORD PTR _wMask$225739[esp+196], bp
  002e6	66 89 ac 24 bc
	00 00 00	 mov	 WORD PTR _wMask$225739[esp+204], bp

; 321  :                 {
; 322  :                     pBitmap[dwWidth*y + x] |= 0xff808080;

  002ee	8b 6c 24 50	 mov	 ebp, DWORD PTR _pcrArrayMask$[esp+196]
  002f2	66 c7 84 24 b8
	00 00 00 a0 a4	 mov	 WORD PTR _wMask$225739[esp+200], 42144 ; 0000a4a0H
  002fc	0f b7 84 44 b4
	00 00 00	 movzx	 eax, WORD PTR _wMask$225739[esp+eax*2+196]
  00304	d3 e6		 shl	 esi, cl
  00306	85 c6		 test	 eax, esi
  00308	74 06		 je	 SHORT $L225732
  0030a	81 0b 80 80 80
	ff		 or	 DWORD PTR [ebx], -8355712 ; ff808080H
$L225732:
  00310	8b 44 24 14	 mov	 eax, DWORD PTR _dwWidth$[esp+196]
  00314	47		 inc	 edi
  00315	83 c2 04	 add	 edx, 4
  00318	83 c3 04	 add	 ebx, 4
  0031b	49		 dec	 ecx
  0031c	3b f8		 cmp	 edi, eax
  0031e	0f 82 50 ff ff
	ff		 jb	 $L227309
  00324	8b 54 24 54	 mov	 edx, DWORD PTR tv998[esp+196]
  00328	8b 4c 24 64	 mov	 ecx, DWORD PTR tv852[esp+196]
  0032c	8b d8		 mov	 ebx, eax
  0032e	8b 44 24 58	 mov	 eax, DWORD PTR tv927[esp+196]
$L225729:
  00332	8b 74 24 1c	 mov	 esi, DWORD PTR _y$[esp+196]
  00336	8b 7c 24 38	 mov	 edi, DWORD PTR tv921[esp+196]
  0033a	46		 inc	 esi
  0033b	89 74 24 1c	 mov	 DWORD PTR _y$[esp+196], esi
  0033f	8d 34 9d 00 00
	00 00		 lea	 esi, DWORD PTR [ebx*4]
  00346	03 fe		 add	 edi, esi
  00348	8b 74 24 34	 mov	 esi, DWORD PTR tv977[esp+196]
  0034c	03 f1		 add	 esi, ecx
  0034e	89 7c 24 38	 mov	 DWORD PTR tv921[esp+196], edi
  00352	8b 7c 24 10	 mov	 edi, DWORD PTR _dwHeightDest$[esp+196]
  00356	89 74 24 34	 mov	 DWORD PTR tv977[esp+196], esi
  0035a	8b 74 24 1c	 mov	 esi, DWORD PTR _y$[esp+196]
  0035e	03 d0		 add	 edx, eax
  00360	3b f7		 cmp	 esi, edi
  00362	89 54 24 54	 mov	 DWORD PTR tv998[esp+196], edx
  00366	0f 82 e9 fe ff
	ff		 jb	 $L227311
$L225730:

; 323  :                 }
; 324  :             }
; 325  :         }
; 326  :     }
; 327  :     pCursorSurface->UnlockRect();

  0036c	8b 44 24 18	 mov	 eax, DWORD PTR _pCursorSurface$[esp+196]
  00370	8b 08		 mov	 ecx, DWORD PTR [eax]
  00372	50		 push	 eax
  00373	ff 51 38	 call	 DWORD PTR [ecx+56]

; 328  : 
; 329  :     // Set the device cursor
; 330  :     if( FAILED( hr = pd3dDevice->SetCursorProperties( iconinfo.xHotspot, 
; 331  :         iconinfo.yHotspot, pCursorSurface ) ) )

  00376	8b 4c 24 18	 mov	 ecx, DWORD PTR _pCursorSurface$[esp+196]
  0037a	8b 44 24 5c	 mov	 eax, DWORD PTR $T227300[esp+196]
  0037e	8b 10		 mov	 edx, DWORD PTR [eax]
  00380	51		 push	 ecx
  00381	8b 4c 24 48	 mov	 ecx, DWORD PTR _iconinfo$[esp+208]
  00385	51		 push	 ecx
  00386	8b 4c 24 48	 mov	 ecx, DWORD PTR _iconinfo$[esp+208]
  0038a	51		 push	 ecx
  0038b	50		 push	 eax
  0038c	ff 52 28	 call	 DWORD PTR [edx+40]
  0038f	8b f8		 mov	 edi, eax
  00391	85 ff		 test	 edi, edi
  00393	7c 02		 jl	 SHORT $End$225703

; 332  :     {
; 333  :         goto End;
; 334  :     }
; 335  : 
; 336  :     hr = S_OK;

  00395	33 ff		 xor	 edi, edi
$End$225703:

; 337  : 
; 338  : End:
; 339  :     if( iconinfo.hbmMask != NULL )

  00397	8b 44 24 48	 mov	 eax, DWORD PTR _iconinfo$[esp+208]
  0039b	85 c0		 test	 eax, eax
  0039d	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteObject@4
  003a3	74 03		 je	 SHORT $L225745

; 340  :         DeleteObject( iconinfo.hbmMask );

  003a5	50		 push	 eax
  003a6	ff d6		 call	 esi
$L225745:

; 341  :     if( iconinfo.hbmColor != NULL )

  003a8	8b 44 24 4c	 mov	 eax, DWORD PTR _iconinfo$[esp+212]
  003ac	85 c0		 test	 eax, eax
  003ae	74 03		 je	 SHORT $L225746

; 342  :         DeleteObject( iconinfo.hbmColor );

  003b0	50		 push	 eax
  003b1	ff d6		 call	 esi
$L225746:

; 343  :     if( hdcScreen != NULL )

  003b3	8b 44 24 2c	 mov	 eax, DWORD PTR _hdcScreen$[esp+196]
  003b7	85 c0		 test	 eax, eax
  003b9	74 09		 je	 SHORT $L225747

; 344  :         ReleaseDC( NULL, hdcScreen );

  003bb	50		 push	 eax
  003bc	6a 00		 push	 0
  003be	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ReleaseDC@8
$L225747:

; 345  :     if( hdcColor != NULL )

  003c4	8b 44 24 24	 mov	 eax, DWORD PTR _hdcColor$[esp+196]
  003c8	85 c0		 test	 eax, eax
  003ca	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__DeleteDC@4
  003d0	74 05		 je	 SHORT $L225748

; 346  :         DeleteDC( hdcColor );

  003d2	8b d0		 mov	 edx, eax
  003d4	52		 push	 edx
  003d5	ff d6		 call	 esi
$L225748:

; 347  :     if( hdcMask != NULL )

  003d7	8b 44 24 20	 mov	 eax, DWORD PTR _hdcMask$[esp+196]
  003db	85 c0		 test	 eax, eax
  003dd	74 03		 je	 SHORT $L225749

; 348  :         DeleteDC( hdcMask );

  003df	50		 push	 eax
  003e0	ff d6		 call	 esi
$L225749:

; 349  :     SAFE_DELETE_ARRAY( pcrArrayColor );

  003e2	8b 44 24 28	 mov	 eax, DWORD PTR _pcrArrayColor$[esp+196]
  003e6	85 c0		 test	 eax, eax
  003e8	74 09		 je	 SHORT $L225750
  003ea	50		 push	 eax
  003eb	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003f0	83 c4 04	 add	 esp, 4
$L225750:

; 350  :     SAFE_DELETE_ARRAY( pcrArrayMask );

  003f3	85 ed		 test	 ebp, ebp
  003f5	74 09		 je	 SHORT $L225753
  003f7	55		 push	 ebp
  003f8	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  003fd	83 c4 04	 add	 esp, 4
$L225753:

; 351  :     SAFE_RELEASE( pCursorSurface );

  00400	8b 44 24 18	 mov	 eax, DWORD PTR _pCursorSurface$[esp+196]
  00404	85 c0		 test	 eax, eax
  00406	74 06		 je	 SHORT $L227306
  00408	8b 08		 mov	 ecx, DWORD PTR [eax]
  0040a	50		 push	 eax
  0040b	ff 51 08	 call	 DWORD PTR [ecx+8]
$L227306:

; 352  :     return hr;
; 353  : }

  0040e	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+196]
  00415	8b c7		 mov	 eax, edi
  00417	5f		 pop	 edi
  00418	5e		 pop	 esi
  00419	5d		 pop	 ebp
  0041a	5b		 pop	 ebx
  0041b	33 cc		 xor	 ecx, esp
  0041d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00422	81 c4 b4 00 00
	00		 add	 esp, 180		; 000000b4H
  00428	c3		 ret	 0
?D3DUtil_SetDeviceCursor@@YAJPAUIDirect3DDevice9@@PAUHICON__@@H@Z ENDP ; D3DUtil_SetDeviceCursor
_TEXT	ENDS
PUBLIC	__tcsstr
EXTRN	__mbsstr:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsstr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__tcsstr PROC NEAR					; COMDAT

; 847  : __inline _PC _tcsstr(_CPC _s1,_CPC _s2) {return (_PC)_mbsstr((_CPUC)_s1,(_CPUC)_s2);}

  00000	e9 00 00 00 00	 jmp	 __mbsstr
__tcsstr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@		; `string'
PUBLIC	??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@		; `string'
PUBLIC	??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@		; `string'
PUBLIC	??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@		; `string'
PUBLIC	??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@		; `string'
PUBLIC	??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@		; `string'
PUBLIC	??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@		; `string'
PUBLIC	??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@		; `string'
PUBLIC	??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@		; `string'
PUBLIC	??_C@_09JNGIHEFB@D3DFMT_A8?$AA@			; `string'
PUBLIC	??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@		; `string'
PUBLIC	??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@		; `string'
PUBLIC	??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@	; `string'
PUBLIC	??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@		; `string'
PUBLIC	??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@		; `string'
PUBLIC	??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@		; `string'
PUBLIC	??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@	; `string'
PUBLIC	??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@	; `string'
PUBLIC	??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@		; `string'
PUBLIC	??_C@_09IAIMLNBG@D3DFMT_P8?$AA@			; `string'
PUBLIC	??_C@_09JFLAOHAC@D3DFMT_L8?$AA@			; `string'
PUBLIC	??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@		; `string'
PUBLIC	??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@		; `string'
PUBLIC	??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@		; `string'
PUBLIC	??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@		; `string'
PUBLIC	??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@		; `string'
PUBLIC	??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@		; `string'
PUBLIC	??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@		; `string'
PUBLIC	??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@	; `string'
PUBLIC	??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@		; `string'
PUBLIC	??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@		; `string'
PUBLIC	??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@		; `string'
PUBLIC	??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@		; `string'
PUBLIC	??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@		; `string'
PUBLIC	??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@		; `string'
PUBLIC	??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@		; `string'
PUBLIC	??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@	; `string'
PUBLIC	??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@		; `string'
PUBLIC	??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@		; `string'
PUBLIC	??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@		; `string'
PUBLIC	??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@		; `string'
PUBLIC	??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@		; `string'
PUBLIC	??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@		; `string'
PUBLIC	??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@		; `string'
PUBLIC	??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@	; `string'
PUBLIC	??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@		; `string'
PUBLIC	??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@		; `string'
PUBLIC	??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@	; `string'
PUBLIC	??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@	; `string'
PUBLIC	??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@		; `string'
PUBLIC	??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@		; `string'
PUBLIC	??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@	; `string'
PUBLIC	??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@		; `string'
PUBLIC	??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@		; `string'
PUBLIC	??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@	; `string'
PUBLIC	??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@		; `string'
PUBLIC	??_C@_0P@BJJPCHFI@Unknown?5format?$AA@		; `string'
PUBLIC	??_C@_07NCBDPBMK@D3DFMT_?$AA@			; `string'
PUBLIC	?D3DUtil_D3DFormatToString@@YAPADW4_D3DFORMAT@@_N@Z ; D3DUtil_D3DFormatToString
EXTRN	__imp__lstrlenA@4:NEAR
;	COMDAT ??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@
CONST	SEGMENT
??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@ DB 'D3DFMT_UNKNOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@
CONST	SEGMENT
??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@ DB 'D3DFMT_R8G8B8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@
CONST	SEGMENT
??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@ DB 'D3DFMT_A8R8G8B8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@
CONST	SEGMENT
??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@ DB 'D3DFMT_X8R8G8B8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@
CONST	SEGMENT
??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@ DB 'D3DFMT_R5G6B5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@
CONST	SEGMENT
??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@ DB 'D3DFMT_X1R5G5B5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@
CONST	SEGMENT
??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@ DB 'D3DFMT_A1R5G5B5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@
CONST	SEGMENT
??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@ DB 'D3DFMT_A4R4G4B4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@
CONST	SEGMENT
??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@ DB 'D3DFMT_R3G3B2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNGIHEFB@D3DFMT_A8?$AA@
CONST	SEGMENT
??_C@_09JNGIHEFB@D3DFMT_A8?$AA@ DB 'D3DFMT_A8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@
CONST	SEGMENT
??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@ DB 'D3DFMT_A8R3G3B2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@
CONST	SEGMENT
??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@ DB 'D3DFMT_X4R4G4B4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@
CONST	SEGMENT
??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@ DB 'D3DFMT_A2B10G10R10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@
CONST	SEGMENT
??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@ DB 'D3DFMT_A8B8G8R8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@
CONST	SEGMENT
??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@ DB 'D3DFMT_X8B8G8R8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@
CONST	SEGMENT
??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@ DB 'D3DFMT_G16R16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@
CONST	SEGMENT
??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@ DB 'D3DFMT_A2R10G10B10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@
CONST	SEGMENT
??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@ DB 'D3DFMT_A16B16G16R16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@
CONST	SEGMENT
??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@ DB 'D3DFMT_A8P8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IAIMLNBG@D3DFMT_P8?$AA@
CONST	SEGMENT
??_C@_09IAIMLNBG@D3DFMT_P8?$AA@ DB 'D3DFMT_P8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFLAOHAC@D3DFMT_L8?$AA@
CONST	SEGMENT
??_C@_09JFLAOHAC@D3DFMT_L8?$AA@ DB 'D3DFMT_L8', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@
CONST	SEGMENT
??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@ DB 'D3DFMT_A8L8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@
CONST	SEGMENT
??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@ DB 'D3DFMT_A4L4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@
CONST	SEGMENT
??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@ DB 'D3DFMT_V8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@
CONST	SEGMENT
??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@ DB 'D3DFMT_L6V5U5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@
CONST	SEGMENT
??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@ DB 'D3DFMT_X8L8V8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@
CONST	SEGMENT
??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@ DB 'D3DFMT_Q8W8V8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@
CONST	SEGMENT
??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@ DB 'D3DFMT_V16U16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@
CONST	SEGMENT
??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@ DB 'D3DFMT_A2W10V10U10', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@
CONST	SEGMENT
??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@ DB 'D3DFMT_D16_LOCKABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@
CONST	SEGMENT
??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@ DB 'D3DFMT_D32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@
CONST	SEGMENT
??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@ DB 'D3DFMT_D15S1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@
CONST	SEGMENT
??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@ DB 'D3DFMT_D24S8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@
CONST	SEGMENT
??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@ DB 'D3DFMT_D24X8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@
CONST	SEGMENT
??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@ DB 'D3DFMT_D24X4S4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@
CONST	SEGMENT
??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@ DB 'D3DFMT_D16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@
CONST	SEGMENT
??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@ DB 'D3DFMT_L16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@
CONST	SEGMENT
??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@ DB 'D3DFMT_VERTEXDATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@
CONST	SEGMENT
??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@ DB 'D3DFMT_INDEX16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@
CONST	SEGMENT
??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@ DB 'D3DFMT_INDEX32', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@
CONST	SEGMENT
??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@ DB 'D3DFMT_Q16W16V16U16', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@
CONST	SEGMENT
??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@ DB 'D3DFMT_R16F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@
CONST	SEGMENT
??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@ DB 'D3DFMT_G16R16F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@
CONST	SEGMENT
??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@ DB 'D3DFMT_A16B16G16R16F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@
CONST	SEGMENT
??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@ DB 'D3DFMT_R32F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@
CONST	SEGMENT
??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@ DB 'D3DFMT_G32R32F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@
CONST	SEGMENT
??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@ DB 'D3DFMT_A32B32G32R32F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@
CONST	SEGMENT
??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@ DB 'D3DFMT_CxV8U8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@
CONST	SEGMENT
??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@ DB 'D3DFMT_DXT1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@
CONST	SEGMENT
??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@ DB 'D3DFMT_MULTI2_ARGB8', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@
CONST	SEGMENT
??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@ DB 'D3DFMT_DXT2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@
CONST	SEGMENT
??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@ DB 'D3DFMT_YUY2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@
CONST	SEGMENT
??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@ DB 'D3DFMT_DXT3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BJJPCHFI@Unknown?5format?$AA@
CONST	SEGMENT
??_C@_0P@BJJPCHFI@Unknown?5format?$AA@ DB 'Unknown format', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@
CONST	SEGMENT
??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@ DB 'D3DFMT_UYVY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@
CONST	SEGMENT
??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@ DB 'D3DFMT_DXT5', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@
CONST	SEGMENT
??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@ DB 'D3DFMT_DXT4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NCBDPBMK@D3DFMT_?$AA@
CONST	SEGMENT
??_C@_07NCBDPBMK@D3DFMT_?$AA@ DB 'D3DFMT_', 00H		; `string'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
CONST	ENDS
;	COMDAT ?D3DUtil_D3DFormatToString@@YAPADW4_D3DFORMAT@@_N@Z
_TEXT	SEGMENT
_format$ = 8						; size = 4
_bWithPrefix$ = 12					; size = 1
?D3DUtil_D3DFormatToString@@YAPADW4_D3DFORMAT@@_N@Z PROC NEAR ; D3DUtil_D3DFormatToString, COMDAT

; 363  :     TCHAR* pstr = NULL;
; 364  :     switch( format )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _format$[esp-4]
  00004	83 f8 43	 cmp	 eax, 67			; 00000043H
  00007	56		 push	 esi
  00008	0f 8f 3f 01 00
	00		 jg	 $L227324
  0000e	0f 84 2f 01 00
	00		 je	 $L225822
  00014	83 f8 40	 cmp	 eax, 64			; 00000040H
  00017	0f 87 7e 02 00
	00		 ja	 $L225878
  0001d	0f b6 80 00 00
	00 00		 movzx	 eax, BYTE PTR $L227332[eax]
  00024	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L227333[eax*4]
$L225766:

; 365  :     {
; 366  :     case D3DFMT_UNKNOWN:         pstr = TEXT("D3DFMT_UNKNOWN"); break;

  0002b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@FCGOGLON@D3DFMT_UNKNOWN?$AA@
  00030	e9 80 02 00 00	 jmp	 $L225763
$L225768:

; 367  :     case D3DFMT_R8G8B8:          pstr = TEXT("D3DFMT_R8G8B8"); break;

  00035	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@OOCIJBAM@D3DFMT_R8G8B8?$AA@
  0003a	e9 76 02 00 00	 jmp	 $L225763
$L225770:

; 368  :     case D3DFMT_A8R8G8B8:        pstr = TEXT("D3DFMT_A8R8G8B8"); break;

  0003f	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@CHHHKFAO@D3DFMT_A8R8G8B8?$AA@
  00044	e9 6c 02 00 00	 jmp	 $L225763
$L225772:

; 369  :     case D3DFMT_X8R8G8B8:        pstr = TEXT("D3DFMT_X8R8G8B8"); break;

  00049	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@CHBEFBCE@D3DFMT_X8R8G8B8?$AA@
  0004e	e9 62 02 00 00	 jmp	 $L225763
$L225774:

; 370  :     case D3DFMT_R5G6B5:          pstr = TEXT("D3DFMT_R5G6B5"); break;

  00053	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@HMHILKM@D3DFMT_R5G6B5?$AA@
  00058	e9 58 02 00 00	 jmp	 $L225763
$L225776:

; 371  :     case D3DFMT_X1R5G5B5:        pstr = TEXT("D3DFMT_X1R5G5B5"); break;

  0005d	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@MDABPPEB@D3DFMT_X1R5G5B5?$AA@
  00062	e9 4e 02 00 00	 jmp	 $L225763
$L225778:

; 372  :     case D3DFMT_A1R5G5B5:        pstr = TEXT("D3DFMT_A1R5G5B5"); break;

  00067	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@MDGCALGL@D3DFMT_A1R5G5B5?$AA@
  0006c	e9 44 02 00 00	 jmp	 $L225763
$L225780:

; 373  :     case D3DFMT_A4R4G4B4:        pstr = TEXT("D3DFMT_A4R4G4B4"); break;

  00071	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@OBHJIAIO@D3DFMT_A4R4G4B4?$AA@
  00076	e9 3a 02 00 00	 jmp	 $L225763
$L225782:

; 374  :     case D3DFMT_R3G3B2:          pstr = TEXT("D3DFMT_R3G3B2"); break;

  0007b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@KJABAOEE@D3DFMT_R3G3B2?$AA@
  00080	e9 30 02 00 00	 jmp	 $L225763
$L225784:

; 375  :     case D3DFMT_A8:              pstr = TEXT("D3DFMT_A8"); break;

  00085	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_09JNGIHEFB@D3DFMT_A8?$AA@
  0008a	e9 26 02 00 00	 jmp	 $L225763
$L225786:

; 376  :     case D3DFMT_A8R3G3B2:        pstr = TEXT("D3DFMT_A8R3G3B2"); break;

  0008f	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@GAFODKEG@D3DFMT_A8R3G3B2?$AA@
  00094	e9 1c 02 00 00	 jmp	 $L225763
$L225788:

; 377  :     case D3DFMT_X4R4G4B4:        pstr = TEXT("D3DFMT_X4R4G4B4"); break;

  00099	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@OBBKHEKE@D3DFMT_X4R4G4B4?$AA@
  0009e	e9 12 02 00 00	 jmp	 $L225763
$L225790:

; 378  :     case D3DFMT_A2B10G10R10:     pstr = TEXT("D3DFMT_A2B10G10R10"); break;

  000a3	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BD@OELFJMLB@D3DFMT_A2B10G10R10?$AA@
  000a8	e9 08 02 00 00	 jmp	 $L225763
$L225792:

; 379  :     case D3DFMT_A8B8G8R8:        pstr = TEXT("D3DFMT_A8B8G8R8"); break;

  000ad	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@FMIPJKLA@D3DFMT_A8B8G8R8?$AA@
  000b2	e9 fe 01 00 00	 jmp	 $L225763
$L225794:

; 380  :     case D3DFMT_X8B8G8R8:        pstr = TEXT("D3DFMT_X8B8G8R8"); break;

  000b7	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@FMOMGOJK@D3DFMT_X8B8G8R8?$AA@
  000bc	e9 f4 01 00 00	 jmp	 $L225763
$L225796:

; 381  :     case D3DFMT_G16R16:          pstr = TEXT("D3DFMT_G16R16"); break;

  000c1	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@KENMFGDC@D3DFMT_G16R16?$AA@
  000c6	e9 ea 01 00 00	 jmp	 $L225763
$L225798:

; 382  :     case D3DFMT_A2R10G10B10:     pstr = TEXT("D3DFMT_A2R10G10B10"); break;

  000cb	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BD@JDACEKMG@D3DFMT_A2R10G10B10?$AA@
  000d0	e9 e0 01 00 00	 jmp	 $L225763
$L225800:

; 383  :     case D3DFMT_A16B16G16R16:    pstr = TEXT("D3DFMT_A16B16G16R16"); break;

  000d5	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BE@GGADDKEH@D3DFMT_A16B16G16R16?$AA@
  000da	e9 d6 01 00 00	 jmp	 $L225763
$L225802:

; 384  :     case D3DFMT_A8P8:            pstr = TEXT("D3DFMT_A8P8"); break;

  000df	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@IPOLNGBD@D3DFMT_A8P8?$AA@
  000e4	e9 cc 01 00 00	 jmp	 $L225763
$L225804:

; 385  :     case D3DFMT_P8:              pstr = TEXT("D3DFMT_P8"); break;

  000e9	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_09IAIMLNBG@D3DFMT_P8?$AA@
  000ee	e9 c2 01 00 00	 jmp	 $L225763
$L225806:

; 386  :     case D3DFMT_L8:              pstr = TEXT("D3DFMT_L8"); break;

  000f3	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_09JFLAOHAC@D3DFMT_L8?$AA@
  000f8	e9 b8 01 00 00	 jmp	 $L225763
$L225808:

; 387  :     case D3DFMT_A8L8:            pstr = TEXT("D3DFMT_A8L8"); break;

  000fd	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@JKNHIMAH@D3DFMT_A8L8?$AA@
  00102	e9 ae 01 00 00	 jmp	 $L225763
$L225810:

; 388  :     case D3DFMT_A4L4:            pstr = TEXT("D3DFMT_A4L4"); break;

  00107	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@HMLEHMLD@D3DFMT_A4L4?$AA@
  0010c	e9 a4 01 00 00	 jmp	 $L225763
$L225812:

; 389  :     case D3DFMT_V8U8:            pstr = TEXT("D3DFMT_V8U8"); break;

  00111	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@FLOAFPGK@D3DFMT_V8U8?$AA@
  00116	e9 9a 01 00 00	 jmp	 $L225763
$L225814:

; 390  :     case D3DFMT_L6V5U5:          pstr = TEXT("D3DFMT_L6V5U5"); break;

  0011b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@OAOOLKLI@D3DFMT_L6V5U5?$AA@
  00120	e9 90 01 00 00	 jmp	 $L225763
$L225816:

; 391  :     case D3DFMT_X8L8V8U8:        pstr = TEXT("D3DFMT_X8L8V8U8"); break;

  00125	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@FEBMLNHA@D3DFMT_X8L8V8U8?$AA@
  0012a	e9 86 01 00 00	 jmp	 $L225763
$L225818:

; 392  :     case D3DFMT_Q8W8V8U8:        pstr = TEXT("D3DFMT_Q8W8V8U8"); break;

  0012f	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BA@JNGGMDBP@D3DFMT_Q8W8V8U8?$AA@
  00134	e9 7c 01 00 00	 jmp	 $L225763
$L225820:

; 393  :     case D3DFMT_V16U16:          pstr = TEXT("D3DFMT_V16U16"); break;

  00139	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@PIKCPJPB@D3DFMT_V16U16?$AA@
  0013e	e9 72 01 00 00	 jmp	 $L225763
$L225822:

; 394  :     case D3DFMT_A2W10V10U10:     pstr = TEXT("D3DFMT_A2W10V10U10"); break;

  00143	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BD@HJEMHJNO@D3DFMT_A2W10V10U10?$AA@
  00148	e9 68 01 00 00	 jmp	 $L225763
$L227324:

; 363  :     TCHAR* pstr = NULL;
; 364  :     switch( format )

  0014d	83 f8 64	 cmp	 eax, 100		; 00000064H
  00150	7f 6f		 jg	 SHORT $L227325
  00152	74 63		 je	 SHORT $L225854
  00154	83 c0 ba	 add	 eax, -70		; ffffffbaH
  00157	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  0015a	0f 87 3b 01 00
	00		 ja	 $L225878
  00160	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L227334[eax*4]
$L225838:

; 402  :     case D3DFMT_D16_LOCKABLE:    pstr = TEXT("D3DFMT_D16_LOCKABLE"); break;

  00167	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BE@GKJJNPH@D3DFMT_D16_LOCKABLE?$AA@
  0016c	e9 44 01 00 00	 jmp	 $L225763
$L225840:

; 403  :     case D3DFMT_D32:             pstr = TEXT("D3DFMT_D32"); break;

  00171	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0L@MKAKECLE@D3DFMT_D32?$AA@
  00176	e9 3a 01 00 00	 jmp	 $L225763
$L225842:

; 404  :     case D3DFMT_D15S1:           pstr = TEXT("D3DFMT_D15S1"); break;

  0017b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0N@FHMLHNII@D3DFMT_D15S1?$AA@
  00180	e9 30 01 00 00	 jmp	 $L225763
$L225844:

; 405  :     case D3DFMT_D24S8:           pstr = TEXT("D3DFMT_D24S8"); break;

  00185	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0N@HJBFNLHE@D3DFMT_D24S8?$AA@
  0018a	e9 26 01 00 00	 jmp	 $L225763
$L225846:

; 406  :     case D3DFMT_D24X8:           pstr = TEXT("D3DFMT_D24X8"); break;

  0018f	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0N@HFEADEJF@D3DFMT_D24X8?$AA@
  00194	e9 1c 01 00 00	 jmp	 $L225763
$L225848:

; 407  :     case D3DFMT_D24X4S4:         pstr = TEXT("D3DFMT_D24X4S4"); break;

  00199	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@LCIECDAM@D3DFMT_D24X4S4?$AA@
  0019e	e9 12 01 00 00	 jmp	 $L225763
$L225850:

; 408  :     case D3DFMT_D16:             pstr = TEXT("D3DFMT_D16"); break;

  001a3	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0L@KNOCFDNO@D3DFMT_D16?$AA@
  001a8	e9 08 01 00 00	 jmp	 $L225763
$L225852:

; 409  :     case D3DFMT_L16:             pstr = TEXT("D3DFMT_L16"); break;

  001ad	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0L@GIFGHLDB@D3DFMT_L16?$AA@
  001b2	e9 fe 00 00 00	 jmp	 $L225763
$L225854:

; 410  :     case D3DFMT_VERTEXDATA:      pstr = TEXT("D3DFMT_VERTEXDATA"); break;

  001b7	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BC@LPMKMLOH@D3DFMT_VERTEXDATA?$AA@
  001bc	e9 f4 00 00 00	 jmp	 $L225763
$L227325:

; 363  :     TCHAR* pstr = NULL;
; 364  :     switch( format )

  001c1	83 f8 75	 cmp	 eax, 117		; 00000075H
  001c4	7f 76		 jg	 SHORT $L227326
  001c6	74 6d		 je	 SHORT $L225876
  001c8	83 c0 9b	 add	 eax, -101		; ffffff9bH
  001cb	83 f8 0f	 cmp	 eax, 15			; 0000000fH
  001ce	0f 87 c7 00 00
	00		 ja	 $L225878
  001d4	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L227335[eax*4]
$L225856:

; 411  :     case D3DFMT_INDEX16:         pstr = TEXT("D3DFMT_INDEX16"); break;

  001db	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@JJIOOHAH@D3DFMT_INDEX16?$AA@
  001e0	e9 d0 00 00 00	 jmp	 $L225763
$L225858:

; 412  :     case D3DFMT_INDEX32:         pstr = TEXT("D3DFMT_INDEX32"); break;

  001e5	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@POGGPGGN@D3DFMT_INDEX32?$AA@
  001ea	e9 c6 00 00 00	 jmp	 $L225763
$L225860:

; 413  :     case D3DFMT_Q16W16V16U16:    pstr = TEXT("D3DFMT_Q16W16V16U16"); break;

  001ef	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BE@EPPNHJPC@D3DFMT_Q16W16V16U16?$AA@
  001f4	e9 bc 00 00 00	 jmp	 $L225763
$L225864:

; 415  :     case D3DFMT_R16F:            pstr = TEXT("D3DFMT_R16F"); break;

  001f9	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@CIEFJHCB@D3DFMT_R16F?$AA@
  001fe	e9 b2 00 00 00	 jmp	 $L225763
$L225866:

; 416  :     case D3DFMT_G16R16F:         pstr = TEXT("D3DFMT_G16R16F"); break;

  00203	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@GOFAGFFF@D3DFMT_G16R16F?$AA@
  00208	e9 a8 00 00 00	 jmp	 $L225763
$L225868:

; 417  :     case D3DFMT_A16B16G16R16F:   pstr = TEXT("D3DFMT_A16B16G16R16F"); break;

  0020d	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BF@EOPNDPIK@D3DFMT_A16B16G16R16F?$AA@
  00212	e9 9e 00 00 00	 jmp	 $L225763
$L225870:

; 418  :     case D3DFMT_R32F:            pstr = TEXT("D3DFMT_R32F"); break;

  00217	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@IFEFPHHG@D3DFMT_R32F?$AA@
  0021c	e9 94 00 00 00	 jmp	 $L225763
$L225872:

; 419  :     case D3DFMT_G32R32F:         pstr = TEXT("D3DFMT_G32R32F"); break;

  00221	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@MPFOFGDN@D3DFMT_G32R32F?$AA@
  00226	e9 8a 00 00 00	 jmp	 $L225763
$L225874:

; 420  :     case D3DFMT_A32B32G32R32F:   pstr = TEXT("D3DFMT_A32B32G32R32F"); break;

  0022b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BF@NFLAADOH@D3DFMT_A32B32G32R32F?$AA@
  00230	e9 80 00 00 00	 jmp	 $L225763
$L225876:

; 421  :     case D3DFMT_CxV8U8:          pstr = TEXT("D3DFMT_CxV8U8"); break;

  00235	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0O@GEDAAHNN@D3DFMT_CxV8U8?$AA@
  0023a	eb 79		 jmp	 SHORT $L225763
$L227326:

; 363  :     TCHAR* pstr = NULL;
; 364  :     switch( format )

  0023c	3d 44 58 54 33	 cmp	 eax, 861165636		; 33545844H
  00241	7f 43		 jg	 SHORT $L227327
  00243	74 3a		 je	 SHORT $L225832
  00245	3d 44 58 54 32	 cmp	 eax, 844388420		; 32545844H
  0024a	7f 25		 jg	 SHORT $L227328
  0024c	74 1c		 je	 SHORT $L225830
  0024e	3d 4d 45 54 31	 cmp	 eax, 827606349		; 3154454dH
  00253	74 0e		 je	 SHORT $L225862
  00255	3d 44 58 54 31	 cmp	 eax, 827611204		; 31545844H
  0025a	75 3f		 jne	 SHORT $L225878

; 397  :     case D3DFMT_DXT1:            pstr = TEXT("D3DFMT_DXT1"); break;

  0025c	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@KKOGLNPF@D3DFMT_DXT1?$AA@
  00261	eb 52		 jmp	 SHORT $L225763
$L225862:

; 414  :     case D3DFMT_MULTI2_ARGB8:    pstr = TEXT("D3DFMT_MULTI2_ARGB8"); break;

  00263	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0BE@LCLDBCOL@D3DFMT_MULTI2_ARGB8?$AA@
  00268	eb 4b		 jmp	 SHORT $L225763
$L225830:

; 398  :     case D3DFMT_DXT2:            pstr = TEXT("D3DFMT_DXT2"); break;

  0026a	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@IBMLOODG@D3DFMT_DXT2?$AA@
  0026f	eb 44		 jmp	 SHORT $L225763
$L227328:

; 363  :     TCHAR* pstr = NULL;
; 364  :     switch( format )

  00271	3d 59 55 59 32	 cmp	 eax, 844715353		; 32595559H
  00276	75 23		 jne	 SHORT $L225878

; 396  :     case D3DFMT_YUY2:            pstr = TEXT("D3DFMT_YUY2"); break;

  00278	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@ODAJPGIL@D3DFMT_YUY2?$AA@
  0027d	eb 36		 jmp	 SHORT $L225763
$L225832:

; 399  :     case D3DFMT_DXT3:            pstr = TEXT("D3DFMT_DXT3"); break;

  0027f	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@JINANPHH@D3DFMT_DXT3?$AA@
  00284	eb 2f		 jmp	 SHORT $L225763
$L227327:

; 363  :     TCHAR* pstr = NULL;
; 364  :     switch( format )

  00286	3d 44 58 54 34	 cmp	 eax, 877942852		; 34545844H
  0028b	74 23		 je	 SHORT $L225834
  0028d	3d 44 58 54 35	 cmp	 eax, 894720068		; 35545844H
  00292	74 15		 je	 SHORT $L225836
  00294	3d 55 59 56 59	 cmp	 eax, 1498831189		; 59565955H
  00299	74 07		 je	 SHORT $L225824
$L225878:

; 422  :     default:                     pstr = TEXT("Unknown format"); break;

  0029b	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0P@BJJPCHFI@Unknown?5format?$AA@
  002a0	eb 13		 jmp	 SHORT $L225763
$L225824:

; 395  :     case D3DFMT_UYVY:            pstr = TEXT("D3DFMT_UYVY"); break;

  002a2	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@OBHKFBGD@D3DFMT_UYVY?$AA@
  002a7	eb 0c		 jmp	 SHORT $L225763
$L225836:

; 401  :     case D3DFMT_DXT5:            pstr = TEXT("D3DFMT_DXT5"); break;

  002a9	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@MOIKHIPB@D3DFMT_DXT5?$AA@
  002ae	eb 05		 jmp	 SHORT $L225763
$L225834:

; 400  :     case D3DFMT_DXT4:            pstr = TEXT("D3DFMT_DXT4"); break;

  002b0	be 00 00 00 00	 mov	 esi, OFFSET FLAT:??_C@_0M@NHJBEJLA@D3DFMT_DXT4?$AA@
$L225763:

; 423  :     }
; 424  :     if( bWithPrefix || _tcsstr( pstr, TEXT("D3DFMT_") )== NULL )

  002b5	8a 44 24 0c	 mov	 al, BYTE PTR _bWithPrefix$[esp]
  002b9	84 c0		 test	 al, al
  002bb	75 21		 jne	 SHORT $L225881
  002bd	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NCBDPBMK@D3DFMT_?$AA@
  002c2	56		 push	 esi
  002c3	e8 00 00 00 00	 call	 __mbsstr
  002c8	83 c4 08	 add	 esp, 8
  002cb	85 c0		 test	 eax, eax
  002cd	74 0f		 je	 SHORT $L225881

; 426  :     else
; 427  :         return pstr + lstrlen( TEXT("D3DFMT_") );

  002cf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07NCBDPBMK@D3DFMT_?$AA@
  002d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrlenA@4
  002da	03 c6		 add	 eax, esi
  002dc	5e		 pop	 esi

; 428  : }

  002dd	c3		 ret	 0
$L225881:

; 425  :         return pstr;

  002de	8b c6		 mov	 eax, esi
  002e0	5e		 pop	 esi

; 428  : }

  002e1	c3		 ret	 0
  002e2	8b ff		 npad	 2
$L227333:
  002e4	00 00 00 00	 DD	 $L225766
  002e8	00 00 00 00	 DD	 $L225768
  002ec	00 00 00 00	 DD	 $L225770
  002f0	00 00 00 00	 DD	 $L225772
  002f4	00 00 00 00	 DD	 $L225774
  002f8	00 00 00 00	 DD	 $L225776
  002fc	00 00 00 00	 DD	 $L225778
  00300	00 00 00 00	 DD	 $L225780
  00304	00 00 00 00	 DD	 $L225782
  00308	00 00 00 00	 DD	 $L225784
  0030c	00 00 00 00	 DD	 $L225786
  00310	00 00 00 00	 DD	 $L225788
  00314	00 00 00 00	 DD	 $L225790
  00318	00 00 00 00	 DD	 $L225792
  0031c	00 00 00 00	 DD	 $L225794
  00320	00 00 00 00	 DD	 $L225796
  00324	00 00 00 00	 DD	 $L225798
  00328	00 00 00 00	 DD	 $L225800
  0032c	00 00 00 00	 DD	 $L225802
  00330	00 00 00 00	 DD	 $L225804
  00334	00 00 00 00	 DD	 $L225806
  00338	00 00 00 00	 DD	 $L225808
  0033c	00 00 00 00	 DD	 $L225810
  00340	00 00 00 00	 DD	 $L225812
  00344	00 00 00 00	 DD	 $L225814
  00348	00 00 00 00	 DD	 $L225816
  0034c	00 00 00 00	 DD	 $L225818
  00350	00 00 00 00	 DD	 $L225820
  00354	00 00 00 00	 DD	 $L225878
$L227332:
  00358	00		 DB	 0
  00359	1c		 DB	 28			; 0000001cH
  0035a	1c		 DB	 28			; 0000001cH
  0035b	1c		 DB	 28			; 0000001cH
  0035c	1c		 DB	 28			; 0000001cH
  0035d	1c		 DB	 28			; 0000001cH
  0035e	1c		 DB	 28			; 0000001cH
  0035f	1c		 DB	 28			; 0000001cH
  00360	1c		 DB	 28			; 0000001cH
  00361	1c		 DB	 28			; 0000001cH
  00362	1c		 DB	 28			; 0000001cH
  00363	1c		 DB	 28			; 0000001cH
  00364	1c		 DB	 28			; 0000001cH
  00365	1c		 DB	 28			; 0000001cH
  00366	1c		 DB	 28			; 0000001cH
  00367	1c		 DB	 28			; 0000001cH
  00368	1c		 DB	 28			; 0000001cH
  00369	1c		 DB	 28			; 0000001cH
  0036a	1c		 DB	 28			; 0000001cH
  0036b	1c		 DB	 28			; 0000001cH
  0036c	01		 DB	 1
  0036d	02		 DB	 2
  0036e	03		 DB	 3
  0036f	04		 DB	 4
  00370	05		 DB	 5
  00371	06		 DB	 6
  00372	07		 DB	 7
  00373	08		 DB	 8
  00374	09		 DB	 9
  00375	0a		 DB	 10			; 0000000aH
  00376	0b		 DB	 11			; 0000000bH
  00377	0c		 DB	 12			; 0000000cH
  00378	0d		 DB	 13			; 0000000dH
  00379	0e		 DB	 14			; 0000000eH
  0037a	0f		 DB	 15			; 0000000fH
  0037b	10		 DB	 16			; 00000010H
  0037c	11		 DB	 17			; 00000011H
  0037d	1c		 DB	 28			; 0000001cH
  0037e	1c		 DB	 28			; 0000001cH
  0037f	1c		 DB	 28			; 0000001cH
  00380	12		 DB	 18			; 00000012H
  00381	13		 DB	 19			; 00000013H
  00382	1c		 DB	 28			; 0000001cH
  00383	1c		 DB	 28			; 0000001cH
  00384	1c		 DB	 28			; 0000001cH
  00385	1c		 DB	 28			; 0000001cH
  00386	1c		 DB	 28			; 0000001cH
  00387	1c		 DB	 28			; 0000001cH
  00388	1c		 DB	 28			; 0000001cH
  00389	1c		 DB	 28			; 0000001cH
  0038a	14		 DB	 20			; 00000014H
  0038b	15		 DB	 21			; 00000015H
  0038c	16		 DB	 22			; 00000016H
  0038d	1c		 DB	 28			; 0000001cH
  0038e	1c		 DB	 28			; 0000001cH
  0038f	1c		 DB	 28			; 0000001cH
  00390	1c		 DB	 28			; 0000001cH
  00391	1c		 DB	 28			; 0000001cH
  00392	1c		 DB	 28			; 0000001cH
  00393	1c		 DB	 28			; 0000001cH
  00394	17		 DB	 23			; 00000017H
  00395	18		 DB	 24			; 00000018H
  00396	19		 DB	 25			; 00000019H
  00397	1a		 DB	 26			; 0000001aH
  00398	1b		 DB	 27			; 0000001bH
  00399	8d 49 00	 npad	 3
$L227334:
  0039c	00 00 00 00	 DD	 $L225838
  003a0	00 00 00 00	 DD	 $L225840
  003a4	00 00 00 00	 DD	 $L225878
  003a8	00 00 00 00	 DD	 $L225842
  003ac	00 00 00 00	 DD	 $L225878
  003b0	00 00 00 00	 DD	 $L225844
  003b4	00 00 00 00	 DD	 $L225878
  003b8	00 00 00 00	 DD	 $L225846
  003bc	00 00 00 00	 DD	 $L225878
  003c0	00 00 00 00	 DD	 $L225848
  003c4	00 00 00 00	 DD	 $L225850
  003c8	00 00 00 00	 DD	 $L225852
$L227335:
  003cc	00 00 00 00	 DD	 $L225856
  003d0	00 00 00 00	 DD	 $L225858
  003d4	00 00 00 00	 DD	 $L225878
  003d8	00 00 00 00	 DD	 $L225878
  003dc	00 00 00 00	 DD	 $L225878
  003e0	00 00 00 00	 DD	 $L225878
  003e4	00 00 00 00	 DD	 $L225878
  003e8	00 00 00 00	 DD	 $L225878
  003ec	00 00 00 00	 DD	 $L225878
  003f0	00 00 00 00	 DD	 $L225860
  003f4	00 00 00 00	 DD	 $L225864
  003f8	00 00 00 00	 DD	 $L225866
  003fc	00 00 00 00	 DD	 $L225868
  00400	00 00 00 00	 DD	 $L225870
  00404	00 00 00 00	 DD	 $L225872
  00408	00 00 00 00	 DD	 $L225874
?D3DUtil_D3DFormatToString@@YAPADW4_D3DFORMAT@@_N@Z ENDP ; D3DUtil_D3DFormatToString
_TEXT	ENDS
PUBLIC	?SetWindow@CD3DArcBall@@QAEXHHM@Z		; CD3DArcBall::SetWindow
; Function compile flags: /Ogty
;	COMDAT ?SetWindow@CD3DArcBall@@QAEXHHM@Z
_TEXT	SEGMENT
_iWidth$ = 8						; size = 4
_iHeight$ = 12						; size = 4
_fRadius$ = 16						; size = 4
?SetWindow@CD3DArcBall@@QAEXHHM@Z PROC NEAR		; CD3DArcBall::SetWindow, COMDAT
; _this$ = ecx

; 510  :     // Set ArcBall info
; 511  :     m_iWidth  = iWidth;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _iWidth$[esp-4]

; 512  :     m_iHeight = iHeight;

  00004	8b 54 24 08	 mov	 edx, DWORD PTR _iHeight$[esp-4]
  00008	89 01		 mov	 DWORD PTR [ecx], eax

; 513  :     m_fRadius = fRadius;

  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR _fRadius$[esp-4]
  0000e	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00011	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 514  : }

  00014	c2 0c 00	 ret	 12			; 0000000cH
?SetWindow@CD3DArcBall@@QAEXHHM@Z ENDP			; CD3DArcBall::SetWindow
_TEXT	ENDS
PUBLIC	?SetRadius@CD3DArcBall@@QAEXM@Z			; CD3DArcBall::SetRadius
; Function compile flags: /Ogty
;	COMDAT ?SetRadius@CD3DArcBall@@QAEXM@Z
_TEXT	SEGMENT
_fRadius$ = 8						; size = 4
?SetRadius@CD3DArcBall@@QAEXM@Z PROC NEAR		; CD3DArcBall::SetRadius, COMDAT
; _this$ = ecx

; 560  :     m_fRadiusTranslation = fRadius;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _fRadius$[esp-4]
  00004	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 561  : }

  00007	c2 04 00	 ret	 4
?SetRadius@CD3DArcBall@@QAEXM@Z ENDP			; CD3DArcBall::SetRadius
_TEXT	ENDS
PUBLIC	?SetProjParams@CD3DCamera@@QAEXMMMM@Z		; CD3DCamera::SetProjParams
EXTRN	_D3DXMatrixPerspectiveFovLH@20:NEAR
; Function compile flags: /Ogty
;	COMDAT ?SetProjParams@CD3DCamera@@QAEXMMMM@Z
_TEXT	SEGMENT
_fFOV$ = 8						; size = 4
_fAspect$ = 12						; size = 4
_fNearPlane$ = 16					; size = 4
_fFarPlane$ = 20					; size = 4
?SetProjParams@CD3DCamera@@QAEXMMMM@Z PROC NEAR		; CD3DCamera::SetProjParams, COMDAT
; _this$ = ecx

; 704  :     // Set attributes for the projection matrix
; 705  :     m_fFOV        = fFOV;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _fFOV$[esp-4]

; 706  :     m_fAspect     = fAspect;

  00004	8b 54 24 08	 mov	 edx, DWORD PTR _fAspect$[esp-4]
  00008	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax

; 707  :     m_fNearPlane  = fNearPlane;

  0000e	8b 44 24 0c	 mov	 eax, DWORD PTR _fNearPlane$[esp-4]
  00012	89 91 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], edx

; 708  :     m_fFarPlane   = fFarPlane;

  00018	8b 54 24 10	 mov	 edx, DWORD PTR _fFarPlane$[esp-4]
  0001c	89 81 c8 00 00
	00		 mov	 DWORD PTR [ecx+200], eax

; 709  : 
; 710  :     D3DXMatrixPerspectiveFovLH( &m_matProj, fFOV, fAspect, fNearPlane, fFarPlane );

  00022	8b c2		 mov	 eax, edx
  00024	50		 push	 eax
  00025	8b 44 24 0c	 mov	 eax, DWORD PTR _fAspect$[esp]
  00029	89 91 cc 00 00
	00		 mov	 DWORD PTR [ecx+204], edx
  0002f	8b 54 24 10	 mov	 edx, DWORD PTR _fNearPlane$[esp]
  00033	52		 push	 edx
  00034	8b 54 24 0c	 mov	 edx, DWORD PTR _fFOV$[esp+4]
  00038	50		 push	 eax
  00039	52		 push	 edx
  0003a	81 c1 d0 00 00
	00		 add	 ecx, 208		; 000000d0H
  00040	51		 push	 ecx
  00041	e8 00 00 00 00	 call	 _D3DXMatrixPerspectiveFovLH@20

; 711  : }

  00046	c2 10 00	 ret	 16			; 00000010H
?SetProjParams@CD3DCamera@@QAEXMMMM@Z ENDP		; CD3DCamera::SetProjParams
_TEXT	ENDS
PUBLIC	_asinf
EXTRN	__CIasin:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\math.h
;	COMDAT _asinf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_asinf	PROC NEAR					; COMDAT

; 436  :         {return ((float)asin((double)_X)); }

  00000	d9 44 24 04	 fld	 DWORD PTR __X$[esp-4]
  00004	e8 00 00 00 00	 call	 __CIasin
  00009	c3		 ret	 0
_asinf	ENDP
_TEXT	ENDS
PUBLIC	_sqrtf
; Function compile flags: /Ogty
;	COMDAT _sqrtf
_TEXT	SEGMENT
__X$ = 8						; size = 4
_sqrtf	PROC NEAR					; COMDAT

; 470  :         {return ((float)sqrt((double)_X)); }

  00000	d9 44 24 04	 fld	 DWORD PTR __X$[esp-4]
  00004	d9 fa		 fsqrt
  00006	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@XZ				; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\dx_sdk\d3dx9math.h
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT
??0D3DXVECTOR3@@QAE@XZ PROC NEAR			; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 165  :     D3DXVECTOR3() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXVECTOR3@@QAE@XZ ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??0D3DXMATRIX@@QAE@XZ				; D3DXMATRIX::D3DXMATRIX
; Function compile flags: /Ogty
;	COMDAT ??0D3DXMATRIX@@QAE@XZ
_TEXT	SEGMENT
??0D3DXMATRIX@@QAE@XZ PROC NEAR				; D3DXMATRIX::D3DXMATRIX, COMDAT
; _this$ = ecx

; 313  :     D3DXMATRIX() {};

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXMATRIX@@QAE@XZ ENDP				; D3DXMATRIX::D3DXMATRIX
_TEXT	ENDS
PUBLIC	??0_D3DXMATRIXA16@@QAE@XZ			; _D3DXMATRIXA16::_D3DXMATRIXA16
; Function compile flags: /Ogty
;	COMDAT ??0_D3DXMATRIXA16@@QAE@XZ
_TEXT	SEGMENT
??0_D3DXMATRIXA16@@QAE@XZ PROC NEAR			; _D3DXMATRIXA16::_D3DXMATRIXA16, COMDAT
; _this$ = ecx

; 380  :     _D3DXMATRIXA16() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0_D3DXMATRIXA16@@QAE@XZ ENDP				; _D3DXMATRIXA16::_D3DXMATRIXA16
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@XZ			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogty
;	COMDAT ??0D3DXQUATERNION@@QAE@XZ
_TEXT	SEGMENT
??0D3DXQUATERNION@@QAE@XZ PROC NEAR			; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 427  :     D3DXQUATERNION() {}

  00000	8b c1		 mov	 eax, ecx
  00002	c3		 ret	 0
??0D3DXQUATERNION@@QAE@XZ ENDP				; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\dx_sdk\d3dx9math.inl
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC NEAR			; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx

; 300  :     x = fx;
; 301  :     y = fy;

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _fy$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _fx$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 302  :     z = fz;

  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR _fz$[esp-4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00013	89 48 08	 mov	 DWORD PTR [eax+8], ecx

; 303  : }

  00016	c2 0c 00	 ret	 12			; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator+
; Function compile flags: /Ogty
;	COMDAT ??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC NEAR		; D3DXVECTOR3::operator+, COMDAT
; _this$ = ecx

; 377  :     return D3DXVECTOR3(x + v.x, y + v.y, z + v.z);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR _v$[esp-4]
  00004	d9 40 08	 fld	 DWORD PTR [eax+8]
  00007	d8 41 08	 fadd	 DWORD PTR [ecx+8]
  0000a	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000d	d8 41 04	 fadd	 DWORD PTR [ecx+4]
  00010	d9 00		 fld	 DWORD PTR [eax]
  00012	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00016	d8 01		 fadd	 DWORD PTR [ecx]
  00018	d9 18		 fstp	 DWORD PTR [eax]
  0001a	d9 58 04	 fstp	 DWORD PTR [eax+4]
  0001d	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 378  : }

  00020	c2 08 00	 ret	 8
??HD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator+
_TEXT	ENDS
PUBLIC	??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z			; D3DXVECTOR3::operator-
; Function compile flags: /Ogty
;	COMDAT ??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_v$ = 12						; size = 4
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z PROC NEAR		; D3DXVECTOR3::operator-, COMDAT
; _this$ = ecx

; 383  :     return D3DXVECTOR3(x - v.x, y - v.y, z - v.z);

  00000	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00003	8b 44 24 08	 mov	 eax, DWORD PTR _v$[esp-4]
  00007	d8 60 08	 fsub	 DWORD PTR [eax+8]
  0000a	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0000d	d8 60 04	 fsub	 DWORD PTR [eax+4]
  00010	d9 01		 fld	 DWORD PTR [ecx]
  00012	d8 20		 fsub	 DWORD PTR [eax]
  00014	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00018	d9 18		 fstp	 DWORD PTR [eax]
  0001a	d9 58 04	 fstp	 DWORD PTR [eax+4]
  0001d	d9 58 08	 fstp	 DWORD PTR [eax+8]

; 384  : }

  00020	c2 08 00	 ret	 8
??GD3DXVECTOR3@@QBE?AU0@ABU0@@Z ENDP			; D3DXVECTOR3::operator-
_TEXT	ENDS
PUBLIC	??0D3DXQUATERNION@@QAE@MMMM@Z			; D3DXQUATERNION::D3DXQUATERNION
; Function compile flags: /Ogty
;	COMDAT ??0D3DXQUATERNION@@QAE@MMMM@Z
_TEXT	SEGMENT
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
_fw$ = 20						; size = 4
??0D3DXQUATERNION@@QAE@MMMM@Z PROC NEAR			; D3DXQUATERNION::D3DXQUATERNION, COMDAT
; _this$ = ecx

; 1048 :     x = fx;
; 1049 :     y = fy;

  00000	8b 54 24 08	 mov	 edx, DWORD PTR _fy$[esp-4]
  00004	8b c1		 mov	 eax, ecx
  00006	8b 4c 24 04	 mov	 ecx, DWORD PTR _fx$[esp-4]
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 1050 :     z = fz;

  0000c	8b 4c 24 0c	 mov	 ecx, DWORD PTR _fz$[esp-4]
  00010	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 1051 :     w = fw;

  00013	8b 54 24 10	 mov	 edx, DWORD PTR _fw$[esp-4]
  00017	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0001a	89 50 0c	 mov	 DWORD PTR [eax+12], edx

; 1052 : }

  0001d	c2 10 00	 ret	 16			; 00000010H
??0D3DXQUATERNION@@QAE@MMMM@Z ENDP			; D3DXQUATERNION::D3DXQUATERNION
_TEXT	ENDS
PUBLIC	??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z		; D3DXQUATERNION::operator*=
EXTRN	_D3DXQuaternionMultiply@12:NEAR
; Function compile flags: /Ogty
;	COMDAT ??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z
_TEXT	SEGMENT
_q$ = 8							; size = 4
??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z PROC NEAR		; D3DXQUATERNION::operator*=, COMDAT
; _this$ = ecx

; 1093 :     D3DXQuaternionMultiply(this, this, &q);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _q$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	50		 push	 eax
  00008	56		 push	 esi
  00009	56		 push	 esi
  0000a	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 1094 :     return *this;

  0000f	8b c6		 mov	 eax, esi
  00011	5e		 pop	 esi

; 1095 : }

  00012	c2 04 00	 ret	 4
??XD3DXQUATERNION@@QAEAAU0@ABU0@@Z ENDP			; D3DXQUATERNION::operator*=
_TEXT	ENDS
PUBLIC	?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z		; D3DXVec3Length
; Function compile flags: /Ogty
;	COMDAT ?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z
_TEXT	SEGMENT
_pV$ = 8						; size = 4
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z PROC NEAR	; D3DXVec3Length, COMDAT

; 1678 : #ifdef D3DX_DEBUG
; 1679 :     if(!pV)
; 1680 :         return 0.0f;
; 1681 : #endif
; 1682 : 
; 1683 : #ifdef __cplusplus
; 1684 :     return sqrtf(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pV$[esp-4]
  00004	d9 40 08	 fld	 DWORD PTR [eax+8]
  00007	d9 40 04	 fld	 DWORD PTR [eax+4]
  0000a	d9 00		 fld	 DWORD PTR [eax]
  0000c	d9 c0		 fld	 ST(0)
  0000e	d8 c9		 fmul	 ST(0), ST(1)
  00010	d9 c2		 fld	 ST(2)
  00012	d8 cb		 fmul	 ST(0), ST(3)
  00014	de c1		 faddp	 ST(1), ST(0)
  00016	d9 c3		 fld	 ST(3)
  00018	d8 cc		 fmul	 ST(0), ST(4)
  0001a	de c1		 faddp	 ST(1), ST(0)
  0001c	d9 fa		 fsqrt
  0001e	dd db		 fstp	 ST(3)
  00020	dd d8		 fstp	 ST(0)
  00022	dd d8		 fstp	 ST(0)

; 1685 : #else
; 1686 :     return (FLOAT) sqrt(pV->x * pV->x + pV->y * pV->y + pV->z * pV->z);
; 1687 : #endif
; 1688 : }

  00024	c3		 ret	 0
?D3DXVec3Length@@YAMPBUD3DXVECTOR3@@@Z ENDP		; D3DXVec3Length
_TEXT	ENDS
PUBLIC	?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z		; D3DXVec3Dot
; Function compile flags: /Ogty
;	COMDAT ?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT
_pV1$ = 8						; size = 4
_pV2$ = 12						; size = 4
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z PROC NEAR		; D3DXVec3Dot, COMDAT

; 1704 : #ifdef D3DX_DEBUG
; 1705 :     if(!pV1 || !pV2)
; 1706 :         return 0.0f;
; 1707 : #endif
; 1708 : 
; 1709 :     return pV1->x * pV2->x + pV1->y * pV2->y + pV1->z * pV2->z;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pV1$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR _pV2$[esp-4]
  00008	d9 40 08	 fld	 DWORD PTR [eax+8]
  0000b	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0000e	d9 40 04	 fld	 DWORD PTR [eax+4]
  00011	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00014	de c1		 faddp	 ST(1), ST(0)
  00016	d9 00		 fld	 DWORD PTR [eax]
  00018	d8 09		 fmul	 DWORD PTR [ecx]
  0001a	de c1		 faddp	 ST(1), ST(0)

; 1710 : }

  0001c	c3		 ret	 0
?D3DXVec3Dot@@YAMPBUD3DXVECTOR3@@0@Z ENDP		; D3DXVec3Dot
_TEXT	ENDS
PUBLIC	?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z	; D3DXVec3Cross
; Function compile flags: /Ogty
;	COMDAT ?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z
_TEXT	SEGMENT
_v$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pV1$ = 12						; size = 4
_pV2$ = 16						; size = 4
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z PROC NEAR ; D3DXVec3Cross, COMDAT

; 1714 : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1715 :     D3DXVECTOR3 v;
; 1716 : 
; 1717 : #ifdef D3DX_DEBUG
; 1718 :     if(!pOut || !pV1 || !pV2)
; 1719 :         return NULL;
; 1720 : #endif
; 1721 : 
; 1722 :     v.x = pV1->y * pV2->z - pV1->z * pV2->y;

  00003	8b 4c 24 18	 mov	 ecx, DWORD PTR _pV2$[esp+8]
  00007	8b 44 24 14	 mov	 eax, DWORD PTR _pV1$[esp+8]
  0000b	d9 41 08	 fld	 DWORD PTR [ecx+8]
  0000e	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00011	d9 40 08	 fld	 DWORD PTR [eax+8]
  00014	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00017	de e9		 fsubp	 ST(1), ST(0)
  00019	d9 1c 24	 fstp	 DWORD PTR _v$[esp+12]

; 1723 :     v.y = pV1->z * pV2->x - pV1->x * pV2->z;
; 1724 :     v.z = pV1->x * pV2->y - pV1->y * pV2->x;
; 1725 : 
; 1726 :     *pOut = v;

  0001c	8b 14 24	 mov	 edx, DWORD PTR _v$[esp+12]
  0001f	d9 40 08	 fld	 DWORD PTR [eax+8]
  00022	d8 09		 fmul	 DWORD PTR [ecx]
  00024	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00027	d8 08		 fmul	 DWORD PTR [eax]
  00029	de e9		 fsubp	 ST(1), ST(0)
  0002b	d9 5c 24 04	 fstp	 DWORD PTR _v$[esp+16]
  0002f	d9 00		 fld	 DWORD PTR [eax]
  00031	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00034	d9 01		 fld	 DWORD PTR [ecx]
  00036	d8 48 04	 fmul	 DWORD PTR [eax+4]
  00039	8b 44 24 10	 mov	 eax, DWORD PTR _pOut$[esp+8]
  0003d	8b c8		 mov	 ecx, eax
  0003f	89 11		 mov	 DWORD PTR [ecx], edx
  00041	8b 54 24 04	 mov	 edx, DWORD PTR _v$[esp+16]
  00045	de e9		 fsubp	 ST(1), ST(0)
  00047	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0004a	d9 5c 24 08	 fstp	 DWORD PTR _v$[esp+20]
  0004e	8b 54 24 08	 mov	 edx, DWORD PTR _v$[esp+20]
  00052	89 51 08	 mov	 DWORD PTR [ecx+8], edx

; 1727 :     return pOut;
; 1728 : }

  00055	83 c4 0c	 add	 esp, 12			; 0000000cH
  00058	c3		 ret	 0
?D3DXVec3Cross@@YAPAUD3DXVECTOR3@@PAU1@PBU1@1@Z ENDP	; D3DXVec3Cross
_TEXT	ENDS
PUBLIC	?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z	; D3DXMatrixIdentity
; Function compile flags: /Ogty
;	COMDAT ?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z PROC NEAR	; D3DXMatrixIdentity, COMDAT

; 1956 : #ifdef D3DX_DEBUG
; 1957 :     if(!pOut)
; 1958 :         return NULL;
; 1959 : #endif
; 1960 : 
; 1961 :     pOut->m[0][1] = pOut->m[0][2] = pOut->m[0][3] =
; 1962 :     pOut->m[1][0] = pOut->m[1][2] = pOut->m[1][3] =
; 1963 :     pOut->m[2][0] = pOut->m[2][1] = pOut->m[2][3] =
; 1964 :     pOut->m[3][0] = pOut->m[3][1] = pOut->m[3][2] = 0.0f;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pOut$[esp-4]
  00004	33 c9		 xor	 ecx, ecx
  00006	89 48 38	 mov	 DWORD PTR [eax+56], ecx
  00009	89 48 34	 mov	 DWORD PTR [eax+52], ecx
  0000c	89 48 30	 mov	 DWORD PTR [eax+48], ecx
  0000f	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00012	89 48 24	 mov	 DWORD PTR [eax+36], ecx
  00015	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00018	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0001b	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001e	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00021	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00024	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00027	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 1965 : 
; 1966 :     pOut->m[0][0] = pOut->m[1][1] = pOut->m[2][2] = pOut->m[3][3] = 1.0f;

  0002a	b9 00 00 80 3f	 mov	 ecx, 1065353216		; 3f800000H
  0002f	89 48 3c	 mov	 DWORD PTR [eax+60], ecx
  00032	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00035	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  00038	89 08		 mov	 DWORD PTR [eax], ecx

; 1967 :     return pOut;
; 1968 : }

  0003a	c3		 ret	 0
?D3DXMatrixIdentity@@YAPAUD3DXMATRIX@@PAU1@@Z ENDP	; D3DXMatrixIdentity
_TEXT	ENDS
PUBLIC	?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ; D3DXQuaternionIdentity
; Function compile flags: /Ogty
;	COMDAT ?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z
_TEXT	SEGMENT
_pOut$ = 8						; size = 4
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z PROC NEAR ; D3DXQuaternionIdentity, COMDAT

; 2031 : #ifdef D3DX_DEBUG
; 2032 :     if(!pOut)
; 2033 :         return NULL;
; 2034 : #endif
; 2035 : 
; 2036 :     pOut->x = pOut->y = pOut->z = 0.0f;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pOut$[esp-4]
  00004	33 c9		 xor	 ecx, ecx
  00006	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00009	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000c	89 08		 mov	 DWORD PTR [eax], ecx

; 2037 :     pOut->w = 1.0f;

  0000e	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 2038 :     return pOut;
; 2039 : }

  00015	c3		 ret	 0
?D3DXQuaternionIdentity@@YAPAUD3DXQUATERNION@@PAU1@@Z ENDP ; D3DXQuaternionIdentity
_TEXT	ENDS
PUBLIC	?D3DUtil_InitLight@@YAXAAU_D3DLIGHT9@@W4_D3DLIGHTTYPE@@MMM@Z ; D3DUtil_InitLight
EXTRN	_D3DXVec3Normalize@8:NEAR
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
;	COMDAT ?D3DUtil_InitLight@@YAXAAU_D3DLIGHT9@@W4_D3DLIGHTTYPE@@MMM@Z
_TEXT	SEGMENT
_vecLightDirUnnormalized$ = -12				; size = 12
_light$ = 8						; size = 4
_ltType$ = 12						; size = 4
_x$ = 16						; size = 4
_y$ = 20						; size = 4
_z$ = 24						; size = 4
?D3DUtil_InitLight@@YAXAAU_D3DLIGHT9@@W4_D3DLIGHTTYPE@@MMM@Z PROC NEAR ; D3DUtil_InitLight, COMDAT

; 47   : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 48   :     D3DXVECTOR3 vecLightDirUnnormalized(x, y, z);

  00003	8b 44 24 18	 mov	 eax, DWORD PTR _x$[esp+8]
  00007	8b 4c 24 1c	 mov	 ecx, DWORD PTR _y$[esp+8]
  0000b	8b 54 24 20	 mov	 edx, DWORD PTR _z$[esp+8]
  0000f	56		 push	 esi

; 49   :     ZeroMemory( &light, sizeof(D3DLIGHT9) );

  00010	8b 74 24 14	 mov	 esi, DWORD PTR _light$[esp+12]
  00014	57		 push	 edi
  00015	89 44 24 08	 mov	 DWORD PTR _vecLightDirUnnormalized$[esp+20], eax
  00019	89 4c 24 0c	 mov	 DWORD PTR _vecLightDirUnnormalized$[esp+24], ecx
  0001d	33 c0		 xor	 eax, eax
  0001f	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00024	8b fe		 mov	 edi, esi
  00026	f3 ab		 rep stosd

; 50   :     light.Type        = ltType;

  00028	8b 44 24 1c	 mov	 eax, DWORD PTR _ltType$[esp+16]

; 51   :     light.Diffuse.r   = 1.0f;
; 52   :     light.Diffuse.g   = 1.0f;
; 53   :     light.Diffuse.b   = 1.0f;
; 54   :     D3DXVec3Normalize( (D3DXVECTOR3*)&light.Direction, &vecLightDirUnnormalized );

  0002c	8d 4c 24 08	 lea	 ecx, DWORD PTR _vecLightDirUnnormalized$[esp+20]
  00030	89 54 24 10	 mov	 DWORD PTR _vecLightDirUnnormalized$[esp+28], edx
  00034	89 06		 mov	 DWORD PTR [esi], eax
  00036	b8 00 00 80 3f	 mov	 eax, 1065353216		; 3f800000H
  0003b	51		 push	 ecx
  0003c	8d 56 40	 lea	 edx, DWORD PTR [esi+64]
  0003f	52		 push	 edx
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00049	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 55   :     light.Position.x   = x;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR _x$[esp+16]

; 56   :     light.Position.y   = y;

  00052	8b 4c 24 24	 mov	 ecx, DWORD PTR _y$[esp+16]

; 57   :     light.Position.z   = z;

  00056	8b 54 24 28	 mov	 edx, DWORD PTR _z$[esp+16]
  0005a	5f		 pop	 edi
  0005b	89 46 34	 mov	 DWORD PTR [esi+52], eax
  0005e	89 4e 38	 mov	 DWORD PTR [esi+56], ecx
  00061	89 56 3c	 mov	 DWORD PTR [esi+60], edx

; 58   :     light.Range        = 1000.0f;

  00064	c7 46 4c 00 00
	7a 44		 mov	 DWORD PTR [esi+76], 1148846080 ; 447a0000H
  0006b	5e		 pop	 esi

; 59   : }

  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	c3		 ret	 0
?D3DUtil_InitLight@@YAXAAU_D3DLIGHT9@@W4_D3DLIGHTTYPE@@MMM@Z ENDP ; D3DUtil_InitLight
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z ; D3DUtil_GetCubeMapViewMatrix
EXTRN	_D3DXMatrixLookAtLH@16:NEAR
;	COMDAT __real@00000000
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\dx_sdk\d3dx9math.inl
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
CONST	ENDS
;	COMDAT ?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z
_TEXT	SEGMENT
$T227425 = -112						; size = 12
_vUpDir$ = -112						; size = 12
_vLookDir$ = -100					; size = 12
$T227436 = -88						; size = 12
$T227435 = -88						; size = 12
$T227433 = -88						; size = 12
$T227432 = -88						; size = 12
$T227431 = -88						; size = 12
$T227430 = -88						; size = 12
$T227429 = -88						; size = 12
$T227427 = -88						; size = 12
_vEyePt$ = -76						; size = 12
_matView$ = -64						; size = 64
___$ReturnUdt$ = 8					; size = 4
_dwFace$ = 12						; size = 4
?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z PROC NEAR ; D3DUtil_GetCubeMapViewMatrix, COMDAT

; 98   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f0	 and	 esp, -16		; fffffff0H
  00006	83 ec 78	 sub	 esp, 120		; 00000078H

; 99   :     D3DXVECTOR3 vEyePt   = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );

  00009	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000

; 100  :     D3DXVECTOR3 vLookDir;
; 101  :     D3DXVECTOR3 vUpDir;
; 102  : 
; 103  :     switch( dwFace )

  0000f	8b 45 0c	 mov	 eax, DWORD PTR _dwFace$[ebp]
  00012	83 f8 05	 cmp	 eax, 5
  00015	d9 54 24 2c	 fst	 DWORD PTR _vEyePt$[esp+120]
  00019	56		 push	 esi
  0001a	d9 54 24 34	 fst	 DWORD PTR _vEyePt$[esp+128]
  0001e	d9 54 24 38	 fst	 DWORD PTR _vEyePt$[esp+132]
  00022	57		 push	 edi
  00023	0f 87 ee 00 00
	00		 ja	 $L227489
  00029	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L227498[eax*4]
$L225632:

; 104  :     {
; 105  :         case D3DCUBEMAP_FACE_POSITIVE_X:
; 106  :             vLookDir = D3DXVECTOR3( 1.0f, 0.0f, 0.0f );

  00030	d9 54 24 14	 fst	 DWORD PTR $T227425[esp+132]
  00034	8b 4c 24 14	 mov	 ecx, DWORD PTR $T227425[esp+132]
  00038	d9 54 24 18	 fst	 DWORD PTR $T227425[esp+136]
  0003c	8b 54 24 18	 mov	 edx, DWORD PTR $T227425[esp+136]
  00040	c7 44 24 10 00
	00 80 3f	 mov	 DWORD PTR $T227425[esp+128], 1065353216 ; 3f800000H
  00048	8b 44 24 10	 mov	 eax, DWORD PTR $T227425[esp+128]

; 107  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
; 108  :             break;

  0004c	e9 90 00 00 00	 jmp	 $L227493
$L225635:

; 109  :         case D3DCUBEMAP_FACE_NEGATIVE_X:
; 110  :             vLookDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f );

  00051	d9 54 24 30	 fst	 DWORD PTR $T227427[esp+136]
  00055	c7 44 24 28 00
	00 80 bf	 mov	 DWORD PTR $T227427[esp+128], -1082130432 ; bf800000H

; 111  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
; 112  :             break;

  0005d	eb 72		 jmp	 SHORT $L227494
$L225638:

; 113  :         case D3DCUBEMAP_FACE_POSITIVE_Y:
; 114  :             vLookDir = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

  0005f	d9 54 24 28	 fst	 DWORD PTR $T227429[esp+128]
  00063	8b 44 24 28	 mov	 eax, DWORD PTR $T227429[esp+128]
  00067	d9 54 24 30	 fst	 DWORD PTR $T227429[esp+136]
  0006b	8b 54 24 30	 mov	 edx, DWORD PTR $T227429[esp+136]
  0006f	c7 44 24 2c 00
	00 80 3f	 mov	 DWORD PTR $T227429[esp+132], 1065353216 ; 3f800000H

; 115  :             vUpDir   = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );

  00077	d9 54 24 28	 fst	 DWORD PTR $T227430[esp+128]
  0007b	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T227429[esp+132]
  0007f	d9 5c 24 2c	 fstp	 DWORD PTR $T227430[esp+132]
  00083	c7 44 24 30 00
	00 80 bf	 mov	 DWORD PTR $T227430[esp+136], -1082130432 ; bf800000H

; 116  :             break;

  0008b	eb 64		 jmp	 SHORT $L227497
$L225641:

; 117  :         case D3DCUBEMAP_FACE_NEGATIVE_Y:
; 118  :             vLookDir = D3DXVECTOR3( 0.0f,-1.0f, 0.0f );

  0008d	d9 54 24 28	 fst	 DWORD PTR $T227431[esp+128]
  00091	8b 44 24 28	 mov	 eax, DWORD PTR $T227431[esp+128]
  00095	d9 54 24 30	 fst	 DWORD PTR $T227431[esp+136]
  00099	8b 54 24 30	 mov	 edx, DWORD PTR $T227431[esp+136]
  0009d	c7 44 24 2c 00
	00 80 bf	 mov	 DWORD PTR $T227431[esp+132], -1082130432 ; bf800000H

; 119  :             vUpDir   = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );

  000a5	d9 54 24 28	 fst	 DWORD PTR $T227432[esp+128]
  000a9	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T227431[esp+132]
  000ad	d9 5c 24 2c	 fstp	 DWORD PTR $T227432[esp+132]
  000b1	c7 44 24 30 00
	00 80 3f	 mov	 DWORD PTR $T227432[esp+136], 1065353216 ; 3f800000H

; 120  :             break;

  000b9	eb 36		 jmp	 SHORT $L227497
$L225644:

; 121  :         case D3DCUBEMAP_FACE_POSITIVE_Z:
; 122  :             vLookDir = D3DXVECTOR3( 0.0f, 0.0f, 1.0f );

  000bb	c7 44 24 30 00
	00 80 3f	 mov	 DWORD PTR $T227433[esp+136], 1065353216 ; 3f800000H

; 123  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );
; 124  :             break;

  000c3	eb 08		 jmp	 SHORT $L227496
$L225647:

; 125  :         case D3DCUBEMAP_FACE_NEGATIVE_Z:
; 126  :             vLookDir = D3DXVECTOR3( 0.0f, 0.0f,-1.0f );

  000c5	c7 44 24 30 00
	00 80 bf	 mov	 DWORD PTR $T227435[esp+136], -1082130432 ; bf800000H
$L227496:
  000cd	d9 54 24 28	 fst	 DWORD PTR $T227435[esp+128]
$L227494:
  000d1	8b 44 24 28	 mov	 eax, DWORD PTR $T227435[esp+128]
  000d5	d9 54 24 2c	 fst	 DWORD PTR $T227435[esp+132]
  000d9	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T227435[esp+132]
  000dd	8b 54 24 30	 mov	 edx, DWORD PTR $T227435[esp+136]
$L227493:

; 127  :             vUpDir   = D3DXVECTOR3( 0.0f, 1.0f, 0.0f );

  000e1	d9 54 24 28	 fst	 DWORD PTR $T227436[esp+128]
  000e5	c7 44 24 2c 00
	00 80 3f	 mov	 DWORD PTR $T227436[esp+132], 1065353216 ; 3f800000H
  000ed	d9 5c 24 30	 fstp	 DWORD PTR $T227436[esp+136]
$L227497:
  000f1	89 44 24 1c	 mov	 DWORD PTR _vLookDir$[esp+128], eax
  000f5	8b 44 24 28	 mov	 eax, DWORD PTR $T227436[esp+128]
  000f9	89 4c 24 20	 mov	 DWORD PTR _vLookDir$[esp+132], ecx
  000fd	8b 4c 24 2c	 mov	 ecx, DWORD PTR $T227436[esp+132]
  00101	89 54 24 24	 mov	 DWORD PTR _vLookDir$[esp+136], edx
  00105	8b 54 24 30	 mov	 edx, DWORD PTR $T227436[esp+136]
  00109	89 44 24 10	 mov	 DWORD PTR _vUpDir$[esp+128], eax
  0010d	89 4c 24 14	 mov	 DWORD PTR _vUpDir$[esp+132], ecx
  00111	89 54 24 18	 mov	 DWORD PTR _vUpDir$[esp+136], edx
  00115	eb 02		 jmp	 SHORT $L225629
$L227489:
  00117	dd d8		 fstp	 ST(0)
$L225629:

; 128  :             break;
; 129  :     }
; 130  : 
; 131  :     // Set the view transform for this cubemap surface
; 132  :     D3DXMATRIXA16 matView;
; 133  :     D3DXMatrixLookAtLH( &matView, &vEyePt, &vLookDir, &vUpDir );

  00119	8d 44 24 10	 lea	 eax, DWORD PTR _vUpDir$[esp+128]
  0011d	50		 push	 eax
  0011e	8d 4c 24 20	 lea	 ecx, DWORD PTR _vLookDir$[esp+132]
  00122	51		 push	 ecx
  00123	8d 54 24 3c	 lea	 edx, DWORD PTR _vEyePt$[esp+136]
  00127	52		 push	 edx
  00128	8d 44 24 4c	 lea	 eax, DWORD PTR _matView$[esp+140]
  0012c	50		 push	 eax
  0012d	e8 00 00 00 00	 call	 _D3DXMatrixLookAtLH@16

; 134  :     return matView;

  00132	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  00135	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  0013a	8d 74 24 40	 lea	 esi, DWORD PTR _matView$[esp+128]
  0013e	8b f8		 mov	 edi, eax
  00140	f3 a5		 rep movsd

; 135  : }

  00142	5f		 pop	 edi
  00143	5e		 pop	 esi
  00144	8b e5		 mov	 esp, ebp
  00146	5d		 pop	 ebp
  00147	c3		 ret	 0
$L227498:
  00148	00 00 00 00	 DD	 $L225632
  0014c	00 00 00 00	 DD	 $L225635
  00150	00 00 00 00	 DD	 $L225638
  00154	00 00 00 00	 DD	 $L225641
  00158	00 00 00 00	 DD	 $L225644
  0015c	00 00 00 00	 DD	 $L225647
?D3DUtil_GetCubeMapViewMatrix@@YA?AUD3DXMATRIX@@K@Z ENDP ; D3DUtil_GetCubeMapViewMatrix
_TEXT	ENDS
PUBLIC	__real@3f800000
PUBLIC	__real@bf800000
PUBLIC	__real@3fe6a09e667f3bcd
PUBLIC	?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z ; D3DUtil_GetRotationFromCursor
EXTRN	_D3DXQuaternionRotationAxis@12:NEAR
EXTRN	__imp__GetClientRect@8:NEAR
EXTRN	__imp__GetCursorPos@4:NEAR
EXTRN	__imp__ScreenToClient@8:NEAR
;	COMDAT __real@3f800000
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\dx_sdk\d3dx9math.h
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3fe6a09e667f3bcd
CONST	SEGMENT
__real@3fe6a09e667f3bcd DQ 03fe6a09e667f3bcdr	; 0.707107
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
CONST	ENDS
;	COMDAT ?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z
_TEXT	SEGMENT
_sx$ = -72						; size = 4
tv407 = -68						; size = 4
tv405 = -68						; size = 4
_t$ = -68						; size = 4
_sy$ = -68						; size = 4
_pt$ = -64						; size = 8
_v$227527 = -56						; size = 12
_vAxis$ = -44						; size = 12
_rc$ = -32						; size = 16
_quat$ = -16						; size = 16
___$ReturnUdt$ = 8					; size = 4
_hWnd$ = 12						; size = 4
_fTrackBallRadius$ = 16					; size = 4
?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z PROC NEAR ; D3DUtil_GetRotationFromCursor, COMDAT

; 147  : {

  00000	83 ec 48	 sub	 esp, 72			; 00000048H
  00003	56		 push	 esi

; 148  :     POINT pt;
; 149  :     RECT  rc;
; 150  :     GetCursorPos( &pt );

  00004	8d 44 24 0c	 lea	 eax, DWORD PTR _pt$[esp+76]
  00008	50		 push	 eax
  00009	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetCursorPos@4

; 151  :     GetClientRect( hWnd, &rc );

  0000f	8b 74 24 54	 mov	 esi, DWORD PTR _hWnd$[esp+72]
  00013	8d 4c 24 2c	 lea	 ecx, DWORD PTR _rc$[esp+76]
  00017	51		 push	 ecx
  00018	56		 push	 esi
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetClientRect@8

; 152  :     ScreenToClient( hWnd, &pt );

  0001f	8d 54 24 0c	 lea	 edx, DWORD PTR _pt$[esp+76]
  00023	52		 push	 edx
  00024	56		 push	 esi
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ScreenToClient@8

; 153  :     FLOAT sx = ( ( ( 2.0f * pt.x ) / (rc.right-rc.left) ) - 1 );

  0002b	db 44 24 0c	 fild	 DWORD PTR _pt$[esp+76]
  0002f	8b 4c 24 2c	 mov	 ecx, DWORD PTR _rc$[esp+76]
  00033	8b 44 24 34	 mov	 eax, DWORD PTR _rc$[esp+84]
  00037	dc c0		 fadd	 ST(0), ST(0)
  00039	2b c1		 sub	 eax, ecx
  0003b	89 44 24 08	 mov	 DWORD PTR tv407[esp+76], eax
  0003f	da 74 24 08	 fidiv	 DWORD PTR tv407[esp+76]

; 154  :     FLOAT sy = ( ( ( 2.0f * pt.y ) / (rc.bottom-rc.top) ) - 1 );

  00043	8b 44 24 30	 mov	 eax, DWORD PTR _rc$[esp+80]
  00047	8b 4c 24 38	 mov	 ecx, DWORD PTR _rc$[esp+88]
  0004b	2b c8		 sub	 ecx, eax
  0004d	89 4c 24 08	 mov	 DWORD PTR tv405[esp+76], ecx
  00051	5e		 pop	 esi
  00052	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3f800000
  00058	d9 1c 24	 fstp	 DWORD PTR _sx$[esp+72]
  0005b	db 44 24 0c	 fild	 DWORD PTR _pt$[esp+76]
  0005f	dc c0		 fadd	 ST(0), ST(0)
  00061	da 74 24 04	 fidiv	 DWORD PTR tv405[esp+72]
  00065	d8 25 00 00 00
	00		 fsub	 DWORD PTR __real@3f800000
  0006b	d9 5c 24 04	 fstp	 DWORD PTR _sy$[esp+72]

; 155  :     FLOAT sz;
; 156  : 
; 157  :     if( sx == 0.0f && sy == 0.0f )

  0006f	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00075	d9 04 24	 fld	 DWORD PTR _sx$[esp+72]
  00078	da e9		 fucompp
  0007a	df e0		 fnstsw	 ax
  0007c	f6 c4 44	 test	 ah, 68			; 00000044H
  0007f	7a 2c		 jp	 SHORT $L225661
  00081	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00087	d9 44 24 04	 fld	 DWORD PTR _sy$[esp+72]
  0008b	da e9		 fucompp
  0008d	df e0		 fnstsw	 ax
  0008f	f6 c4 44	 test	 ah, 68			; 00000044H
  00092	7a 19		 jp	 SHORT $L225661

; 158  :         return D3DXQUATERNION( 0.0f, 0.0f, 0.0f, 1.0f );

  00094	8b 44 24 4c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+68]
  00098	33 c9		 xor	 ecx, ecx
  0009a	89 08		 mov	 DWORD PTR [eax], ecx
  0009c	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0009f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000a2	c7 40 0c 00 00
	80 3f		 mov	 DWORD PTR [eax+12], 1065353216 ; 3f800000H

; 186  : }

  000a9	83 c4 48	 add	 esp, 72			; 00000048H
  000ac	c3		 ret	 0
$L225661:

; 159  : 
; 160  :     FLOAT d2 = sqrtf( sx*sx + sy*sy );

  000ad	d9 44 24 04	 fld	 DWORD PTR _sy$[esp+72]
  000b1	d8 4c 24 04	 fmul	 DWORD PTR _sy$[esp+72]
  000b5	d9 04 24	 fld	 DWORD PTR _sx$[esp+72]
  000b8	d8 0c 24	 fmul	 DWORD PTR _sx$[esp+72]
  000bb	de c1		 faddp	 ST(1), ST(0)
  000bd	d9 fa		 fsqrt

; 161  : 
; 162  :     if( d2 < fTrackBallRadius * 0.70710678118654752440 ) // Inside sphere

  000bf	d9 c0		 fld	 ST(0)
  000c1	d9 44 24 54	 fld	 DWORD PTR _fTrackBallRadius$[esp+68]
  000c5	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3fe6a09e667f3bcd
  000cb	de d9		 fcompp

; 163  :         sz = sqrtf( fTrackBallRadius*fTrackBallRadius - d2*d2 );

  000cd	d9 44 24 54	 fld	 DWORD PTR _fTrackBallRadius$[esp+68]
  000d1	d8 4c 24 54	 fmul	 DWORD PTR _fTrackBallRadius$[esp+68]
  000d5	df e0		 fnstsw	 ax
  000d7	f6 c4 41	 test	 ah, 65			; 00000041H
  000da	75 0c		 jne	 SHORT $L225664
  000dc	d9 c1		 fld	 ST(1)
  000de	d8 ca		 fmul	 ST(0), ST(2)
  000e0	de e9		 fsubp	 ST(1), ST(0)
  000e2	d9 fa		 fsqrt
  000e4	dd d9		 fstp	 ST(1)

; 164  :     else                                                 // On hyperbola

  000e6	eb 06		 jmp	 SHORT $L225665
$L225664:

; 165  :         sz = (fTrackBallRadius*fTrackBallRadius) / (2.0f*d2);

  000e8	d9 c9		 fxch	 ST(1)
  000ea	dc c0		 fadd	 ST(0), ST(0)
  000ec	de f9		 fdivp	 ST(1), ST(0)
$L225665:

; 166  : 
; 167  :     // Get two points on trackball's sphere
; 168  :     D3DXVECTOR3 p1( sx, sy, sz );
; 169  :     D3DXVECTOR3 p2( 0.0f, 0.0f, fTrackBallRadius );
; 170  : 
; 171  :     // Get axis of rotation, which is cross product of p1 and p2
; 172  :     D3DXVECTOR3 vAxis;
; 173  :     D3DXVec3Cross( &vAxis, &p1, &p2);

  000ee	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  000f4	d8 c9		 fmul	 ST(0), ST(1)
  000f6	d9 44 24 04	 fld	 DWORD PTR _sy$[esp+72]
  000fa	d8 4c 24 54	 fmul	 DWORD PTR _fTrackBallRadius$[esp+68]
  000fe	d8 e1		 fsub	 ST(0), ST(1)
  00100	d9 5c 24 10	 fstp	 DWORD PTR _v$227527[esp+72]
  00104	8b 54 24 10	 mov	 edx, DWORD PTR _v$227527[esp+72]
  00108	d9 04 24	 fld	 DWORD PTR _sx$[esp+72]
  0010b	89 54 24 1c	 mov	 DWORD PTR _vAxis$[esp+72], edx
  0010f	d8 4c 24 54	 fmul	 DWORD PTR _fTrackBallRadius$[esp+68]
  00113	d8 e9		 fsubr	 ST(0), ST(1)
  00115	d9 5c 24 14	 fstp	 DWORD PTR _v$227527[esp+76]
  00119	8b 44 24 14	 mov	 eax, DWORD PTR _v$227527[esp+76]
  0011d	89 44 24 20	 mov	 DWORD PTR _vAxis$[esp+76], eax
  00121	dd d8		 fstp	 ST(0)
  00123	d9 04 24	 fld	 DWORD PTR _sx$[esp+72]
  00126	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@00000000
  0012c	d9 44 24 04	 fld	 DWORD PTR _sy$[esp+72]
  00130	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@00000000
  00136	de e9		 fsubp	 ST(1), ST(0)
  00138	d9 5c 24 18	 fstp	 DWORD PTR _v$227527[esp+80]
  0013c	8b 4c 24 18	 mov	 ecx, DWORD PTR _v$227527[esp+80]

; 174  : 
; 175  :     // Calculate angle for the rotation about that axis
; 176  :     D3DXVECTOR3 vecDiff = p2-p1;

  00140	d9 04 24	 fld	 DWORD PTR _sx$[esp+72]
  00143	89 4c 24 24	 mov	 DWORD PTR _vAxis$[esp+80], ecx
  00147	d9 e0		 fchs
  00149	d9 44 24 04	 fld	 DWORD PTR _sy$[esp+72]
  0014d	d9 e0		 fchs
  0014f	d9 44 24 54	 fld	 DWORD PTR _fTrackBallRadius$[esp+68]
  00153	d8 e3		 fsub	 ST(0), ST(3)

; 177  :     FLOAT t = D3DXVec3Length( &vecDiff ) / ( 2.0f*fTrackBallRadius );

  00155	d9 c0		 fld	 ST(0)
  00157	d8 c9		 fmul	 ST(0), ST(1)
  00159	d9 c2		 fld	 ST(2)
  0015b	d8 cb		 fmul	 ST(0), ST(3)

; 185  :     return quat;

  0015d	de c1		 faddp	 ST(1), ST(0)
  0015f	d9 c3		 fld	 ST(3)
  00161	d8 cc		 fmul	 ST(0), ST(4)
  00163	de c1		 faddp	 ST(1), ST(0)
  00165	d9 fa		 fsqrt
  00167	dd dc		 fstp	 ST(4)
  00169	dd d8		 fstp	 ST(0)
  0016b	dd d8		 fstp	 ST(0)
  0016d	dd d8		 fstp	 ST(0)
  0016f	d9 44 24 54	 fld	 DWORD PTR _fTrackBallRadius$[esp+68]
  00173	dc c0		 fadd	 ST(0), ST(0)
  00175	de f9		 fdivp	 ST(1), ST(0)
  00177	d9 54 24 04	 fst	 DWORD PTR _t$[esp+72]
  0017b	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@3f800000
  00181	df e0		 fnstsw	 ax
  00183	f6 c4 41	 test	 ah, 65			; 00000041H
  00186	75 0a		 jne	 SHORT $L225672

; 178  :     if( t > +1.0f) t = +1.0f;

  00188	c7 44 24 04 00
	00 80 3f	 mov	 DWORD PTR _t$[esp+72], 1065353216 ; 3f800000H

; 179  :     if( t < -1.0f) t = -1.0f;

  00190	eb 19		 jmp	 SHORT $L225673
$L225672:
  00192	d9 44 24 04	 fld	 DWORD PTR _t$[esp+72]
  00196	d8 1d 00 00 00
	00		 fcomp	 DWORD PTR __real@bf800000
  0019c	df e0		 fnstsw	 ax
  0019e	f6 c4 05	 test	 ah, 5
  001a1	7a 08		 jp	 SHORT $L225673
  001a3	c7 44 24 04 00
	00 80 bf	 mov	 DWORD PTR _t$[esp+72], -1082130432 ; bf800000H
$L225673:

; 180  :     FLOAT fAngle = 2.0f * asinf( t );
; 181  : 
; 182  :     // Convert axis to quaternion
; 183  :     D3DXQUATERNION quat;
; 184  :     D3DXQuaternionRotationAxis( &quat, &vAxis, fAngle );

  001ab	d9 44 24 04	 fld	 DWORD PTR _t$[esp+72]
  001af	e8 00 00 00 00	 call	 __CIasin
  001b4	dc c0		 fadd	 ST(0), ST(0)
  001b6	51		 push	 ecx
  001b7	8d 54 24 20	 lea	 edx, DWORD PTR _vAxis$[esp+76]
  001bb	d9 1c 24	 fstp	 DWORD PTR [esp]
  001be	52		 push	 edx
  001bf	8d 44 24 40	 lea	 eax, DWORD PTR _quat$[esp+80]
  001c3	50		 push	 eax
  001c4	e8 00 00 00 00	 call	 _D3DXQuaternionRotationAxis@12

; 185  :     return quat;

  001c9	8b 44 24 4c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+68]
  001cd	8b 54 24 38	 mov	 edx, DWORD PTR _quat$[esp+72]
  001d1	8b c8		 mov	 ecx, eax
  001d3	89 11		 mov	 DWORD PTR [ecx], edx
  001d5	8b 54 24 3c	 mov	 edx, DWORD PTR _quat$[esp+76]
  001d9	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  001dc	8b 54 24 40	 mov	 edx, DWORD PTR _quat$[esp+80]
  001e0	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  001e3	8b 54 24 44	 mov	 edx, DWORD PTR _quat$[esp+84]
  001e7	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 186  : }

  001ea	83 c4 48	 add	 esp, 72			; 00000048H
  001ed	c3		 ret	 0
?D3DUtil_GetRotationFromCursor@@YA?AUD3DXQUATERNION@@PAUHWND__@@M@Z ENDP ; D3DUtil_GetRotationFromCursor
_TEXT	ENDS
PUBLIC	?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionUnitAxisToUnitAxis2
; Function compile flags: /Ogty
;	COMDAT ?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
_v$227572 = -24						; size = 12
_vAxis$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pvFrom$ = 12						; size = 4
_pvTo$ = 16						; size = 4
?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z PROC NEAR ; D3DXQuaternionUnitAxisToUnitAxis2, COMDAT

; 439  : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H

; 440  :     D3DXVECTOR3 vAxis;
; 441  :     D3DXVec3Cross(&vAxis, pvFrom, pvTo);    // proportional to sin(theta)

  00003	8b 54 24 24	 mov	 edx, DWORD PTR _pvTo$[esp+20]
  00007	8b 4c 24 20	 mov	 ecx, DWORD PTR _pvFrom$[esp+20]
  0000b	d9 42 08	 fld	 DWORD PTR [edx+8]
  0000e	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  00011	56		 push	 esi
  00012	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00015	d8 4a 04	 fmul	 DWORD PTR [edx+4]
  00018	de e9		 fsubp	 ST(1), ST(0)
  0001a	d9 5c 24 04	 fstp	 DWORD PTR _v$227572[esp+28]
  0001e	8b 44 24 04	 mov	 eax, DWORD PTR _v$227572[esp+28]
  00022	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00025	89 44 24 10	 mov	 DWORD PTR _vAxis$[esp+28], eax
  00029	d8 0a		 fmul	 DWORD PTR [edx]
  0002b	d9 42 08	 fld	 DWORD PTR [edx+8]
  0002e	d8 09		 fmul	 DWORD PTR [ecx]
  00030	de e9		 fsubp	 ST(1), ST(0)
  00032	d9 5c 24 08	 fstp	 DWORD PTR _v$227572[esp+32]
  00036	8b 44 24 08	 mov	 eax, DWORD PTR _v$227572[esp+32]
  0003a	d9 01		 fld	 DWORD PTR [ecx]
  0003c	89 44 24 14	 mov	 DWORD PTR _vAxis$[esp+32], eax
  00040	d8 4a 04	 fmul	 DWORD PTR [edx+4]

; 442  :     pOut->x = vAxis.x;
; 443  :     pOut->y = vAxis.y;

  00043	8b 74 24 14	 mov	 esi, DWORD PTR _vAxis$[esp+32]
  00047	d9 02		 fld	 DWORD PTR [edx]
  00049	d8 49 04	 fmul	 DWORD PTR [ecx+4]
  0004c	de e9		 fsubp	 ST(1), ST(0)
  0004e	d9 5c 24 0c	 fstp	 DWORD PTR _v$227572[esp+36]
  00052	8b 44 24 0c	 mov	 eax, DWORD PTR _v$227572[esp+36]
  00056	d9 44 24 10	 fld	 DWORD PTR _vAxis$[esp+28]
  0005a	89 44 24 18	 mov	 DWORD PTR _vAxis$[esp+36], eax
  0005e	8b 44 24 20	 mov	 eax, DWORD PTR _pOut$[esp+24]
  00062	89 70 04	 mov	 DWORD PTR [eax+4], esi
  00065	d9 18		 fstp	 DWORD PTR [eax]

; 444  :     pOut->z = vAxis.z;

  00067	8b 74 24 18	 mov	 esi, DWORD PTR _vAxis$[esp+36]
  0006b	89 70 08	 mov	 DWORD PTR [eax+8], esi

; 445  :     pOut->w = D3DXVec3Dot( pvFrom, pvTo );

  0006e	d9 01		 fld	 DWORD PTR [ecx]
  00070	d8 0a		 fmul	 DWORD PTR [edx]
  00072	5e		 pop	 esi
  00073	d9 41 08	 fld	 DWORD PTR [ecx+8]
  00076	d8 4a 08	 fmul	 DWORD PTR [edx+8]
  00079	de c1		 faddp	 ST(1), ST(0)
  0007b	d9 41 04	 fld	 DWORD PTR [ecx+4]
  0007e	d8 4a 04	 fmul	 DWORD PTR [edx+4]
  00081	de c1		 faddp	 ST(1), ST(0)
  00083	d9 58 0c	 fstp	 DWORD PTR [eax+12]

; 446  :     return pOut;
; 447  : }

  00086	83 c4 18	 add	 esp, 24			; 00000018H
  00089	c2 0c 00	 ret	 12			; 0000000cH
?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ENDP ; D3DXQuaternionUnitAxisToUnitAxis2
_TEXT	ENDS
PUBLIC	?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionAxisToAxis
; Function compile flags: /Ogty
;	COMDAT ?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z
_TEXT	SEGMENT
_vHalf$ = -36						; size = 12
_vA$ = -24						; size = 12
_vB$ = -12						; size = 12
_pOut$ = 8						; size = 4
_pvFrom$ = 12						; size = 4
_pvTo$ = 16						; size = 4
?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z PROC NEAR ; D3DXQuaternionAxisToAxis, COMDAT

; 460  : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H

; 461  :     D3DXVECTOR3 vA, vB;
; 462  :     D3DXVec3Normalize(&vA, pvFrom);

  00003	8b 44 24 2c	 mov	 eax, DWORD PTR _pvFrom$[esp+32]
  00007	50		 push	 eax
  00008	8d 4c 24 10	 lea	 ecx, DWORD PTR _vA$[esp+40]
  0000c	51		 push	 ecx
  0000d	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 463  :     D3DXVec3Normalize(&vB, pvTo);

  00012	8b 54 24 30	 mov	 edx, DWORD PTR _pvTo$[esp+32]
  00016	52		 push	 edx
  00017	8d 44 24 1c	 lea	 eax, DWORD PTR _vB$[esp+40]
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 464  :     D3DXVECTOR3 vHalf(vA + vB);

  00021	d9 44 24 18	 fld	 DWORD PTR _vB$[esp+36]
  00025	d8 44 24 0c	 fadd	 DWORD PTR _vA$[esp+36]

; 465  :     D3DXVec3Normalize(&vHalf, &vHalf);

  00029	8d 0c 24	 lea	 ecx, DWORD PTR _vHalf$[esp+36]
  0002c	51		 push	 ecx
  0002d	8b d1		 mov	 edx, ecx
  0002f	d9 5c 24 04	 fstp	 DWORD PTR _vHalf$[esp+40]
  00033	52		 push	 edx
  00034	d9 44 24 24	 fld	 DWORD PTR _vB$[esp+48]
  00038	d8 44 24 18	 fadd	 DWORD PTR _vA$[esp+48]
  0003c	d9 5c 24 0c	 fstp	 DWORD PTR _vHalf$[esp+48]
  00040	d9 44 24 28	 fld	 DWORD PTR _vB$[esp+52]
  00044	d8 44 24 1c	 fadd	 DWORD PTR _vA$[esp+52]
  00048	d9 5c 24 10	 fstp	 DWORD PTR _vHalf$[esp+52]
  0004c	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 466  :     return D3DXQuaternionUnitAxisToUnitAxis2(pOut, &vA, &vHalf);

  00051	8b 54 24 28	 mov	 edx, DWORD PTR _pOut$[esp+32]
  00055	8d 04 24	 lea	 eax, DWORD PTR _vHalf$[esp+36]
  00058	50		 push	 eax
  00059	8d 4c 24 10	 lea	 ecx, DWORD PTR _vA$[esp+40]
  0005d	51		 push	 ecx
  0005e	52		 push	 edx
  0005f	e8 00 00 00 00	 call	 ?D3DXQuaternionUnitAxisToUnitAxis2@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionUnitAxisToUnitAxis2

; 467  : }

  00064	83 c4 24	 add	 esp, 36			; 00000024H
  00067	c2 0c 00	 ret	 12			; 0000000cH
?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ENDP ; D3DXQuaternionAxisToAxis
_TEXT	ENDS
PUBLIC	?Init@CD3DArcBall@@QAEXXZ			; CD3DArcBall::Init
; Function compile flags: /Ogty
;	COMDAT ?Init@CD3DArcBall@@QAEXXZ
_TEXT	SEGMENT
?Init@CD3DArcBall@@QAEXXZ PROC NEAR			; CD3DArcBall::Init, COMDAT
; _this$ = ecx

; 490  :     D3DXQuaternionIdentity( &m_qDown );

  00000	33 c0		 xor	 eax, eax
  00002	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00005	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00008	89 41 10	 mov	 DWORD PTR [ecx+16], eax
  0000b	ba 00 00 80 3f	 mov	 edx, 1065353216		; 3f800000H
  00010	89 51 1c	 mov	 DWORD PTR [ecx+28], edx

; 491  :     D3DXQuaternionIdentity( &m_qNow );

  00013	89 41 28	 mov	 DWORD PTR [ecx+40], eax
  00016	89 41 24	 mov	 DWORD PTR [ecx+36], eax
  00019	89 41 20	 mov	 DWORD PTR [ecx+32], eax
  0001c	89 51 2c	 mov	 DWORD PTR [ecx+44], edx

; 492  :     D3DXMatrixIdentity( &m_matRotation );

  0001f	89 41 68	 mov	 DWORD PTR [ecx+104], eax
  00022	89 41 64	 mov	 DWORD PTR [ecx+100], eax
  00025	89 41 60	 mov	 DWORD PTR [ecx+96], eax
  00028	89 41 5c	 mov	 DWORD PTR [ecx+92], eax
  0002b	89 41 54	 mov	 DWORD PTR [ecx+84], eax
  0002e	89 41 50	 mov	 DWORD PTR [ecx+80], eax
  00031	89 41 4c	 mov	 DWORD PTR [ecx+76], eax
  00034	89 41 48	 mov	 DWORD PTR [ecx+72], eax
  00037	89 41 40	 mov	 DWORD PTR [ecx+64], eax
  0003a	89 41 3c	 mov	 DWORD PTR [ecx+60], eax
  0003d	89 41 38	 mov	 DWORD PTR [ecx+56], eax
  00040	89 41 34	 mov	 DWORD PTR [ecx+52], eax
  00043	89 51 6c	 mov	 DWORD PTR [ecx+108], edx
  00046	89 51 58	 mov	 DWORD PTR [ecx+88], edx
  00049	89 51 44	 mov	 DWORD PTR [ecx+68], edx
  0004c	89 51 30	 mov	 DWORD PTR [ecx+48], edx

; 493  :     D3DXMatrixIdentity( &m_matRotationDelta );

  0004f	89 81 a8 00 00
	00		 mov	 DWORD PTR [ecx+168], eax
  00055	89 81 a4 00 00
	00		 mov	 DWORD PTR [ecx+164], eax
  0005b	89 81 a0 00 00
	00		 mov	 DWORD PTR [ecx+160], eax
  00061	89 81 9c 00 00
	00		 mov	 DWORD PTR [ecx+156], eax
  00067	89 81 94 00 00
	00		 mov	 DWORD PTR [ecx+148], eax
  0006d	89 81 90 00 00
	00		 mov	 DWORD PTR [ecx+144], eax
  00073	89 81 8c 00 00
	00		 mov	 DWORD PTR [ecx+140], eax
  00079	89 81 88 00 00
	00		 mov	 DWORD PTR [ecx+136], eax
  0007f	89 81 80 00 00
	00		 mov	 DWORD PTR [ecx+128], eax
  00085	89 41 7c	 mov	 DWORD PTR [ecx+124], eax
  00088	89 41 78	 mov	 DWORD PTR [ecx+120], eax
  0008b	89 41 74	 mov	 DWORD PTR [ecx+116], eax
  0008e	89 91 ac 00 00
	00		 mov	 DWORD PTR [ecx+172], edx
  00094	89 91 98 00 00
	00		 mov	 DWORD PTR [ecx+152], edx
  0009a	89 91 84 00 00
	00		 mov	 DWORD PTR [ecx+132], edx
  000a0	89 51 70	 mov	 DWORD PTR [ecx+112], edx

; 494  :     D3DXMatrixIdentity( &m_matTranslation );

  000a3	89 81 e8 00 00
	00		 mov	 DWORD PTR [ecx+232], eax
  000a9	89 81 e4 00 00
	00		 mov	 DWORD PTR [ecx+228], eax
  000af	89 81 e0 00 00
	00		 mov	 DWORD PTR [ecx+224], eax
  000b5	89 81 dc 00 00
	00		 mov	 DWORD PTR [ecx+220], eax
  000bb	89 81 d4 00 00
	00		 mov	 DWORD PTR [ecx+212], eax
  000c1	89 81 d0 00 00
	00		 mov	 DWORD PTR [ecx+208], eax
  000c7	89 81 cc 00 00
	00		 mov	 DWORD PTR [ecx+204], eax
  000cd	89 81 c8 00 00
	00		 mov	 DWORD PTR [ecx+200], eax
  000d3	89 81 c0 00 00
	00		 mov	 DWORD PTR [ecx+192], eax
  000d9	89 81 bc 00 00
	00		 mov	 DWORD PTR [ecx+188], eax
  000df	89 81 b8 00 00
	00		 mov	 DWORD PTR [ecx+184], eax
  000e5	89 81 b4 00 00
	00		 mov	 DWORD PTR [ecx+180], eax
  000eb	89 91 ec 00 00
	00		 mov	 DWORD PTR [ecx+236], edx
  000f1	89 91 d8 00 00
	00		 mov	 DWORD PTR [ecx+216], edx
  000f7	89 91 c4 00 00
	00		 mov	 DWORD PTR [ecx+196], edx
  000fd	89 91 b0 00 00
	00		 mov	 DWORD PTR [ecx+176], edx

; 495  :     D3DXMatrixIdentity( &m_matTranslationDelta );

  00103	89 81 28 01 00
	00		 mov	 DWORD PTR [ecx+296], eax
  00109	89 81 24 01 00
	00		 mov	 DWORD PTR [ecx+292], eax
  0010f	89 81 20 01 00
	00		 mov	 DWORD PTR [ecx+288], eax
  00115	89 81 1c 01 00
	00		 mov	 DWORD PTR [ecx+284], eax
  0011b	89 81 14 01 00
	00		 mov	 DWORD PTR [ecx+276], eax
  00121	89 81 10 01 00
	00		 mov	 DWORD PTR [ecx+272], eax
  00127	89 81 0c 01 00
	00		 mov	 DWORD PTR [ecx+268], eax
  0012d	89 81 08 01 00
	00		 mov	 DWORD PTR [ecx+264], eax
  00133	89 81 00 01 00
	00		 mov	 DWORD PTR [ecx+256], eax
  00139	89 81 fc 00 00
	00		 mov	 DWORD PTR [ecx+252], eax
  0013f	89 81 f8 00 00
	00		 mov	 DWORD PTR [ecx+248], eax
  00145	89 81 f4 00 00
	00		 mov	 DWORD PTR [ecx+244], eax
  0014b	89 91 2c 01 00
	00		 mov	 DWORD PTR [ecx+300], edx
  00151	89 91 18 01 00
	00		 mov	 DWORD PTR [ecx+280], edx
  00157	89 91 04 01 00
	00		 mov	 DWORD PTR [ecx+260], edx
  0015d	89 91 f0 00 00
	00		 mov	 DWORD PTR [ecx+240], edx

; 496  :     m_bDrag = FALSE;

  00163	89 81 30 01 00
	00		 mov	 DWORD PTR [ecx+304], eax

; 497  :     m_fRadiusTranslation = 1.0f;

  00169	89 51 0c	 mov	 DWORD PTR [ecx+12], edx

; 498  :     m_bRightHanded = FALSE;

  0016c	89 81 34 01 00
	00		 mov	 DWORD PTR [ecx+308], eax

; 499  : }

  00172	c3		 ret	 0
?Init@CD3DArcBall@@QAEXXZ ENDP				; CD3DArcBall::Init
_TEXT	ENDS
PUBLIC	__real@3f000000
PUBLIC	?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ; CD3DArcBall::ScreenToVector
;	COMDAT __real@3f000000
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\dx_sdk\d3dx9math.inl
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
CONST	ENDS
;	COMDAT ?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z
_TEXT	SEGMENT
tv175 = -4						; size = 4
tv161 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
tv210 = 12						; size = 4
tv203 = 12						; size = 4
_z$ = 12						; size = 4
_sx$ = 12						; size = 4
_sy$ = 16						; size = 4
?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z PROC NEAR ; CD3DArcBall::ScreenToVector, COMDAT
; _this$ = ecx

; 524  : {

  00000	51		 push	 ecx

; 525  :     // Scale to screen
; 526  :     FLOAT x   = -(sx - m_iWidth/2)  / (m_fRadius*m_iWidth/2);

  00001	8b 01		 mov	 eax, DWORD PTR [ecx]
  00003	89 04 24	 mov	 DWORD PTR tv161[esp+4], eax
  00006	99		 cdq
  00007	2b c2		 sub	 eax, edx
  00009	8b 54 24 0c	 mov	 edx, DWORD PTR _sx$[esp]
  0000d	d1 f8		 sar	 eax, 1
  0000f	2b c2		 sub	 eax, edx
  00011	89 44 24 0c	 mov	 DWORD PTR tv210[esp], eax

; 527  :     FLOAT y   =  (sy - m_iHeight/2) / (m_fRadius*m_iHeight/2);

  00015	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00018	db 44 24 0c	 fild	 DWORD PTR tv210[esp]
  0001c	db 04 24	 fild	 DWORD PTR tv161[esp+4]
  0001f	89 04 24	 mov	 DWORD PTR tv175[esp+4], eax
  00022	99		 cdq
  00023	2b c2		 sub	 eax, edx
  00025	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  00028	8b 54 24 10	 mov	 edx, DWORD PTR _sy$[esp]
  0002c	d1 f8		 sar	 eax, 1
  0002e	2b d0		 sub	 edx, eax
  00030	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000

; 528  : 
; 529  :     if( m_bRightHanded )

  00036	8b 81 34 01 00
	00		 mov	 eax, DWORD PTR [ecx+308]
  0003c	85 c0		 test	 eax, eax
  0003e	de f9		 fdivp	 ST(1), ST(0)
  00040	89 54 24 0c	 mov	 DWORD PTR tv203[esp], edx
  00044	db 44 24 0c	 fild	 DWORD PTR tv203[esp]
  00048	db 04 24	 fild	 DWORD PTR tv175[esp+4]
  0004b	d8 49 08	 fmul	 DWORD PTR [ecx+8]
  0004e	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@3f000000
  00054	de f9		 fdivp	 ST(1), ST(0)
  00056	74 08		 je	 SHORT $L225919

; 530  :     {
; 531  :         x = -x;

  00058	d9 c9		 fxch	 ST(1)
  0005a	d9 e0		 fchs
  0005c	d9 c9		 fxch	 ST(1)

; 532  :         y = -y;

  0005e	d9 e0		 fchs
$L225919:

; 533  :     }
; 534  : 
; 535  :     FLOAT z   = 0.0f;
; 536  :     FLOAT mag = x*x + y*y;

  00060	d9 c0		 fld	 ST(0)
  00062	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _z$[esp], 0
  0006a	d8 c9		 fmul	 ST(0), ST(1)
  0006c	d9 c2		 fld	 ST(2)
  0006e	d8 cb		 fmul	 ST(0), ST(3)
  00070	de c1		 faddp	 ST(1), ST(0)

; 537  : 
; 538  :     if( mag > 1.0f )

  00072	d8 15 00 00 00
	00		 fcom	 DWORD PTR __real@3f800000
  00078	df e0		 fnstsw	 ax
  0007a	f6 c4 41	 test	 ah, 65			; 00000041H
  0007d	75 24		 jne	 SHORT $L225922

; 539  :     {
; 540  :         FLOAT scale = 1.0f/sqrtf(mag);

  0007f	d9 fa		 fsqrt

; 546  : 
; 547  :     // Return vector
; 548  :     return D3DXVECTOR3( x, y, z );

  00081	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  00085	8b 4c 24 0c	 mov	 ecx, DWORD PTR _z$[esp]
  00089	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0008c	d8 3d 00 00 00
	00		 fdivr	 DWORD PTR __real@3f800000
  00092	d9 c0		 fld	 ST(0)
  00094	de cb		 fmulp	 ST(3), ST(0)
  00096	de c9		 fmulp	 ST(1), ST(0)
  00098	d9 c9		 fxch	 ST(1)
  0009a	d9 18		 fstp	 DWORD PTR [eax]
  0009c	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 549  : }

  0009f	59		 pop	 ecx
  000a0	c2 0c 00	 ret	 12			; 0000000cH
$L225922:

; 541  :         x *= scale;
; 542  :         y *= scale;
; 543  :     }
; 544  :     else
; 545  :         z = sqrtf( 1.0f - mag );

  000a3	d8 2d 00 00 00
	00		 fsubr	 DWORD PTR __real@3f800000

; 546  : 
; 547  :     // Return vector
; 548  :     return D3DXVECTOR3( x, y, z );

  000a9	8b 44 24 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp]
  000ad	d9 fa		 fsqrt
  000af	d9 5c 24 0c	 fstp	 DWORD PTR _z$[esp]
  000b3	8b 4c 24 0c	 mov	 ecx, DWORD PTR _z$[esp]
  000b7	d9 c9		 fxch	 ST(1)
  000b9	d9 18		 fstp	 DWORD PTR [eax]
  000bb	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  000be	d9 58 04	 fstp	 DWORD PTR [eax+4]

; 549  : }

  000c1	59		 pop	 ecx
  000c2	c2 0c 00	 ret	 12			; 0000000cH
?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ENDP ; CD3DArcBall::ScreenToVector
_TEXT	ENDS
PUBLIC	__real@c0000000
PUBLIC	__real@40a00000
PUBLIC	?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ; CD3DArcBall::HandleMouseMessages
EXTRN	_D3DXMatrixMultiply@12:NEAR
EXTRN	_D3DXMatrixTranslation@16:NEAR
EXTRN	_D3DXMatrixRotationQuaternion@8:NEAR
;	COMDAT ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\dx_sdk\d3dx9math.inl
_BSS	SEGMENT
?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::iCurMouseX
_BSS	ENDS
;	COMDAT ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
_BSS	SEGMENT
?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA DD 01H DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::iCurMouseY
_BSS	ENDS
;	COMDAT ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A
_BSS	SEGMENT
?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A DB 0cH DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::s_vDown
_BSS	ENDS
;	COMDAT ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA
_BSS	SEGMENT
?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA DD 01H DUP (?) ; `CD3DArcBall::HandleMouseMessages'::`2'::$S1
_BSS	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\d3dutil.cpp
CONST	ENDS
;	COMDAT ?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_vCur$225967 = -40					; size = 12
$T227640 = -28						; size = 12
_qAxisToAxis$225969 = -16				; size = 16
_hWnd$ = 8						; size = 4
_uMsg$ = 12						; size = 4
_wParam$ = 16						; size = 4
tv293 = 20						; size = 4
tv289 = 20						; size = 4
_lParam$ = 20						; size = 4
?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z PROC NEAR ; CD3DArcBall::HandleMouseMessages, COMDAT
; _this$ = ecx

; 573  :     UNREFERENCED_PARAMETER( hWnd );
; 574  : 
; 575  :     static int         iCurMouseX;      // Saved mouse position
; 576  :     static int         iCurMouseY;
; 577  :     static D3DXVECTOR3 s_vDown;         // Button down vector

  00000	a0 00 00 00 00	 mov	 al, BYTE PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA
  00005	83 ec 28	 sub	 esp, 40			; 00000028H
  00008	a8 01		 test	 al, 1
  0000a	53		 push	 ebx
  0000b	56		 push	 esi
  0000c	57		 push	 edi
  0000d	8b f1		 mov	 esi, ecx
  0000f	75 07		 jne	 SHORT $L227660
  00011	83 0d 00 00 00
	00 01		 or	 DWORD PTR ?$S1@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4IA, 1
$L227660:

; 578  : 
; 579  :     // Current mouse position
; 580  :     int iMouseX = GET_X_LPARAM(lParam);

  00018	8b 44 24 44	 mov	 eax, DWORD PTR _lParam$[esp+48]
  0001c	0f bf f8	 movsx	 edi, ax

; 581  :     int iMouseY = GET_Y_LPARAM(lParam);

  0001f	c1 e8 10	 shr	 eax, 16			; 00000010H
  00022	0f bf d8	 movsx	 ebx, ax

; 582  : 
; 583  :     switch( uMsg )

  00025	8b 44 24 3c	 mov	 eax, DWORD PTR _uMsg$[esp+48]
  00029	05 00 fe ff ff	 add	 eax, -512		; fffffe00H
  0002e	83 f8 07	 cmp	 eax, 7
  00031	0f 87 2b 02 00
	00		 ja	 $L225957
  00037	ff 24 85 00 00
	00 00		 jmp	 DWORD PTR $L227662[eax*4]
$L225960:

; 584  :     {
; 585  :         case WM_RBUTTONDOWN:
; 586  :         case WM_MBUTTONDOWN:
; 587  :             // Store off the position of the cursor when the button is pressed
; 588  :             iCurMouseX = iMouseX;

  0003e	89 3d 00 00 00
	00		 mov	 DWORD PTR ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, edi
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi

; 589  :             iCurMouseY = iMouseY;

  00046	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, ebx

; 590  :             return TRUE;

  0004c	b8 01 00 00 00	 mov	 eax, 1
  00051	5b		 pop	 ebx

; 648  : }

  00052	83 c4 28	 add	 esp, 40			; 00000028H
  00055	c2 10 00	 ret	 16			; 00000010H
$L225961:

; 591  : 
; 592  :         case WM_LBUTTONDOWN:
; 593  :             // Start drag mode
; 594  :             m_bDrag = TRUE;
; 595  :             s_vDown = ScreenToVector( iMouseX, iMouseY );

  00058	53		 push	 ebx
  00059	57		 push	 edi
  0005a	8d 44 24 20	 lea	 eax, DWORD PTR $T227640[esp+60]
  0005e	50		 push	 eax
  0005f	8b ce		 mov	 ecx, esi
  00061	c7 86 30 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+304], 1
  0006b	e8 00 00 00 00	 call	 ?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ; CD3DArcBall::ScreenToVector
  00070	8b 08		 mov	 ecx, DWORD PTR [eax]
  00072	89 0d 00 00 00
	00		 mov	 DWORD PTR ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A, ecx
  00078	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0007b	89 15 04 00 00
	00		 mov	 DWORD PTR ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A+4, edx
  00081	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00084	a3 08 00 00 00	 mov	 DWORD PTR ?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A+8, eax

; 596  :             m_qDown = m_qNow;

  00089	8d 4e 20	 lea	 ecx, DWORD PTR [esi+32]
  0008c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008e	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00091	83 c6 10	 add	 esi, 16			; 00000010H
  00094	89 16		 mov	 DWORD PTR [esi], edx
  00096	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00099	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0009c	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0009f	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000a2	5f		 pop	 edi
  000a3	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  000a6	5e		 pop	 esi

; 597  :             return TRUE;

  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	5b		 pop	 ebx

; 648  : }

  000ad	83 c4 28	 add	 esp, 40			; 00000028H
  000b0	c2 10 00	 ret	 16			; 00000010H
$L225963:
  000b3	5f		 pop	 edi

; 598  : 
; 599  :         case WM_LBUTTONUP:
; 600  :             // End drag mode
; 601  :             m_bDrag = FALSE;

  000b4	c7 86 30 01 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+304], 0
  000be	5e		 pop	 esi

; 602  :             return TRUE;

  000bf	b8 01 00 00 00	 mov	 eax, 1
  000c4	5b		 pop	 ebx

; 648  : }

  000c5	83 c4 28	 add	 esp, 40			; 00000028H
  000c8	c2 10 00	 ret	 16			; 00000010H
$L225964:

; 603  : 
; 604  :         case WM_MOUSEMOVE:
; 605  :             // Drag object
; 606  :             if( MK_LBUTTON&wParam )

  000cb	8b 44 24 40	 mov	 eax, DWORD PTR _wParam$[esp+48]
  000cf	a8 01		 test	 al, 1
  000d1	0f 84 e6 00 00
	00		 je	 $L225965

; 607  :             {
; 608  :                 if( m_bDrag )

  000d7	8b 8e 30 01 00
	00		 mov	 ecx, DWORD PTR [esi+304]
  000dd	33 c0		 xor	 eax, eax
  000df	3b c8		 cmp	 ecx, eax
  000e1	74 5c		 je	 SHORT $L225966

; 609  :                 {
; 610  :                     // recompute m_qNow
; 611  :                     D3DXVECTOR3 vCur = ScreenToVector( iMouseX, iMouseY );

  000e3	53		 push	 ebx
  000e4	57		 push	 edi
  000e5	8d 4c 24 14	 lea	 ecx, DWORD PTR _vCur$225967[esp+60]
  000e9	51		 push	 ecx
  000ea	8b ce		 mov	 ecx, esi
  000ec	e8 00 00 00 00	 call	 ?ScreenToVector@CD3DArcBall@@AAE?AUD3DXVECTOR3@@HH@Z ; CD3DArcBall::ScreenToVector

; 612  :                     D3DXQUATERNION qAxisToAxis;
; 613  :                     D3DXQuaternionAxisToAxis(&qAxisToAxis, &s_vDown, &vCur);

  000f1	8d 54 24 0c	 lea	 edx, DWORD PTR _vCur$225967[esp+52]
  000f5	52		 push	 edx
  000f6	68 00 00 00 00	 push	 OFFSET FLAT:?s_vDown@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4UD3DXVECTOR3@@A
  000fb	8d 44 24 2c	 lea	 eax, DWORD PTR _qAxisToAxis$225969[esp+60]
  000ff	50		 push	 eax
  00100	e8 00 00 00 00	 call	 ?D3DXQuaternionAxisToAxis@@YGPAUD3DXQUATERNION@@PAU1@PBUD3DXVECTOR3@@1@Z ; D3DXQuaternionAxisToAxis

; 614  :                     m_qNow = m_qDown;

  00105	8d 46 20	 lea	 eax, DWORD PTR [esi+32]
  00108	8d 4e 10	 lea	 ecx, DWORD PTR [esi+16]
  0010b	8b 39		 mov	 edi, DWORD PTR [ecx]
  0010d	8b d0		 mov	 edx, eax
  0010f	89 3a		 mov	 DWORD PTR [edx], edi
  00111	8b 79 04	 mov	 edi, DWORD PTR [ecx+4]
  00114	89 7a 04	 mov	 DWORD PTR [edx+4], edi
  00117	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0011a	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0011d	89 7a 08	 mov	 DWORD PTR [edx+8], edi
  00120	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx

; 615  :                     m_qNow *= qAxisToAxis;

  00123	8d 54 24 24	 lea	 edx, DWORD PTR _qAxisToAxis$225969[esp+52]
  00127	52		 push	 edx
  00128	50		 push	 eax
  00129	50		 push	 eax
  0012a	e8 00 00 00 00	 call	 _D3DXQuaternionMultiply@12

; 616  :                     D3DXMatrixRotationQuaternion(&m_matRotationDelta, &qAxisToAxis);

  0012f	8d 44 24 24	 lea	 eax, DWORD PTR _qAxisToAxis$225969[esp+52]
  00133	50		 push	 eax
  00134	8d 4e 70	 lea	 ecx, DWORD PTR [esi+112]
  00137	51		 push	 ecx
  00138	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8

; 617  :                 }
; 618  :                 else

  0013d	eb 59		 jmp	 SHORT $L227654
$L225966:

; 619  :                     D3DXMatrixIdentity(&m_matRotationDelta);

  0013f	89 86 a8 00 00
	00		 mov	 DWORD PTR [esi+168], eax
  00145	89 86 a4 00 00
	00		 mov	 DWORD PTR [esi+164], eax
  0014b	89 86 a0 00 00
	00		 mov	 DWORD PTR [esi+160], eax
  00151	89 86 9c 00 00
	00		 mov	 DWORD PTR [esi+156], eax
  00157	89 86 94 00 00
	00		 mov	 DWORD PTR [esi+148], eax
  0015d	89 86 90 00 00
	00		 mov	 DWORD PTR [esi+144], eax
  00163	89 86 8c 00 00
	00		 mov	 DWORD PTR [esi+140], eax
  00169	89 86 88 00 00
	00		 mov	 DWORD PTR [esi+136], eax
  0016f	89 86 80 00 00
	00		 mov	 DWORD PTR [esi+128], eax
  00175	89 46 7c	 mov	 DWORD PTR [esi+124], eax
  00178	89 46 78	 mov	 DWORD PTR [esi+120], eax
  0017b	89 46 74	 mov	 DWORD PTR [esi+116], eax
  0017e	b8 00 00 80 3f	 mov	 eax, 1065353216		; 3f800000H
  00183	89 86 ac 00 00
	00		 mov	 DWORD PTR [esi+172], eax
  00189	89 86 98 00 00
	00		 mov	 DWORD PTR [esi+152], eax
  0018f	89 86 84 00 00
	00		 mov	 DWORD PTR [esi+132], eax
  00195	89 46 70	 mov	 DWORD PTR [esi+112], eax
$L227654:

; 620  :                 D3DXMatrixRotationQuaternion(&m_matRotation, &m_qNow);

  00198	8d 56 20	 lea	 edx, DWORD PTR [esi+32]
  0019b	52		 push	 edx
  0019c	8d 46 30	 lea	 eax, DWORD PTR [esi+48]
  0019f	50		 push	 eax
  001a0	e8 00 00 00 00	 call	 _D3DXMatrixRotationQuaternion@8
  001a5	5f		 pop	 edi

; 621  :                 m_bDrag = TRUE;

  001a6	c7 86 30 01 00
	00 01 00 00 00	 mov	 DWORD PTR [esi+304], 1
  001b0	5e		 pop	 esi

; 643  :             }
; 644  :             return TRUE;

  001b1	b8 01 00 00 00	 mov	 eax, 1
  001b6	5b		 pop	 ebx

; 648  : }

  001b7	83 c4 28	 add	 esp, 40			; 00000028H
  001ba	c2 10 00	 ret	 16			; 00000010H
$L225965:

; 622  :             }
; 623  :             else if( (MK_RBUTTON&wParam) || (MK_MBUTTON&wParam) )

  001bd	8b c8		 mov	 ecx, eax
  001bf	83 e1 02	 and	 ecx, 2
  001c2	75 08		 jne	 SHORT $L225973
  001c4	a8 10		 test	 al, 16			; 00000010H
  001c6	0f 84 88 00 00
	00		 je	 $L225972
$L225973:

; 624  :             {
; 625  :                 // Normalize based on size of window and bounding sphere radius
; 626  :                 FLOAT fDeltaX = ( iCurMouseX-iMouseX ) * m_fRadiusTranslation / m_iWidth;
; 627  :                 FLOAT fDeltaY = ( iCurMouseY-iMouseY ) * m_fRadiusTranslation / m_iHeight;

  001cc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
  001d2	2b d3		 sub	 edx, ebx
  001d4	89 54 24 44	 mov	 DWORD PTR tv293[esp+48], edx
  001d8	db 44 24 44	 fild	 DWORD PTR tv293[esp+48]

; 628  : 
; 629  :                 if( wParam & MK_RBUTTON )

  001dc	33 c0		 xor	 eax, eax
  001de	3b c8		 cmp	 ecx, eax
  001e0	55		 push	 ebp
  001e1	d8 4e 0c	 fmul	 DWORD PTR [esi+12]

; 630  :                 {
; 631  :                     D3DXMatrixTranslation( &m_matTranslationDelta, -2*fDeltaX, 2*fDeltaY, 0.0f );

  001e4	8d ae f0 00 00
	00		 lea	 ebp, DWORD PTR [esi+240]
  001ea	da 76 04	 fidiv	 DWORD PTR [esi+4]
  001ed	74 38		 je	 SHORT $L225976
  001ef	50		 push	 eax
  001f0	dc c0		 fadd	 ST(0), ST(0)
  001f2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA
  001f7	83 ec 08	 sub	 esp, 8
  001fa	d9 5c 24 04	 fstp	 DWORD PTR [esp+4]
  001fe	2b c7		 sub	 eax, edi
  00200	89 44 24 54	 mov	 DWORD PTR tv289[esp+64], eax
  00204	db 44 24 54	 fild	 DWORD PTR tv289[esp+64]
  00208	d8 4e 0c	 fmul	 DWORD PTR [esi+12]
  0020b	da 36		 fidiv	 DWORD PTR [esi]
  0020d	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@c0000000
  00213	d9 1c 24	 fstp	 DWORD PTR [esp]
  00216	55		 push	 ebp
  00217	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 632  :                     D3DXMatrixMultiply( &m_matTranslation, &m_matTranslation, &m_matTranslationDelta );

  0021c	8d 86 b0 00 00
	00		 lea	 eax, DWORD PTR [esi+176]
  00222	55		 push	 ebp
  00223	50		 push	 eax
  00224	50		 push	 eax

; 633  :                 }
; 634  :                 else  // wParam & MK_MBUTTON

  00225	eb 1b		 jmp	 SHORT $L227661
$L225976:

; 635  :                 {
; 636  :                     D3DXMatrixTranslation( &m_matTranslationDelta, 0.0f, 0.0f, 5*fDeltaY );

  00227	d8 0d 00 00 00
	00		 fmul	 DWORD PTR __real@40a00000
  0022d	51		 push	 ecx
  0022e	d9 1c 24	 fstp	 DWORD PTR [esp]
  00231	50		 push	 eax
  00232	50		 push	 eax
  00233	55		 push	 ebp
  00234	e8 00 00 00 00	 call	 _D3DXMatrixTranslation@16

; 637  :                     D3DXMatrixMultiply( &m_matTranslation, &m_matTranslation, &m_matTranslationDelta );

  00239	81 c6 b0 00 00
	00		 add	 esi, 176		; 000000b0H
  0023f	55		 push	 ebp
  00240	56		 push	 esi
  00241	56		 push	 esi
$L227661:
  00242	e8 00 00 00 00	 call	 _D3DXMatrixMultiply@12

; 638  :                 }
; 639  : 
; 640  :                 // Store mouse coordinate
; 641  :                 iCurMouseX = iMouseX;

  00247	89 3d 00 00 00
	00		 mov	 DWORD PTR ?iCurMouseX@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, edi

; 642  :                 iCurMouseY = iMouseY;

  0024d	89 1d 00 00 00
	00		 mov	 DWORD PTR ?iCurMouseY@?1??HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z@4HA, ebx
  00253	5d		 pop	 ebp
$L225972:
  00254	5f		 pop	 edi
  00255	5e		 pop	 esi

; 643  :             }
; 644  :             return TRUE;

  00256	b8 01 00 00 00	 mov	 eax, 1
  0025b	5b		 pop	 ebx

; 648  : }

  0025c	83 c4 28	 add	 esp, 40			; 00000028H
  0025f	c2 10 00	 ret	 16			; 00000010H
$L225957:
  00262	5f		 pop	 edi
  00263	5e		 pop	 esi

; 645  :     }
; 646  : 
; 647  :     return FALSE;

  00264	33 c0		 xor	 eax, eax
  00266	5b		 pop	 ebx

; 648  : }

  00267	83 c4 28	 add	 esp, 40			; 00000028H
  0026a	c2 10 00	 ret	 16			; 00000010H
  0026d	8d 49 00	 npad	 3
$L227662:
  00270	00 00 00 00	 DD	 $L225964
  00274	00 00 00 00	 DD	 $L225961
  00278	00 00 00 00	 DD	 $L225963
  0027c	00 00 00 00	 DD	 $L225957
  00280	00 00 00 00	 DD	 $L225960
  00284	00 00 00 00	 DD	 $L225957
  00288	00 00 00 00	 DD	 $L225957
  0028c	00 00 00 00	 DD	 $L225960
?HandleMouseMessages@CD3DArcBall@@QAEJPAUHWND__@@IIJ@Z ENDP ; CD3DArcBall::HandleMouseMessages
_TEXT	ENDS
PUBLIC	?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z ; CD3DCamera::SetViewParams
EXTRN	_D3DXMatrixInverse@12:NEAR
; Function compile flags: /Ogty
;	COMDAT ?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z
_TEXT	SEGMENT
_v$227686 = -24						; size = 12
_vDir$ = -12						; size = 12
_vEyePt$ = 8						; size = 4
_vLookatPt$ = 12					; size = 4
_vUpVec$ = 16						; size = 4
?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z PROC NEAR ; CD3DCamera::SetViewParams, COMDAT
; _this$ = ecx

; 678  : {

  00000	83 ec 18	 sub	 esp, 24			; 00000018H

; 679  :     // Set attributes for the view matrix
; 680  :     m_vEyePt    = vEyePt;

  00003	8b 44 24 1c	 mov	 eax, DWORD PTR _vEyePt$[esp+20]
  00007	8b 10		 mov	 edx, DWORD PTR [eax]
  00009	53		 push	 ebx
  0000a	55		 push	 ebp
  0000b	56		 push	 esi
  0000c	8b f1		 mov	 esi, ecx
  0000e	89 11		 mov	 DWORD PTR [ecx], edx
  00010	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00013	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00016	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00019	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 681  :     m_vLookatPt = vLookatPt;

  0001c	8b 4c 24 2c	 mov	 ecx, DWORD PTR _vLookatPt$[esp+32]
  00020	8b 01		 mov	 eax, DWORD PTR [ecx]
  00022	8d 6e 0c	 lea	 ebp, DWORD PTR [esi+12]
  00025	8b d5		 mov	 edx, ebp
  00027	89 02		 mov	 DWORD PTR [edx], eax
  00029	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0002c	89 42 04	 mov	 DWORD PTR [edx+4], eax
  0002f	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00032	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 682  :     m_vUpVec    = vUpVec;

  00035	8b 54 24 30	 mov	 edx, DWORD PTR _vUpVec$[esp+32]
  00039	8b 0a		 mov	 ecx, DWORD PTR [edx]
  0003b	57		 push	 edi
  0003c	8d 7e 18	 lea	 edi, DWORD PTR [esi+24]
  0003f	8b c7		 mov	 eax, edi
  00041	89 08		 mov	 DWORD PTR [eax], ecx
  00043	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00046	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00049	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0004c	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 683  :     D3DXVECTOR3 vDir = m_vLookatPt - m_vEyePt;

  0004f	d9 45 00	 fld	 DWORD PTR [ebp]
  00052	d8 26		 fsub	 DWORD PTR [esi]

; 684  :     D3DXVec3Normalize( &m_vView, &vDir );

  00054	8d 44 24 1c	 lea	 eax, DWORD PTR _vDir$[esp+40]
  00058	50		 push	 eax
  00059	8d 5e 24	 lea	 ebx, DWORD PTR [esi+36]
  0005c	d9 5c 24 20	 fstp	 DWORD PTR _vDir$[esp+44]
  00060	53		 push	 ebx
  00061	d9 45 04	 fld	 DWORD PTR [ebp+4]
  00064	d8 66 04	 fsub	 DWORD PTR [esi+4]
  00067	d9 5c 24 28	 fstp	 DWORD PTR _vDir$[esp+52]
  0006b	d9 45 08	 fld	 DWORD PTR [ebp+8]
  0006e	d8 66 08	 fsub	 DWORD PTR [esi+8]
  00071	d9 5c 24 2c	 fstp	 DWORD PTR _vDir$[esp+56]
  00075	e8 00 00 00 00	 call	 _D3DXVec3Normalize@8

; 685  :     D3DXVec3Cross( &m_vCross, &m_vView, &m_vUpVec );

  0007a	d9 43 04	 fld	 DWORD PTR [ebx+4]

; 686  : 
; 687  :     D3DXMatrixLookAtLH( &m_matView, &m_vEyePt, &m_vLookatPt, &m_vUpVec );

  0007d	57		 push	 edi
  0007e	d8 4f 08	 fmul	 DWORD PTR [edi+8]
  00081	8d 4e 30	 lea	 ecx, DWORD PTR [esi+48]
  00084	d9 43 08	 fld	 DWORD PTR [ebx+8]
  00087	55		 push	 ebp
  00088	d8 4f 04	 fmul	 DWORD PTR [edi+4]
  0008b	56		 push	 esi
  0008c	de e9		 fsubp	 ST(1), ST(0)
  0008e	d9 5c 24 1c	 fstp	 DWORD PTR _v$227686[esp+52]
  00092	8b 54 24 1c	 mov	 edx, DWORD PTR _v$227686[esp+52]
  00096	d9 43 08	 fld	 DWORD PTR [ebx+8]
  00099	d8 0f		 fmul	 DWORD PTR [edi]
  0009b	d9 03		 fld	 DWORD PTR [ebx]
  0009d	d8 4f 08	 fmul	 DWORD PTR [edi+8]
  000a0	de e9		 fsubp	 ST(1), ST(0)
  000a2	d9 5c 24 20	 fstp	 DWORD PTR _v$227686[esp+56]
  000a6	8b 44 24 20	 mov	 eax, DWORD PTR _v$227686[esp+56]
  000aa	d9 03		 fld	 DWORD PTR [ebx]
  000ac	d8 4f 04	 fmul	 DWORD PTR [edi+4]
  000af	d9 43 04	 fld	 DWORD PTR [ebx+4]
  000b2	8d 5e 40	 lea	 ebx, DWORD PTR [esi+64]
  000b5	d8 0f		 fmul	 DWORD PTR [edi]
  000b7	89 11		 mov	 DWORD PTR [ecx], edx
  000b9	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000bc	53		 push	 ebx
  000bd	de e9		 fsubp	 ST(1), ST(0)
  000bf	d9 5c 24 28	 fstp	 DWORD PTR _v$227686[esp+64]
  000c3	8b 54 24 28	 mov	 edx, DWORD PTR _v$227686[esp+64]
  000c7	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  000ca	e8 00 00 00 00	 call	 _D3DXMatrixLookAtLH@16

; 688  :     D3DXMatrixInverse( &m_matBillboard, NULL, &m_matView );

  000cf	53		 push	 ebx
  000d0	33 ff		 xor	 edi, edi
  000d2	57		 push	 edi
  000d3	8d 86 80 00 00
	00		 lea	 eax, DWORD PTR [esi+128]
  000d9	50		 push	 eax
  000da	e8 00 00 00 00	 call	 _D3DXMatrixInverse@12

; 689  :     m_matBillboard._41 = 0.0f;

  000df	89 be b0 00 00
	00		 mov	 DWORD PTR [esi+176], edi

; 690  :     m_matBillboard._42 = 0.0f;

  000e5	89 be b4 00 00
	00		 mov	 DWORD PTR [esi+180], edi

; 691  :     m_matBillboard._43 = 0.0f;

  000eb	89 be b8 00 00
	00		 mov	 DWORD PTR [esi+184], edi
  000f1	5f		 pop	 edi
  000f2	5e		 pop	 esi
  000f3	5d		 pop	 ebp
  000f4	5b		 pop	 ebx

; 692  : }

  000f5	83 c4 18	 add	 esp, 24			; 00000018H
  000f8	c2 0c 00	 ret	 12			; 0000000cH
?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z ENDP ; CD3DCamera::SetViewParams
_TEXT	ENDS
PUBLIC	??0CD3DArcBall@@QAE@XZ				; CD3DArcBall::CD3DArcBall
; Function compile flags: /Ogty
;	COMDAT ??0CD3DArcBall@@QAE@XZ
_TEXT	SEGMENT
??0CD3DArcBall@@QAE@XZ PROC NEAR			; CD3DArcBall::CD3DArcBall, COMDAT
; _this$ = ecx

; 478  :     Init();

  00000	e8 00 00 00 00	 call	 ?Init@CD3DArcBall@@QAEXXZ ; CD3DArcBall::Init

; 479  : }

  00005	8b c1		 mov	 eax, ecx
  00007	c3		 ret	 0
??0CD3DArcBall@@QAE@XZ ENDP				; CD3DArcBall::CD3DArcBall
_TEXT	ENDS
PUBLIC	??0CD3DCamera@@QAE@XZ				; CD3DCamera::CD3DCamera
; Function compile flags: /Ogty
;	COMDAT ??0CD3DCamera@@QAE@XZ
_TEXT	SEGMENT
_vUpVec$ = -36						; size = 12
_vLookatPt$ = -24					; size = 12
_vEyePt$ = -12						; size = 12
??0CD3DCamera@@QAE@XZ PROC NEAR				; CD3DCamera::CD3DCamera, COMDAT
; _this$ = ecx

; 658  : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx

; 659  :     // Set attributes for the view matrix
; 660  :     D3DXVECTOR3 vEyePt(0.0f,0.0f,0.0f);
; 661  :     D3DXVECTOR3 vLookatPt(0.0f,0.0f,1.0f);
; 662  :     D3DXVECTOR3 vUpVec(0.0f,1.0f,0.0f);
; 663  :     SetViewParams( vEyePt, vLookatPt, vUpVec );

  00006	8d 44 24 04	 lea	 eax, DWORD PTR _vUpVec$[esp+40]
  0000a	50		 push	 eax
  0000b	8d 4c 24 14	 lea	 ecx, DWORD PTR _vLookatPt$[esp+44]
  0000f	51		 push	 ecx
  00010	8d 54 24 24	 lea	 edx, DWORD PTR _vEyePt$[esp+48]
  00014	52		 push	 edx
  00015	8b ce		 mov	 ecx, esi
  00017	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR _vEyePt$[esp+52], 0
  0001f	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR _vEyePt$[esp+56], 0
  00027	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR _vEyePt$[esp+60], 0
  0002f	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _vLookatPt$[esp+52], 0
  00037	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _vLookatPt$[esp+56], 0
  0003f	c7 44 24 24 00
	00 80 3f	 mov	 DWORD PTR _vLookatPt$[esp+60], 1065353216 ; 3f800000H
  00047	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _vUpVec$[esp+52], 0
  0004f	c7 44 24 14 00
	00 80 3f	 mov	 DWORD PTR _vUpVec$[esp+56], 1065353216 ; 3f800000H
  00057	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR _vUpVec$[esp+60], 0
  0005f	e8 00 00 00 00	 call	 ?SetViewParams@CD3DCamera@@QAEXAAUD3DXVECTOR3@@00@Z ; CD3DCamera::SetViewParams

; 664  : 
; 665  :     // Set attributes for the projection matrix
; 666  :     SetProjParams( D3DX_PI/4, 1.0f, 1.0f, 1000.0f );

  00064	b8 00 00 80 3f	 mov	 eax, 1065353216		; 3f800000H
  00069	68 00 00 7a 44	 push	 1148846080		; 447a0000H
  0006e	50		 push	 eax
  0006f	50		 push	 eax
  00070	89 86 c4 00 00
	00		 mov	 DWORD PTR [esi+196], eax
  00076	89 86 c8 00 00
	00		 mov	 DWORD PTR [esi+200], eax
  0007c	68 db 0f 49 3f	 push	 1061752795		; 3f490fdbH
  00081	8d 86 d0 00 00
	00		 lea	 eax, DWORD PTR [esi+208]
  00087	50		 push	 eax
  00088	c7 86 c0 00 00
	00 db 0f 49 3f	 mov	 DWORD PTR [esi+192], 1061752795 ; 3f490fdbH
  00092	c7 86 cc 00 00
	00 00 00 7a 44	 mov	 DWORD PTR [esi+204], 1148846080 ; 447a0000H
  0009c	e8 00 00 00 00	 call	 _D3DXMatrixPerspectiveFovLH@20

; 667  : }

  000a1	8b c6		 mov	 eax, esi
  000a3	5e		 pop	 esi
  000a4	83 c4 24	 add	 esp, 36			; 00000024H
  000a7	c3		 ret	 0
??0CD3DCamera@@QAE@XZ ENDP				; CD3DCamera::CD3DCamera
_TEXT	ENDS
END
