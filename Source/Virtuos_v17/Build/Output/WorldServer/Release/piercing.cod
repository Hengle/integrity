; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_Common\piercing.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
$$TYPES	SEGMENT BYTE USE32 'DEBTYP'
$$TYPES	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
text$AFX_COL1	SEGMENT PARA USE32 PUBLIC ''
text$AFX_COL1	ENDS
;	COMDAT ??0CPiercing@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPiercing@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPiercing@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??4CPiercing@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CPiercing@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CPiercing@@UAEXAAVCAr@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPiercingSize@CPiercing@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPiercingSize@CPiercing@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetPiercingItem@CPiercing@@QAEXHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPiercingItem@CPiercing@@QAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsPiercedItem@CPiercing@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetUltimatePiercingSize@CPiercing@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetUltimatePiercingSize@CPiercing@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetUltimatePiercingItem@CPiercing@@QAEXHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetUltimatePiercingItem@CPiercing@@QAEKH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVisKeepTime@CPiercing@@QAEXHJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetVisKeepTime@CPiercing@@QAEJH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsFull@?$CStack@K@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$pair@KPAVCCtrl@@@std@@QAE@ABKABQAVCCtrl@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@JV?$allocator@J@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@JV?$allocator@J@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@JV?$allocator@J@std@@@std@@QAEAAJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@JV?$allocator@J@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetMax@?$CItemContainer@VCItemElem@@@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?empty@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBEAAPAUtagACTMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBEAAPAUtagMAGICATKMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXViterator@12@IABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@JV?$allocator@J@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@JV?$allocator@J@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@JV?$allocator@J@std@@@std@@IAE@V?$allocator@J@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@J@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@IAE@V?$allocator@PAUtagACTMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagACTMSG@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_val@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@IAE@V?$allocator@PAUtagMAGICATKMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagMAGICATKMSG@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@JV?$allocator@J@std@@@std@@QBEAAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBEABQAUtagACTMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBEABQAUtagMAGICATKMSG@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@J@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@IAE@V?$allocator@PAUtagACTMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagACTMSG@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagACTMSG@@@std@@QAEXPAPAUtagACTMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAUtagACTMSG@@@std@@QAEXPAPAPAUtagACTMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAUtagACTMSG@@@std@@QAEXPAPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?pop_back@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Deque_map@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@IAE@V?$allocator@PAUtagMAGICATKMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAUtagMAGICATKMSG@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAUtagMAGICATKMSG@@@std@@QAEXPAPAUtagMAGICATKMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAPAUtagMAGICATKMSG@@@std@@QAEXPAPAPAUtagMAGICATKMSG@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAPAUtagMAGICATKMSG@@@std@@QAEXPAPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEABJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$deque@PAUtagACTMSG@@V?$allocator@PAUtagACTMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$deque@PAUtagMAGICATKMSG@@V?$allocator@PAUtagMAGICATKMSG@@@std@@@std@@QAE@IPBV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAUtagACTMSG@@@std@@QAEXPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@PAUtagMAGICATKMSG@@@std@@QAEXPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@EV?$allocator@E@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Assign@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAEV?$allocator@E@3@@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAEAAV?$allocator@E@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__SPAWNREGION@CEventLua@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__SPAWNREGION@CEventLua@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU__SPAWNREGION@CEventLua@@IU12@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAXPAU__SPAWNREGION@CEventLua@@IABU12@AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUWORMON@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUWORMON@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UWORMON@@V?$allocator@UWORMON@@@std@@@std@@YAXPAUWORMON@@0AAV?$allocator@UWORMON@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__ITEMGAME@CMiniGame@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__ITEMGAME@CMiniGame@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__ITEMGAME@CMiniGame@@V?$allocator@U__ITEMGAME@CMiniGame@@@std@@@std@@YAXPAU__ITEMGAME@CMiniGame@@0AAV?$allocator@U__ITEMGAME@CMiniGame@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@HV?$allocator@H@std@@@std@@YAXPAH0AAV?$allocator@H@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__ITEM@CExchange@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__ITEM@CExchange@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__ITEM@CExchange@@V?$allocator@U__ITEM@CExchange@@@std@@@std@@YAXPAU__ITEM@CExchange@@0AAV?$allocator@U__ITEM@CExchange@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__POINT@CExchange@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__POINT@CExchange@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__POINT@CExchange@@V?$allocator@U__POINT@CExchange@@@std@@@std@@YAXPAU__POINT@CExchange@@0AAV?$allocator@U__POINT@CExchange@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@EV?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAU__SPAWNREGION@CEventLua@@PAU12@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAPAU__SPAWNREGION@CEventLua@@PAU12@00AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU__SPAWNREGION@CEventLua@@PAU12@@std@@YAPAU__SPAWNREGION@CEventLua@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUD3DXVECTOR3@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUD3DXVECTOR3@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UD3DXVECTOR3@@V?$allocator@UD3DXVECTOR3@@@std@@@std@@YAXPAUD3DXVECTOR3@@0AAV?$allocator@UD3DXVECTOR3@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU_GIFTBOX@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU_GIFTBOX@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U_GIFTBOX@@V?$allocator@U_GIFTBOX@@@std@@@std@@YAXPAU_GIFTBOX@@0AAV?$allocator@U_GIFTBOX@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__SPAWNREGION@CEventLua@@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAXPAU__SPAWNREGION@CEventLua@@0AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAKK@std@@YAXPAK0ABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAUtagACTMSG@@@?$allocator@PAPAUtagACTMSG@@@std@@QAE@ABV?$allocator@PAUtagACTMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAUtagACTMSG@@@std@@YAXPAPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$?0PAUtagMAGICATKMSG@@@?$allocator@PAPAUtagMAGICATKMSG@@@std@@QAE@ABV?$allocator@PAUtagMAGICATKMSG@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAPAUtagMAGICATKMSG@@@std@@YAXPAPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAUtagACTMSG@@@std@@YAXPAPAUtagACTMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@PAUtagMAGICATKMSG@@@std@@YAXPAPAUtagMAGICATKMSG@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UWORMON@@@std@@QAEXPAUWORMON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__ITEMGAME@CMiniGame@@@std@@QAEXPAU__ITEMGAME@CMiniGame@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__ITEM@CExchange@@@std@@QAEXPAU__ITEM@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__POINT@CExchange@@@std@@QAEXPAU__POINT@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@EV?$allocator@E@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@EV?$allocator@E@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@EV?$allocator@E@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U__SPAWNREGION@CEventLua@@@std@@QAEXPAU__SPAWNREGION@CEventLua@@ABU34@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__SPAWNREGION@CEventLua@@@std@@QAEXPAU__SPAWNREGION@CEventLua@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UD3DXVECTOR3@@@std@@QAEXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_GIFTBOX@@@std@@QAEXPAU_GIFTBOX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@EV?$allocator@E@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@EV?$allocator@E@std@@@std@@QAE@PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@EV?$allocator@E@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$insert@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAE@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@EV?$allocator@E@std@@@0@AAPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAEV?$allocator@E@3@@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAEAAV?$allocator@E@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAU__SPAWNREGION@CEventLua@@PAU12@V?$allocator@U__SPAWNREGION@CEventLua@@@std@@@std@@YAPAU__SPAWNREGION@CEventLua@@PAU12@00AAV?$allocator@U__SPAWNREGION@CEventLua@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@JV?$allocator@J@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@KIK@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UWORMON@@@std@@YAXPAUWORMON@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__ITEMGAME@CMiniGame@@@std@@YAXPAU__ITEMGAME@CMiniGame@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__ITEM@CExchange@@@std@@YAXPAU__ITEM@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__POINT@CExchange@@@std@@YAXPAU__POINT@CExchange@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@U__SPAWNREGION@CEventLua@@U12@@std@@YAXPAU__SPAWNREGION@CEventLua@@ABU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__SPAWNREGION@CEventLua@@@std@@YAXPAU__SPAWNREGION@CEventLua@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UD3DXVECTOR3@@@std@@YAXPAUD3DXVECTOR3@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_GIFTBOX@@@std@@YAXPAU_GIFTBOX@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@E@std@@QAEXPAEABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@E@std@@QAEXPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@EV?$allocator@E@std@@@std@@QBEABEXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@EV?$allocator@E@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Insert@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@KK@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAKIK@std@@YAXPAKIABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@EE@std@@YAXPAEABE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@E@std@@YAXPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@EV?$allocator@E@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@EV?$allocator@E@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@I@std@@YAXVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAE@?$vector@EV?$allocator@E@std@@@std@@IAEPAEPAE00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$advance@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@EV?$allocator@E@std@@@0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAE@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAEPAE@std@@YAPAEPAE00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@I@std@@YAXVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAEPAEV?$allocator@E@std@@@std@@YAPAEPAE00AAV?$allocator@E@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Advance@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@EV?$allocator@E@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@PAE@std@@YAPAEVconst_iterator@?$vector@EV?$allocator@E@std@@@0@0PAEU_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAEPAE@std@@YAPAEPAE00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKVconst_iterator@01@0PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@IAEPAJVconst_iterator@01@0PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@EV?$allocator@E@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@EE@std@@YAPAEPAE00AAV?$allocator@E@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@AAPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKU_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@AAPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJU_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAKABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@K@std@@QAEXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@J@std@@QAEXPAJABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@J@std@@QAEXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@KK@std@@YAXPAKABK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@K@std@@YAXPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@JJ@std@@YAXPAJABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@J@std@@YAXPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@E@std@@QAEXPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@Vconst_iterator@?$vector@EV?$allocator@E@std@@@std@@@?$vector@EV?$allocator@E@std@@@std@@IAEPAEVconst_iterator@01@0PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@E@std@@QAEPAEI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@E@std@@YAPAEIPAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@EV?$allocator@E@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@EV?$allocator@E@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@E@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy@PAJPAJ@std@@YAPAJPAJ00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@EV?$allocator@E@std@@@std@@QAE@PAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@EV?$allocator@E@std@@@std@@IAEXPAE0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@EV?$allocator@E@std@@@std@@YAXPAE0AAV?$allocator@E@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KEU?$less@K@std@@V?$allocator@U?$pair@$$CBKE@std@@@2@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCCtrl@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCCtrl@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KPAVCUser@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCUser@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?deallocate@?$allocator@J@std@@QAEXPAJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@JV?$allocator@J@std@@@std@@IAEXPAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@J@std@@QAEPAJI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@J@std@@YAPAJIPAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@J@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@K@std@@YAPAKIPAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@JV?$allocator@J@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetVisKeepTimeSize@CPiercing@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@JV?$allocator@J@std@@@std@@IAEXViterator@12@IABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAJIJV?$allocator@J@std@@@std@@YAXPAJIABJAAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAJJ@std@@YAXPAJ0ABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?time_null@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPiercing@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L228115
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L228115:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@J@std@@QAE@XZ			; std::allocator<long>::allocator<long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@J@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@J@std@@QAE@XZ PROC NEAR			; std::allocator<long>::allocator<long>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@J@std@@QAE@XZ ENDP			; std::allocator<long>::allocator<long>
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
; Function compile flags: /Ogty
;	COMDAT ?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L228126
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L228126:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@J@std@@QAE@ABV01@@Z		; std::allocator<long>::allocator<long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@J@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@J@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<long>::allocator<long>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@J@std@@QAE@ABV01@@Z ENDP			; std::allocator<long>::allocator<long>
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEABJXZ ; std::vector<long,std::allocator<long> >::const_iterator::operator*
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Dconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEABJXZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEABJXZ PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEABJXZ ENDP ; std::vector<long,std::allocator<long> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEABKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@KV?$allocator@K@std@@@std@@QAE@PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??8const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 153  : 
; 154  : 
; 155  : 			return (_Myptr == _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 156  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<long *,long *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<long *,long *>, COMDAT

; 1031 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 1032 : 	return ((_OutIt)::memmove(&*_Dest, &*_First,
; 1033 : 		_Off * sizeof (*_First)) + _Off);

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1034 : 	}

  00027	c3		 ret	 0
??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<long *,long *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<long *,long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<long *,long *>, COMDAT

; 1059 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2

; 1060 : 	return ((_OutIt)memmove(&*_Dest - _Off, &*_First,
; 1061 : 		_Off * sizeof (*_First)));

  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	}

  00021	c3		 ret	 0
??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<long *,long *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<long,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<long,std::allocator<long> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<long,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??$fill@PAKK@std@@YAXPAK0ABK@Z			; std::fill<unsigned long *,unsigned long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAKK@std@@YAXPAK0ABK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAKK@std@@YAXPAK0ABK@Z PROC NEAR		; std::fill<unsigned long *,unsigned long>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $L226545
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L226543:

; 1136 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $L226543
  0001c	5e		 pop	 esi
$L226545:

; 1137 : 	}

  0001d	c3		 ret	 0
??$fill@PAKK@std@@YAXPAK0ABK@Z ENDP			; std::fill<unsigned long *,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<long,long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<long,long>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<long,long>
_TEXT	ENDS
PUBLIC	??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z		; std::fill_n<long *,unsigned int,long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z PROC NEAR		; std::fill_n<long *,unsigned int,long>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L226798
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L226796:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L226796
  0001b	5e		 pop	 esi
$L226798:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z ENDP			; std::fill_n<long *,unsigned int,long>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@KV?$allocator@K@std@@@0@@Z ; std::_Iter_cat<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$_Iter_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@KV?$allocator@K@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@KV?$allocator@K@std@@@0@@Z PROC NEAR ; std::_Iter_cat<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>, COMDAT

; 202  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 203  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 204  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@KV?$allocator@K@std@@@0@@Z ENDP ; std::_Iter_cat<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??$_Iter_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@JV?$allocator@J@std@@@0@@Z ; std::_Iter_cat<std::vector<long,std::allocator<long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$_Iter_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@JV?$allocator@J@std@@@0@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
??$_Iter_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@JV?$allocator@J@std@@@0@@Z PROC NEAR ; std::_Iter_cat<std::vector<long,std::allocator<long> >::const_iterator>, COMDAT

; 202  : 	typename iterator_traits<_Iter>::iterator_category _Cat;
; 203  : 	return (_Cat);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]

; 204  : 	}

  00004	c3		 ret	 0
??$_Iter_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABVconst_iterator@?$vector@JV?$allocator@J@std@@@0@@Z ENDP ; std::_Iter_cat<std::vector<long,std::allocator<long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<unsigned long *,unsigned long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<unsigned long *,unsigned long *>, COMDAT

; 1031 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 1032 : 	return ((_OutIt)::memmove(&*_Dest, &*_First,
; 1033 : 		_Off * sizeof (*_First)) + _Off);

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1034 : 	}

  00027	c3		 ret	 0
??$_Copy_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<unsigned long *,unsigned long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_backward_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<unsigned long *,unsigned long *>, COMDAT

; 1059 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2

; 1060 : 	return ((_OutIt)memmove(&*_Dest - _Off, &*_First,
; 1061 : 		_Off * sizeof (*_First)));

  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	}

  00021	c3		 ret	 0
??$_Copy_backward_opt@PAKPAK@std@@YAPAKPAK00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@KK@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<unsigned long,unsigned long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@KK@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@KK@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<unsigned long,unsigned long>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@KK@std@@YAPAKPAK00AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$fill_n@PAKIK@std@@YAXPAKIABK@Z		; std::fill_n<unsigned long *,unsigned int,unsigned long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill_n@PAKIK@std@@YAXPAKIABK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAKIK@std@@YAXPAKIABK@Z PROC NEAR		; std::fill_n<unsigned long *,unsigned int,unsigned long>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L227036
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L227034:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L227034
  0001b	5e		 pop	 esi
$L227036:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAKIK@std@@YAXPAKIABK@Z ENDP			; std::fill_n<unsigned long *,unsigned int,unsigned long>
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABV012@@Z ; std::vector<long,std::allocator<long> >::const_iterator::operator-
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Gconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<long,std::allocator<long> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABV012@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Gconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??$_Distance2@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned int>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Distance2@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC NEAR ; std::_Distance2<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned int>, COMDAT

; 479  : 
; 480  : 
; 481  : 	_Off += _Last - _First;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp-4]
  0000c	2b ca		 sub	 ecx, edx
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	c1 f9 02	 sar	 ecx, 2
  00013	03 d1		 add	 edx, ecx
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 482  : 	}

  00017	c3		 ret	 0
??$_Distance2@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@AAPAK@Z ; std::_Ptr_cat<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Ptr_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@AAPAK@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@AAPAK@Z PROC NEAR ; std::_Ptr_cat<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	51		 push	 ecx

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 214  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@AAPAK@Z ENDP ; std::_Ptr_cat<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Distance2@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z ; std::_Distance2<std::vector<long,std::allocator<long> >::const_iterator,unsigned int>
; Function compile flags: /Ogty
;	COMDAT ??$_Distance2@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Distance2@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC NEAR ; std::_Distance2<std::vector<long,std::allocator<long> >::const_iterator,unsigned int>, COMDAT

; 479  : 
; 480  : 
; 481  : 	_Off += _Last - _First;

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp-4]
  0000c	2b ca		 sub	 ecx, edx
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	c1 f9 02	 sar	 ecx, 2
  00013	03 d1		 add	 edx, ecx
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 482  : 	}

  00017	c3		 ret	 0
??$_Distance2@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z ENDP ; std::_Distance2<std::vector<long,std::allocator<long> >::const_iterator,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@AAPAJ@Z ; std::_Ptr_cat<std::vector<long,std::allocator<long> >::const_iterator,long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Ptr_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@AAPAJ@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@AAPAJ@Z PROC NEAR ; std::_Ptr_cat<std::vector<long,std::allocator<long> >::const_iterator,long *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	51		 push	 ecx

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 214  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@AAPAJ@Z ENDP ; std::_Ptr_cat<std::vector<long,std::allocator<long> >::const_iterator,long *>
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@XZ ; std::vector<long,std::allocator<long> >::const_iterator::operator++
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Econst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 91   : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 92   : 			++_Myptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 93   : 			return (*this);
; 94   : 			}

  00005	c3		 ret	 0
??Econst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@XZ ENDP ; std::vector<long,std::allocator<long> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Yconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z ; std::vector<long,std::allocator<long> >::const_iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::operator+=, COMDAT
; _this$ = ecx

; 117  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 118  : 			_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 119  : 			return (*this);
; 120  : 			}

  0000f	c2 04 00	 ret	 4
??Yconst_iterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<long,std::allocator<long> >::const_iterator::operator+=
_TEXT	ENDS
PUBLIC	??Econst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Econst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Econst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator++, COMDAT
; _this$ = ecx

; 91   : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 92   : 			++_Myptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 93   : 			return (*this);
; 94   : 			}

  00005	c3		 ret	 0
??Econst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator++
_TEXT	ENDS
PUBLIC	??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+=, COMDAT
; _this$ = ecx

; 117  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 118  : 			_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 119  : 			return (*this);
; 120  : 			}

  0000f	c2 04 00	 ret	 4
??Yconst_iterator@?$vector@KV?$allocator@K@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator+=
_TEXT	ENDS
PUBLIC	??$_Construct@KK@std@@YAXPAKABK@Z		; std::_Construct<unsigned long,unsigned long>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Construct@KK@std@@YAXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@KK@std@@YAXPAKABK@Z PROC NEAR		; std::_Construct<unsigned long,unsigned long>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L228234
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L228234:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@KK@std@@YAXPAKABK@Z ENDP			; std::_Construct<unsigned long,unsigned long>
_TEXT	ENDS
PUBLIC	??$_Destroy@K@std@@YAXPAK@Z			; std::_Destroy<unsigned long>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@K@std@@YAXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@K@std@@YAXPAK@Z PROC NEAR			; std::_Destroy<unsigned long>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@K@std@@YAXPAK@Z ENDP			; std::_Destroy<unsigned long>
_TEXT	ENDS
PUBLIC	??$_Construct@JJ@std@@YAXPAJABJ@Z		; std::_Construct<long,long>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@JJ@std@@YAXPAJABJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@JJ@std@@YAXPAJABJ@Z PROC NEAR		; std::_Construct<long,long>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L228246
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L228246:

; 43   : 	}

  00010	c3		 ret	 0
??$_Construct@JJ@std@@YAXPAJABJ@Z ENDP			; std::_Construct<long,long>
_TEXT	ENDS
PUBLIC	??$_Destroy@J@std@@YAXPAJ@Z			; std::_Destroy<long>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@J@std@@YAXPAJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@J@std@@YAXPAJ@Z PROC NEAR			; std::_Destroy<long>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@J@std@@YAXPAJ@Z ENDP			; std::_Destroy<long>
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L228260:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L228260
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z ; std::_Ptr_cat
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z PROC NEAR ; std::_Ptr_cat, COMDAT

; 359  : 	{	// return pointer category from pointer to long arguments

  00000	51		 push	 ecx

; 360  : 	_Scalar_ptr_iterator_tag _Cat;
; 361  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 362  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z ENDP ; std::_Ptr_cat
_TEXT	ENDS
PUBLIC	?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z ; std::_Ptr_cat
; Function compile flags: /Ogty
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z PROC NEAR ; std::_Ptr_cat, COMDAT

; 371  : 	{	// return pointer category from pointer to unsigned long arguments

  00000	51		 push	 ecx

; 372  : 	_Scalar_ptr_iterator_tag _Cat;
; 373  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 374  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAK0@Z ENDP ; std::_Ptr_cat
_TEXT	ENDS
PUBLIC	?time_null@@YAJXZ				; time_null
EXTRN	?g_tCurrent@@3JA:DWORD				; g_tCurrent
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\cmnhdr.h
;	COMDAT ?time_null@@YAJXZ
_TEXT	SEGMENT
?time_null@@YAJXZ PROC NEAR				; time_null, COMDAT

; 702  : #if defined(__WORLDSERVER) || defined(__CLIENT)
; 703  : 	return	g_tCurrent;

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?g_tCurrent@@3JA ; g_tCurrent

; 704  : #else	//
; 705  : 	return time( NULL );
; 706  : #endif	//
; 707  : }

  00005	c3		 ret	 0
?time_null@@YAJXZ ENDP					; time_null
_TEXT	ENDS
PUBLIC	?IsStoring@CAr@@QBEHXZ				; CAr::IsStoring
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\include\ar.h
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT
?IsStoring@CAr@@QBEHXZ PROC NEAR			; CAr::IsStoring, COMDAT
; _this$ = ecx

; 96   : 	{ return (m_nMode & CAr::load) == 0; }

  00000	33 c0		 xor	 eax, eax
  00002	8a 01		 mov	 al, BYTE PTR [ecx]
  00004	f7 d0		 not	 eax
  00006	83 e0 01	 and	 eax, 1
  00009	c3		 ret	 0
?IsStoring@CAr@@QBEHXZ ENDP				; CAr::IsStoring
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@J@Z				; CAr::operator<<
EXTRN	?CheckBuf@CAr@@QAEXI@Z:NEAR			; CAr::CheckBuf
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??6CAr@@QAEAAV0@J@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 113  : 	{ CheckBuf( sizeof(LONG) );

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 114  : 		*(UNALIGNED LONG*)m_lpBufCur = l; m_lpBufCur += sizeof(LONG); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _l$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@J@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@K@Z				; CAr::operator<<
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@K@Z
_TEXT	SEGMENT
_dw$ = 8						; size = 4
??6CAr@@QAEAAV0@K@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 116  : 	{ CheckBuf( sizeof(DWORD) );

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 117  : 		*(UNALIGNED DWORD*)m_lpBufCur = dw; m_lpBufCur += sizeof(DWORD); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _dw$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@K@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAK@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAK@Z
_TEXT	SEGMENT
_dw$ = 8						; size = 4
??5CAr@@QAEAAV0@AAK@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 146  : 	{	CAR_SAFE_READ( DWORD, dw );	}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L205468
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _dw$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L205468:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _dw$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAK@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAJ@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??5CAr@@QAEAAV0@AAJ@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 152  : 	{	CAR_SAFE_READ( LONG, l );	}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L205498
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _l$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L205498:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _l$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAJ@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L228298
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L228298:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC NEAR			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ ; std::vector<long,std::allocator<long> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ PROC NEAR ; std::vector<long,std::allocator<long> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L228312
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L228312:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ ENDP	; std::vector<long,std::allocator<long> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L228317
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L228317:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC NEAR	; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
PUBLIC	?capacity@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ ; std::vector<long,std::allocator<long> >::capacity
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ PROC NEAR ; std::vector<long,std::allocator<long> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L228331
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L228331:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ ENDP ; std::vector<long,std::allocator<long> >::capacity
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@J@std@@QAEXPAJI@Z	; std::allocator<long>::deallocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@J@std@@QAEXPAJI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@J@std@@QAEXPAJI@Z PROC NEAR	; std::allocator<long>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@J@std@@QAEXPAJI@Z ENDP		; std::allocator<long>::deallocate
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z ; std::vector<long,std::allocator<long> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<long,std::allocator<long> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@JV?$allocator@J@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<long,std::allocator<long> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L228347
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L228348
$L228347:
  00011	8b d0		 mov	 edx, eax
$L228348:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L222788
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L228355
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L228355:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L222788
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L222788:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC NEAR		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@J@std@@QBEIXZ		; std::allocator<long>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@J@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@J@std@@QBEIXZ PROC NEAR		; std::allocator<long>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@J@std@@QBEIXZ ENDP		; std::allocator<long>::max_size
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z ; std::vector<long,std::allocator<long> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z ENDP ; std::vector<long,std::allocator<long> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??8const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z ; std::vector<long,std::allocator<long> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 153  : 
; 154  : 
; 155  : 			return (_Myptr == _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 156  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<long,std::allocator<long> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$copy@PAJPAJ@std@@YAPAJPAJ00@Z		; std::copy<long *,long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@PAJPAJ@std@@YAPAJPAJ00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@PAJPAJ@std@@YAPAJPAJ00@Z PROC NEAR		; std::copy<long *,long *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1041 : 	}

  00027	c3		 ret	 0
??$copy@PAJPAJ@std@@YAPAJPAJ00@Z ENDP			; std::copy<long *,long *>
_TEXT	ENDS
PUBLIC	??$fill@PAJJ@std@@YAXPAJ0ABJ@Z			; std::fill<long *,long>
; Function compile flags: /Ogty
;	COMDAT ??$fill@PAJJ@std@@YAXPAJ0ABJ@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAJJ@std@@YAXPAJ0ABJ@Z PROC NEAR		; std::fill<long *,long>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $L225012
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L225010:

; 1136 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $L225010
  0001c	5e		 pop	 esi
$L225012:

; 1137 : 	}

  0001d	c3		 ret	 0
??$fill@PAJJ@std@@YAXPAJ0ABJ@Z ENDP			; std::fill<long *,long>
_TEXT	ENDS
PUBLIC	??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z	; std::copy_backward<long *,long *>
; Function compile flags: /Ogty
;	COMDAT ??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z PROC NEAR	; std::copy_backward<long *,long *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 : 	}

  00021	c3		 ret	 0
??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z ENDP		; std::copy_backward<long *,long *>
_TEXT	ENDS
PUBLIC	??$_Allocate@K@std@@YAPAKIPAK@Z			; std::_Allocate<unsigned long>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@K@std@@YAPAKIPAK@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@K@std@@YAPAKIPAK@Z PROC NEAR		; std::_Allocate<unsigned long>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@K@std@@YAPAKIPAK@Z ENDP			; std::_Allocate<unsigned long>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z PROC NEAR ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@@Z ENDP ; std::_Destroy_range<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@@Z ; std::_Destroy_range<long,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@@Z PROC NEAR ; std::_Destroy_range<long,std::allocator<long> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@@Z ENDP ; std::_Destroy_range<long,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??$_Allocate@J@std@@YAPAJIPAJ@Z			; std::_Allocate<long>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@J@std@@YAPAJIPAJ@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@J@std@@YAPAJIPAJ@Z PROC NEAR		; std::_Allocate<long>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@J@std@@YAPAJIPAJ@Z ENDP			; std::_Allocate<long>
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	?GetPiercingSize@CPiercing@@QAEHXZ		; CPiercing::GetPiercingSize
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
;	COMDAT ?GetPiercingSize@CPiercing@@QAEHXZ
_TEXT	SEGMENT
?GetPiercingSize@CPiercing@@QAEHXZ PROC NEAR		; CPiercing::GetPiercingSize, COMDAT
; _this$ = ecx

; 100  : 	return m_vPiercing.size();

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L228444
  00007	33 c0		 xor	 eax, eax

; 101  : }

  00009	c3		 ret	 0

; 100  : 	return m_vPiercing.size();

$L228444:
  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 101  : }

  00012	c3		 ret	 0
?GetPiercingSize@CPiercing@@QAEHXZ ENDP			; CPiercing::GetPiercingSize
_TEXT	ENDS
PUBLIC	?GetUltimatePiercingSize@CPiercing@@QAEHXZ	; CPiercing::GetUltimatePiercingSize
; Function compile flags: /Ogty
;	COMDAT ?GetUltimatePiercingSize@CPiercing@@QAEHXZ
_TEXT	SEGMENT
?GetUltimatePiercingSize@CPiercing@@QAEHXZ PROC NEAR	; CPiercing::GetUltimatePiercingSize, COMDAT
; _this$ = ecx

; 142  : 	return m_vUltimatePiercing.size();

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L228455
  00007	33 c0		 xor	 eax, eax

; 143  : }

  00009	c3		 ret	 0

; 142  : 	return m_vUltimatePiercing.size();

$L228455:
  0000a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 143  : }

  00012	c3		 ret	 0
?GetUltimatePiercingSize@CPiercing@@QAEHXZ ENDP		; CPiercing::GetUltimatePiercingSize
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 468  : 		return (const_iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 469  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 478  : 		return (const_iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 479  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@KV?$allocator@K@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::vector<long,std::allocator<long> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ PROC NEAR ; std::vector<long,std::allocator<long> >::begin, COMDAT
; _this$ = ecx

; 468  : 		return (const_iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 469  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::vector<long,std::allocator<long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ ; std::vector<long,std::allocator<long> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ PROC NEAR ; std::vector<long,std::allocator<long> >::end, COMDAT
; _this$ = ecx

; 478  : 		return (const_iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 479  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@JV?$allocator@J@std@@@std@@QBE?AVconst_iterator@12@XZ ENDP ; std::vector<long,std::allocator<long> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::end
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@JV?$allocator@J@std@@@std@@IAE@V?$allocator@J@1@@Z ; std::_Vector_val<long,std::allocator<long> >::_Vector_val<long,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Vector_val@JV?$allocator@J@std@@@std@@IAE@V?$allocator@J@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@JV?$allocator@J@std@@@std@@IAE@V?$allocator@J@1@@Z PROC NEAR ; std::_Vector_val<long,std::allocator<long> >::_Vector_val<long,std::allocator<long> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@JV?$allocator@J@std@@@std@@IAE@V?$allocator@J@1@@Z ENDP ; std::_Vector_val<long,std::allocator<long> >::_Vector_val<long,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@JV?$allocator@J@std@@@std@@QBEAAJXZ ; std::vector<long,std::allocator<long> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@JV?$allocator@J@std@@@std@@QBEAAJXZ
_TEXT	SEGMENT
??Diterator@?$vector@JV?$allocator@J@std@@@std@@QBEAAJXZ PROC NEAR ; std::vector<long,std::allocator<long> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@JV?$allocator@J@std@@@std@@QBEAAJXZ ENDP ; std::vector<long,std::allocator<long> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator*
; Function compile flags: /Ogty
;	COMDAT ??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@KV?$allocator@K@std@@@std@@QBEAAKXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@KV?$allocator@K@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??9const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 160  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 161  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$vector@KV?$allocator@K@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z ; std::_Uninitialized_copy<long *,long *,std::allocator<long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z PROC NEAR ; std::_Uninitialized_copy<long *,long *,std::allocator<long> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z ENDP ; std::_Uninitialized_copy<long *,long *,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<long,unsigned int,long>
; Function compile flags: /Ogty
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<long,unsigned int,long>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L228563
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L228561:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L228561
  0001b	5e		 pop	 esi
$L228563:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<long,unsigned int,long>
_TEXT	ENDS
PUBLIC	??$copy@PAKPAK@std@@YAPAKPAK00@Z		; std::copy<unsigned long *,unsigned long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@PAKPAK@std@@YAPAKPAK00@Z PROC NEAR		; std::copy<unsigned long *,unsigned long *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 1041 : 	}

  00027	c3		 ret	 0
??$copy@PAKPAK@std@@YAPAKPAK00@Z ENDP			; std::copy<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z	; std::copy_backward<unsigned long *,unsigned long *>
; Function compile flags: /Ogty
;	COMDAT ??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z PROC NEAR	; std::copy_backward<unsigned long *,unsigned long *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 : 	}

  00021	c3		 ret	 0
??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z ENDP		; std::copy_backward<unsigned long *,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ; std::_Uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z PROC NEAR ; std::_Uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAKPAKV?$allocator@K@std@@@std@@YAPAKPAK00AAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_copy<unsigned long *,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@KIK@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<unsigned long,unsigned int,unsigned long>
; Function compile flags: /Ogty
;	COMDAT ??$_Uninit_fill_n@KIK@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@KIK@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<unsigned long,unsigned int,unsigned long>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L228612
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L228610:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L228610
  0001b	5e		 pop	 esi
$L228612:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@KIK@std@@YAXPAKIABKAAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<unsigned long,unsigned int,unsigned long>
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<long,std::allocator<long> >::iterator::operator-
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Giterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<long,std::allocator<long> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@JV?$allocator@J@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<long,std::allocator<long> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@KV?$allocator@K@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??$_Distance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAI@Z ; std::_Distance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned int>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Distance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAI@Z PROC NEAR ; std::_Distance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned int>, COMDAT

; 498  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp-4]
  0000c	2b ca		 sub	 ecx, edx
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	c1 f9 02	 sar	 ecx, 2
  00013	03 d1		 add	 edx, ecx
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 499  : 	}

  00017	c3		 ret	 0
??$_Distance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@I@std@@YAXVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0AAI@Z ENDP ; std::_Distance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Distance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAI@Z ; std::_Distance<std::vector<long,std::allocator<long> >::const_iterator,unsigned int>
; Function compile flags: /Ogty
;	COMDAT ??$_Distance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAI@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Off$ = 16						; size = 4
??$_Distance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAI@Z PROC NEAR ; std::_Distance<std::vector<long,std::allocator<long> >::const_iterator,unsigned int>, COMDAT

; 498  : 	_Distance2(_First, _Last, _Off, _Iter_cat(_First));

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	8b 44 24 0c	 mov	 eax, DWORD PTR __Off$[esp-4]
  0000c	2b ca		 sub	 ecx, edx
  0000e	8b 10		 mov	 edx, DWORD PTR [eax]
  00010	c1 f9 02	 sar	 ecx, 2
  00013	03 d1		 add	 edx, ecx
  00015	89 10		 mov	 DWORD PTR [eax], edx

; 499  : 	}

  00017	c3		 ret	 0
??$_Distance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@I@std@@YAXVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0AAI@Z ENDP ; std::_Distance<std::vector<long,std::allocator<long> >::const_iterator,unsigned int>
_TEXT	ENDS
PUBLIC	??$_Advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@HUrandom_access_iterator_tag@0@@Z ; std::_Advance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,int>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iterator
;	COMDAT ??$_Advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@HUrandom_access_iterator_tag@0@@Z PROC NEAR ; std::_Advance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,int>, COMDAT

; 324  : 	_Where += _Off;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	8b 44 24 04	 mov	 eax, DWORD PTR __Where$[esp-4]
  0000f	01 08		 add	 DWORD PTR [eax], ecx

; 325  : 	}

  00011	c3		 ret	 0
??$_Advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@HUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,int>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKU_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_opt@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKU_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKU_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>, COMDAT

; 1021 : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 10		 je	 SHORT $L227605
  00010	56		 push	 esi
$L228679:

; 1022 : 		*_Dest = *_First;

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c1 04	 add	 ecx, 4
  00018	83 c0 04	 add	 eax, 4
  0001b	3b ca		 cmp	 ecx, edx
  0001d	75 f2		 jne	 SHORT $L228679
  0001f	5e		 pop	 esi
$L227605:

; 1023 : 	return (_Dest);
; 1024 : 	}

  00020	c3		 ret	 0
??$_Copy_opt@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKU_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@HUrandom_access_iterator_tag@0@@Z ; std::_Advance<std::vector<long,std::allocator<long> >::const_iterator,int>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iterator
;	COMDAT ??$_Advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@HUrandom_access_iterator_tag@0@@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@HUrandom_access_iterator_tag@0@@Z PROC NEAR ; std::_Advance<std::vector<long,std::allocator<long> >::const_iterator,int>, COMDAT

; 324  : 	_Where += _Off;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	8b 44 24 04	 mov	 eax, DWORD PTR __Where$[esp-4]
  0000f	01 08		 add	 DWORD PTR [eax], ecx

; 325  : 	}

  00011	c3		 ret	 0
??$_Advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@HUrandom_access_iterator_tag@0@@Z ENDP ; std::_Advance<std::vector<long,std::allocator<long> >::const_iterator,int>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@K@std@@QAEXPAKABK@Z	; std::allocator<unsigned long>::construct
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@K@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@K@std@@QAEXPAKABK@Z PROC NEAR	; std::allocator<unsigned long>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L228713
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L228713:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@K@std@@QAEXPAKABK@Z ENDP		; std::allocator<unsigned long>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@K@std@@QAEXPAK@Z		; std::allocator<unsigned long>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@K@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@K@std@@QAEXPAK@Z PROC NEAR		; std::allocator<unsigned long>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@K@std@@QAEXPAK@Z ENDP		; std::allocator<unsigned long>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@J@std@@QAEXPAJABJ@Z	; std::allocator<long>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@J@std@@QAEXPAJABJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@J@std@@QAEXPAJABJ@Z PROC NEAR	; std::allocator<long>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 08		 je	 SHORT $L228737
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
$L228737:

; 148  : 		}

  00010	c2 08 00	 ret	 8
?construct@?$allocator@J@std@@QAEXPAJABJ@Z ENDP		; std::allocator<long>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@J@std@@QAEXPAJ@Z		; std::allocator<long>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@J@std@@QAEXPAJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@J@std@@QAEXPAJ@Z PROC NEAR		; std::allocator<long>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@J@std@@QAEXPAJ@Z ENDP		; std::allocator<long>::destroy
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@H@Z				; CAr::operator<<
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\include\ar.h
;	COMDAT ??6CAr@@QAEAAV0@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??6CAr@@QAEAAV0@H@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 99   : 	{ return CAr::operator<<((LONG)i); }

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _i$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@H@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@I@Z				; CAr::operator<<
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@I@Z
_TEXT	SEGMENT
_u$ = 8							; size = 4
??6CAr@@QAEAAV0@I@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 101  : 	{ return CAr::operator<<((LONG)u); }

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _u$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@I@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAI@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_u$ = 8							; size = 4
??5CAr@@QAEAAV0@AAI@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 128  : 	{ return CAr::operator>>((LONG&)u); }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L228765
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _u$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L228765:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _u$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAI@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z PROC NEAR ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@KV?$allocator@K@std@@@std@@IAE@V?$allocator@K@1@@Z ENDP ; std::_Vector_val<unsigned long,std::allocator<unsigned long> >::_Vector_val<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@JV?$allocator@J@std@@@std@@QBE?AV012@H@Z ; std::vector<long,std::allocator<long> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@JV?$allocator@J@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@JV?$allocator@J@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<long,std::allocator<long> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@JV?$allocator@J@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<long,std::allocator<long> >::iterator::operator+
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L228794
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L228794:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC NEAR	; std::allocator<unsigned long>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@KV?$allocator@K@std@@@std@@IAEXPAK0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Destroy
_TEXT	ENDS
PUBLIC	?max_size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ ; std::vector<long,std::allocator<long> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ PROC NEAR ; std::vector<long,std::allocator<long> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@JV?$allocator@J@std@@@std@@QBEIXZ ENDP ; std::vector<long,std::allocator<long> >::max_size
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@JV?$allocator@J@std@@@std@@IAEXPAJ0@Z ; std::vector<long,std::allocator<long> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@JV?$allocator@J@std@@@std@@IAEXPAJ0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@JV?$allocator@J@std@@@std@@IAEXPAJ0@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@JV?$allocator@J@std@@@std@@IAEXPAJ0@Z ENDP ; std::vector<long,std::allocator<long> >::_Destroy
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@J@std@@QAEPAJI@Z		; std::allocator<long>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@J@std@@QAEPAJI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@J@std@@QAEPAJI@Z PROC NEAR	; std::allocator<long>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@J@std@@QAEPAJI@Z ENDP		; std::allocator<long>::allocate
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z ; std::vector<long,std::allocator<long> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z PROC NEAR ; std::vector<long,std::allocator<long> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@JV?$allocator@J@std@@@std@@QAE@PAJ@Z ENDP ; std::vector<long,std::allocator<long> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??9const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z ; std::vector<long,std::allocator<long> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<long,std::allocator<long> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 160  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 161  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$vector@JV?$allocator@J@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<long,std::allocator<long> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z ; std::vector<long,std::allocator<long> >::_Ucopy<long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Ucopy<long *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Ptr$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 805  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z ENDP ; std::vector<long,std::allocator<long> >::_Ucopy<long *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAJIJV?$allocator@J@std@@@std@@YAXPAJIABJAAV?$allocator@J@0@@Z ; std::_Uninitialized_fill_n<long *,unsigned int,long,std::allocator<long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAJIJV?$allocator@J@std@@@std@@YAXPAJIABJAAV?$allocator@J@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAJIJV?$allocator@J@std@@@std@@YAXPAJIABJAAV?$allocator@J@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<long *,unsigned int,long,std::allocator<long> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L228914
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L228912:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L228912
  0001b	5e		 pop	 esi
$L228914:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAJIJV?$allocator@J@std@@@std@@YAXPAJIABJAAV?$allocator@J@0@@Z ENDP ; std::_Uninitialized_fill_n<long *,unsigned int,long,std::allocator<long> >
_TEXT	ENDS
PUBLIC	?IsPiercedItem@CPiercing@@QAEHXZ		; CPiercing::IsPiercedItem
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
;	COMDAT ?IsPiercedItem@CPiercing@@QAEHXZ
_TEXT	SEGMENT
?IsPiercedItem@CPiercing@@QAEHXZ PROC NEAR		; CPiercing::IsPiercedItem, COMDAT
; _this$ = ecx

; 121  : 	if( GetPiercingSize() > 0
; 122  : #if __VER >= 12 // __EXT_PIERCING
; 123  : 		|| GetUltimatePiercingSize() > 0 
; 124  : #endif // __EXT_PIERCING
; 125  : 		)

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	74 0c		 je	 SHORT $L228951
  00007	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000a	2b c2		 sub	 eax, edx
  0000c	c1 f8 02	 sar	 eax, 2
  0000f	85 c0		 test	 eax, eax
  00011	7f 16		 jg	 SHORT $L225762
$L228951:
  00013	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00016	85 d2		 test	 edx, edx
  00018	74 0c		 je	 SHORT $L228952
  0001a	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
  00022	85 c0		 test	 eax, eax
  00024	7f 03		 jg	 SHORT $L225762
$L228952:

; 127  : 
; 128  : 	return FALSE;

  00026	33 c0		 xor	 eax, eax

; 129  : }

  00028	c3		 ret	 0
$L225762:

; 126  : 		return TRUE;

  00029	b8 01 00 00 00	 mov	 eax, 1

; 129  : }

  0002e	c3		 ret	 0
?IsPiercedItem@CPiercing@@QAEHXZ ENDP			; CPiercing::IsPiercedItem
_TEXT	ENDS
PUBLIC	??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@KV?$allocator@K@std@@@std@@QAEAAKI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::operator[]
_TEXT	ENDS
PUBLIC	?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::erase, COMDAT
; _this$ = ecx

; 731  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx
  00001	57		 push	 edi

; 732  : 		if (_First != _Last)

  00002	8b 7c 24 10	 mov	 edi, DWORD PTR __First$[esp+4]
  00006	8b d9		 mov	 ebx, ecx
  00008	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+4]
  0000c	3b f9		 cmp	 edi, ecx
  0000e	74 21		 je	 SHORT $L229024

; 733  : 			{	// worth doing, copy down over hole
; 734  : 			pointer _Ptr = copy(_ITER_BASE(_Last), _Mylast,
; 735  : 				_ITER_BASE(_First));

  00010	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00013	2b c1		 sub	 eax, ecx
  00015	56		 push	 esi
  00016	c1 f8 02	 sar	 eax, 2
  00019	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00020	56		 push	 esi
  00021	51		 push	 ecx
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 _memmove
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	03 c6		 add	 eax, esi

; 736  : 			_Destroy(_Ptr, _Mylast);
; 737  : 			_Mylast = _Ptr;

  0002d	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00030	5e		 pop	 esi
$L229024:

; 738  : 			}
; 739  : 		return (_First);

  00031	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00035	89 38		 mov	 DWORD PTR [eax], edi
  00037	5f		 pop	 edi
  00038	5b		 pop	 ebx

; 740  : 		}

  00039	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@KV?$allocator@K@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::erase
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@JV?$allocator@J@std@@@std@@IAEXXZ ; std::vector<long,std::allocator<long> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@JV?$allocator@J@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@JV?$allocator@J@std@@@std@@IAEXXZ PROC NEAR ; std::vector<long,std::allocator<long> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L229029

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L229029:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@JV?$allocator@J@std@@@std@@IAEXXZ ENDP	; std::vector<long,std::allocator<long> >::_Tidy
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>
; Function compile flags: /Ogty
;	COMDAT ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Ptr$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 805  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@@Z ; std::_Uninitialized_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L229078
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L229076:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L229076
  0001b	5e		 pop	 esi
$L229078:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAKIKV?$allocator@K@std@@@std@@YAXPAKIABKAAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_fill_n<unsigned long *,unsigned int,unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@H@Z ; std::advance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,int>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iterator
;	COMDAT ??$advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@H@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@H@Z PROC NEAR ; std::advance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,int>, COMDAT

; 295  : 	_Advance(_Where, _Off, _Iter_cat(_Where));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	8b 44 24 04	 mov	 eax, DWORD PTR __Where$[esp-4]
  0000f	01 08		 add	 DWORD PTR [eax], ecx

; 296  : 	}

  00011	c3		 ret	 0
??$advance@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@KV?$allocator@K@std@@@0@H@Z ENDP ; std::advance<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,int>
_TEXT	ENDS
PUBLIC	??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z ; std::copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z PROC NEAR ; std::copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 10		 je	 SHORT $L229124
  00010	56		 push	 esi
$L229126:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c1 04	 add	 ecx, 4
  00018	83 c0 04	 add	 eax, 4
  0001b	3b ca		 cmp	 ecx, edx
  0001d	75 f2		 jne	 SHORT $L229126
  0001f	5e		 pop	 esi
$L229124:

; 1041 : 	}

  00020	c3		 ret	 0
??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z ENDP ; std::copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
_TEXT	ENDS
PUBLIC	??$advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@H@Z ; std::advance<std::vector<long,std::allocator<long> >::const_iterator,int>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iterator
;	COMDAT ??$advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@H@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__Off$ = 12						; size = 4
??$advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@H@Z PROC NEAR ; std::advance<std::vector<long,std::allocator<long> >::const_iterator,int>, COMDAT

; 295  : 	_Advance(_Where, _Off, _Iter_cat(_Where));

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	8b 44 24 04	 mov	 eax, DWORD PTR __Where$[esp-4]
  0000f	01 08		 add	 DWORD PTR [eax], ecx

; 296  : 	}

  00011	c3		 ret	 0
??$advance@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@H@std@@YAXAAVconst_iterator@?$vector@JV?$allocator@J@std@@@0@H@Z ENDP ; std::advance<std::vector<long,std::allocator<long> >::const_iterator,int>
_TEXT	ENDS
PUBLIC	??$_Copy_opt@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJU_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_opt<std::vector<long,std::allocator<long> >::const_iterator,long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_opt@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJU_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_opt@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJU_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_opt<std::vector<long,std::allocator<long> >::const_iterator,long *>, COMDAT

; 1021 : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 10		 je	 SHORT $L227635
  00010	56		 push	 esi
$L229161:

; 1022 : 		*_Dest = *_First;

  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c1 04	 add	 ecx, 4
  00018	83 c0 04	 add	 eax, 4
  0001b	3b ca		 cmp	 ecx, edx
  0001d	75 f2		 jne	 SHORT $L229161
  0001f	5e		 pop	 esi
$L227635:

; 1023 : 	return (_Dest);
; 1024 : 	}

  00020	c3		 ret	 0
??$_Copy_opt@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJU_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_opt<std::vector<long,std::allocator<long> >::const_iterator,long *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 78   : 	_FwdIt _Next = _Dest;
; 79   : 
; 80   : 	_TRY_BEGIN
; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 14		 je	 SHORT $L227649
  00010	56		 push	 esi
$L229184:

; 82   : 		_Al.construct(_Dest, *_First);

  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $L227648
  00015	8b 31		 mov	 esi, DWORD PTR [ecx]
  00017	89 30		 mov	 DWORD PTR [eax], esi
$L227648:
  00019	83 c1 04	 add	 ecx, 4
  0001c	83 c0 04	 add	 eax, 4
  0001f	3b ca		 cmp	 ecx, edx
  00021	75 ee		 jne	 SHORT $L229184
  00023	5e		 pop	 esi
$L227649:

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)
; 85   : 		_Al.destroy(_Next);
; 86   : 	_RERAISE;
; 87   : 	_CATCH_END
; 88   : 	return (_Dest);
; 89   : 	}

  00024	c3		 ret	 0
??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >, COMDAT

; 78   : 	_FwdIt _Next = _Dest;
; 79   : 
; 80   : 	_TRY_BEGIN
; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 14		 je	 SHORT $L227658
  00010	56		 push	 esi
$L229235:

; 82   : 		_Al.construct(_Dest, *_First);

  00011	85 c0		 test	 eax, eax
  00013	74 04		 je	 SHORT $L227657
  00015	8b 31		 mov	 esi, DWORD PTR [ecx]
  00017	89 30		 mov	 DWORD PTR [eax], esi
$L227657:
  00019	83 c1 04	 add	 ecx, 4
  0001c	83 c0 04	 add	 eax, 4
  0001f	3b ca		 cmp	 ecx, edx
  00021	75 ee		 jne	 SHORT $L229235
  00023	5e		 pop	 esi
$L227658:

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)
; 85   : 		_Al.destroy(_Next);
; 86   : 	_RERAISE;
; 87   : 	_CATCH_END
; 88   : 	return (_Dest);
; 89   : 	}

  00024	c3		 ret	 0
??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L229285

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L229285

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L229282
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L229282:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L229285:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L229313

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L229313:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
PUBLIC	?begin@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ ; std::vector<long,std::allocator<long> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<long,std::allocator<long> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<long,std::allocator<long> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ ; std::vector<long,std::allocator<long> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<long,std::allocator<long> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<long,std::allocator<long> >::end
_TEXT	ENDS
PUBLIC	?erase@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@V312@0@Z ; std::vector<long,std::allocator<long> >::erase
; Function compile flags: /Ogty
;	COMDAT ?erase@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@V312@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@V312@0@Z PROC NEAR ; std::vector<long,std::allocator<long> >::erase, COMDAT
; _this$ = ecx

; 731  : 		{	// erase [_First, _Last)

  00000	53		 push	 ebx
  00001	57		 push	 edi

; 732  : 		if (_First != _Last)

  00002	8b 7c 24 10	 mov	 edi, DWORD PTR __First$[esp+4]
  00006	8b d9		 mov	 ebx, ecx
  00008	8b 4c 24 14	 mov	 ecx, DWORD PTR __Last$[esp+4]
  0000c	3b f9		 cmp	 edi, ecx
  0000e	74 21		 je	 SHORT $L229374

; 733  : 			{	// worth doing, copy down over hole
; 734  : 			pointer _Ptr = copy(_ITER_BASE(_Last), _Mylast,
; 735  : 				_ITER_BASE(_First));

  00010	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00013	2b c1		 sub	 eax, ecx
  00015	56		 push	 esi
  00016	c1 f8 02	 sar	 eax, 2
  00019	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00020	56		 push	 esi
  00021	51		 push	 ecx
  00022	57		 push	 edi
  00023	e8 00 00 00 00	 call	 _memmove
  00028	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002b	03 c6		 add	 eax, esi

; 736  : 			_Destroy(_Ptr, _Mylast);
; 737  : 			_Mylast = _Ptr;

  0002d	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  00030	5e		 pop	 esi
$L229374:

; 738  : 			}
; 739  : 		return (_First);

  00031	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00035	89 38		 mov	 DWORD PTR [eax], edi
  00037	5f		 pop	 edi
  00038	5b		 pop	 ebx

; 740  : 		}

  00039	c2 0c 00	 ret	 12			; 0000000cH
?erase@?$vector@JV?$allocator@J@std@@@std@@QAE?AViterator@12@V312@0@Z ENDP ; std::vector<long,std::allocator<long> >::erase
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L221371

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L221371:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L221372

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L221372:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L229417

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L229382
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L229383
$L229382:
  00036	8b d3		 mov	 edx, ebx
$L229383:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L229389
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L229390
$L229389:
  00041	8b cb		 mov	 ecx, ebx
$L229390:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L229412

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L229412:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L229417:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z ; std::vector<long,std::allocator<long> >::_Ufill
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000c	8b c7		 mov	 eax, edi
  0000e	76 12		 jbe	 SHORT $L229458
  00010	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00014	8b ce		 mov	 ecx, esi
  00016	53		 push	 ebx
$L229451:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 18		 mov	 DWORD PTR [eax], ebx
  0001b	83 c0 04	 add	 eax, 4
  0001e	49		 dec	 ecx
  0001f	75 f6		 jne	 SHORT $L229451
  00021	5b		 pop	 ebx
$L229458:

; 879  : 		return (_Ptr + _Count);

  00022	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z ENDP ; std::vector<long,std::allocator<long> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T229663 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T229665 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L229465
$T229666 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L229463
$T229664 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T229665
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T229666
$T229657 DD	019930520H
	DD	04H
	DD	FLAT:$T229663
	DD	02H
	DD	FLAT:$T229664
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L222778

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L222780
$L222778:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L222780
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L222780

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L222780:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L222782
$L229463:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L229658
  00092	c3		 ret	 0
$L229658:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L222782:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L229582

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L229578
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L229579
$L229578:
  000ae	83 c6 04	 add	 esi, 4
$L229579:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L229582:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L229618
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L229618:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L229653
  000f2	8b c2		 mov	 eax, edx
$L229653:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L229465:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L229558
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L229558:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L229668:
$L229662:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T229657
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?SetPiercingItem@CPiercing@@QAEXHK@Z		; CPiercing::SetPiercingItem
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
;	COMDAT ?SetPiercingItem@CPiercing@@QAEXHK@Z
_TEXT	SEGMENT
_nth$ = 8						; size = 4
_dwItem$ = 12						; size = 4
?SetPiercingItem@CPiercing@@QAEXHK@Z PROC NEAR		; CPiercing::SetPiercingItem, COMDAT
; _this$ = ecx

; 105  : 	if( nth >= GetPiercingSize() )

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L229684
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L229685
$L229684:
  0000b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L229685:
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _nth$[esp-4]
  00017	3b d0		 cmp	 edx, eax
  00019	7d 0c		 jge	 SHORT $L225751

; 106  : 		return;
; 107  : 	
; 108  : 	m_vPiercing[nth]	= dwItem;

  0001b	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0001e	8b 4c 24 08	 mov	 ecx, DWORD PTR _dwItem$[esp-4]
  00022	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00025	89 08		 mov	 DWORD PTR [eax], ecx
$L225751:

; 109  : }

  00027	c2 08 00	 ret	 8
?SetPiercingItem@CPiercing@@QAEXHK@Z ENDP		; CPiercing::SetPiercingItem
_TEXT	ENDS
PUBLIC	?GetPiercingItem@CPiercing@@QAEKH@Z		; CPiercing::GetPiercingItem
; Function compile flags: /Ogty
;	COMDAT ?GetPiercingItem@CPiercing@@QAEKH@Z
_TEXT	SEGMENT
_nth$ = 8						; size = 4
?GetPiercingItem@CPiercing@@QAEKH@Z PROC NEAR		; CPiercing::GetPiercingItem, COMDAT
; _this$ = ecx

; 113  : 	if( nth >= GetPiercingSize()  )

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L229757
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L229758
$L229757:
  0000b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L229758:
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _nth$[esp-4]
  00017	3b d0		 cmp	 edx, eax
  00019	7c 05		 jl	 SHORT $L225757

; 114  : 		return 0;

  0001b	33 c0		 xor	 eax, eax

; 117  : }

  0001d	c2 04 00	 ret	 4
$L225757:

; 115  : 	
; 116  : 	return m_vPiercing[nth];

  00020	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]

; 117  : }

  00028	c2 04 00	 ret	 4
?GetPiercingItem@CPiercing@@QAEKH@Z ENDP		; CPiercing::GetPiercingItem
_TEXT	ENDS
PUBLIC	?SetUltimatePiercingItem@CPiercing@@QAEXHK@Z	; CPiercing::SetUltimatePiercingItem
; Function compile flags: /Ogty
;	COMDAT ?SetUltimatePiercingItem@CPiercing@@QAEXHK@Z
_TEXT	SEGMENT
_nth$ = 8						; size = 4
_dwItem$ = 12						; size = 4
?SetUltimatePiercingItem@CPiercing@@QAEXHK@Z PROC NEAR	; CPiercing::SetUltimatePiercingItem, COMDAT
; _this$ = ecx

; 147  : 	if( nth >= GetUltimatePiercingSize() )

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L229830
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L229831
$L229830:
  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L229831:
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _nth$[esp-4]
  00017	3b d0		 cmp	 edx, eax
  00019	7d 0c		 jge	 SHORT $L225775

; 148  : 		return;
; 149  : 
; 150  : 	m_vUltimatePiercing[nth]	= dwItem;

  0001b	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  0001e	8b 4c 24 08	 mov	 ecx, DWORD PTR _dwItem$[esp-4]
  00022	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00025	89 08		 mov	 DWORD PTR [eax], ecx
$L225775:

; 151  : }

  00027	c2 08 00	 ret	 8
?SetUltimatePiercingItem@CPiercing@@QAEXHK@Z ENDP	; CPiercing::SetUltimatePiercingItem
_TEXT	ENDS
PUBLIC	?GetUltimatePiercingItem@CPiercing@@QAEKH@Z	; CPiercing::GetUltimatePiercingItem
; Function compile flags: /Ogty
;	COMDAT ?GetUltimatePiercingItem@CPiercing@@QAEKH@Z
_TEXT	SEGMENT
_nth$ = 8						; size = 4
?GetUltimatePiercingItem@CPiercing@@QAEKH@Z PROC NEAR	; CPiercing::GetUltimatePiercingItem, COMDAT
; _this$ = ecx

; 155  : 	if( nth >= GetUltimatePiercingSize()  )

  00000	8b 51 18	 mov	 edx, DWORD PTR [ecx+24]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L229904
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L229905
$L229904:
  0000b	8b 41 1c	 mov	 eax, DWORD PTR [ecx+28]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L229905:
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _nth$[esp-4]
  00017	3b d0		 cmp	 edx, eax
  00019	7c 05		 jl	 SHORT $L225781

; 156  : 		return 0;

  0001b	33 c0		 xor	 eax, eax

; 159  : }

  0001d	c2 04 00	 ret	 4
$L225781:

; 157  : 
; 158  : 	return m_vUltimatePiercing[nth];

  00020	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00023	8d 04 90	 lea	 eax, DWORD PTR [eax+edx*4]
  00026	8b 00		 mov	 eax, DWORD PTR [eax]

; 159  : }

  00028	c2 04 00	 ret	 4
?GetUltimatePiercingItem@CPiercing@@QAEKH@Z ENDP	; CPiercing::GetUltimatePiercingItem
_TEXT	ENDS
PUBLIC	?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::clear
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L229974
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L229974:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@KV?$allocator@K@std@@@std@@QAEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@JV?$allocator@J@std@@@std@@QAE@XZ	; std::vector<long,std::allocator<long> >::~vector<long,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??1?$vector@JV?$allocator@J@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@JV?$allocator@J@std@@@std@@QAE@XZ PROC NEAR	; std::vector<long,std::allocator<long> >::~vector<long,std::allocator<long> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L229986
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L229986:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@JV?$allocator@J@std@@@std@@QAE@XZ ENDP	; std::vector<long,std::allocator<long> >::~vector<long,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??A?$vector@JV?$allocator@J@std@@@std@@QAEAAJI@Z ; std::vector<long,std::allocator<long> >::operator[]
; Function compile flags: /Ogty
;	COMDAT ??A?$vector@JV?$allocator@J@std@@@std@@QAEAAJI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@JV?$allocator@J@std@@@std@@QAEAAJI@Z PROC NEAR ; std::vector<long,std::allocator<long> >::operator[], COMDAT
; _this$ = ecx

; 555  : 		return (*(begin() + _Pos));

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	8b 4c 24 04	 mov	 ecx, DWORD PTR __Pos$[esp-4]
  00007	8d 04 88	 lea	 eax, DWORD PTR [eax+ecx*4]

; 556  : 		}

  0000a	c2 04 00	 ret	 4
??A?$vector@JV?$allocator@J@std@@@std@@QAEAAJI@Z ENDP	; std::vector<long,std::allocator<long> >::operator[]
_TEXT	ENDS
PUBLIC	?clear@?$vector@JV?$allocator@J@std@@@std@@QAEXXZ ; std::vector<long,std::allocator<long> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@JV?$allocator@J@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@JV?$allocator@J@std@@@std@@QAEXXZ PROC NEAR ; std::vector<long,std::allocator<long> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L230038
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L230038:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@JV?$allocator@J@std@@@std@@QAEXXZ ENDP	; std::vector<long,std::allocator<long> >::clear
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill
; Function compile flags: /Ogty
;	COMDAT ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000c	8b c7		 mov	 eax, edi
  0000e	76 12		 jbe	 SHORT $L230082
  00010	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00014	8b ce		 mov	 ecx, esi
  00016	53		 push	 ebx
$L230077:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 18		 mov	 DWORD PTR [eax], ebx
  0001b	83 c0 04	 add	 eax, 4
  0001e	49		 dec	 ecx
  0001f	75 f6		 jne	 SHORT $L230077
  00021	5b		 pop	 ebx
$L230082:

; 879  : 		return (_Ptr + _Count);

  00022	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill
_TEXT	ENDS
PUBLIC	??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z ; std::copy<std::vector<long,std::allocator<long> >::const_iterator,long *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z PROC NEAR ; std::copy<std::vector<long,std::allocator<long> >::const_iterator,long *>, COMDAT

; 1040 : 	return (_Copy_opt(_First, _Last, _Dest, _Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 10		 je	 SHORT $L230109
  00010	56		 push	 esi
$L230111:
  00011	8b 31		 mov	 esi, DWORD PTR [ecx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c1 04	 add	 ecx, 4
  00018	83 c0 04	 add	 eax, 4
  0001b	3b ca		 cmp	 ecx, edx
  0001d	75 f2		 jne	 SHORT $L230111
  0001f	5e		 pop	 esi
$L230109:

; 1041 : 	}

  00020	c3		 ret	 0
??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z ENDP ; std::copy<std::vector<long,std::allocator<long> >::const_iterator,long *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@@Z ; std::_Uninitialized_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@@Z
_TEXT	SEGMENT
__Cat$230131 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@@Z PROC NEAR ; std::_Uninitialized_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$230131[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >

; 129  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@@Z ENDP ; std::_Uninitialized_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@@Z ; std::_Uninitialized_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@@Z
_TEXT	SEGMENT
__Cat$230139 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@@Z PROC NEAR ; std::_Uninitialized_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$230139[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >

; 129  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@@Z ENDP ; std::_Uninitialized_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L230177
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L230177:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC NEAR	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L230206
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L230206:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L221380

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L221380:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L221381

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L221381:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L221383
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L221383
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L230212
  00047	8b de		 mov	 ebx, esi
$L230212:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L230266
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L230264
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L230264:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L230266:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L221383:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L230303

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L230301
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L230301:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L230303:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??1CPiercing@@UAE@XZ				; CPiercing::~CPiercing
PUBLIC	?Serialize@CPiercing@@UAEXAAVCAr@@@Z		; CPiercing::Serialize
PUBLIC	??_7CPiercing@@6B@				; CPiercing::`vftable'
PUBLIC	??_GCPiercing@@UAEPAXI@Z			; CPiercing::`scalar deleting destructor'
EXTRN	??_ECPiercing@@UAEPAXI@Z:NEAR			; CPiercing::`vector deleting destructor'
;	COMDAT ??_7CPiercing@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
CONST	SEGMENT
??_7CPiercing@@6B@ DD FLAT:??_ECPiercing@@UAEPAXI@Z	; CPiercing::`vftable'
	DD	FLAT:?Serialize@CPiercing@@UAEXAAVCAr@@@Z
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
CONST	ENDS
;	COMDAT ??1CPiercing@@UAE@XZ
_TEXT	SEGMENT
??1CPiercing@@UAE@XZ PROC NEAR				; CPiercing::~CPiercing, COMDAT
; _this$ = ecx

; 10   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CPiercing@@6B@

; 11   : }

  0000a	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0000d	33 ff		 xor	 edi, edi
  0000f	3b c7		 cmp	 eax, edi
  00011	74 09		 je	 SHORT $L230329
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00019	83 c4 04	 add	 esp, 4
$L230329:
  0001c	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0001f	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  00022	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00025	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00028	3b c7		 cmp	 eax, edi
  0002a	74 09		 je	 SHORT $L230349
  0002c	50		 push	 eax
  0002d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00032	83 c4 04	 add	 esp, 4
$L230349:
  00035	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00038	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0003b	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  0003e	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00041	3b c7		 cmp	 eax, edi
  00043	74 09		 je	 SHORT $L230369
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004b	83 c4 04	 add	 esp, 4
$L230369:
  0004e	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00051	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00054	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	c3		 ret	 0
??1CPiercing@@UAE@XZ ENDP				; CPiercing::~CPiercing
_TEXT	ENDS
PUBLIC	?Clear@CPiercing@@QAEXXZ			; CPiercing::Clear
; Function compile flags: /Ogty
;	COMDAT ?Clear@CPiercing@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPiercing@@QAEXXZ PROC NEAR			; CPiercing::Clear, COMDAT
; _this$ = ecx

; 26   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 27   : 	m_vPiercing.clear();

  00003	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00006	57		 push	 edi
  00007	33 ff		 xor	 edi, edi
  00009	3b c7		 cmp	 eax, edi
  0000b	74 09		 je	 SHORT $L230392
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00013	83 c4 04	 add	 esp, 4
$L230392:
  00016	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00019	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0001c	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 28   : #if __VER >= 12 // __EXT_PIERCING
; 29   : 	m_vUltimatePiercing.clear();

  0001f	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00022	3b c7		 cmp	 eax, edi
  00024	74 09		 je	 SHORT $L230410
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0002c	83 c4 04	 add	 esp, 4
$L230410:
  0002f	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00032	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00035	89 7e 20	 mov	 DWORD PTR [esi+32], edi

; 30   : #endif // __EXT_PIERCING
; 31   : #if __VER >= 15 // __PETVIS
; 32   : 	m_vtmPetVis.clear();

  00038	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0003b	3b c7		 cmp	 eax, edi
  0003d	74 09		 je	 SHORT $L230430
  0003f	50		 push	 eax
  00040	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00045	83 c4 04	 add	 esp, 4
$L230430:
  00048	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0004b	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  0004e	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi

; 33   : #endif // __PETVIS
; 34   : }

  00053	c3		 ret	 0
?Clear@CPiercing@@QAEXXZ ENDP				; CPiercing::Clear
_TEXT	ENDS
PUBLIC	?SetVisKeepTime@CPiercing@@QAEXHJ@Z		; CPiercing::SetVisKeepTime
; Function compile flags: /Ogty
;	COMDAT ?SetVisKeepTime@CPiercing@@QAEXHJ@Z
_TEXT	SEGMENT
_nth$ = 8						; size = 4
_tmKeep$ = 12						; size = 4
?SetVisKeepTime@CPiercing@@QAEXHJ@Z PROC NEAR		; CPiercing::SetVisKeepTime, COMDAT
; _this$ = ecx

; 165  : 	if( nth >= GetPiercingSize() || nth >= (int)( m_vtmPetVis.size() ) )

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L230449
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L230450
$L230449:
  0000b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L230450:
  00013	56		 push	 esi
  00014	8b 74 24 08	 mov	 esi, DWORD PTR _nth$[esp]
  00018	3b f0		 cmp	 esi, eax
  0001a	7d 23		 jge	 SHORT $L225789
  0001c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0001f	85 d2		 test	 edx, edx
  00021	75 04		 jne	 SHORT $L230457
  00023	33 c0		 xor	 eax, eax
  00025	eb 08		 jmp	 SHORT $L230458
$L230457:
  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	2b c2		 sub	 eax, edx
  0002c	c1 f8 02	 sar	 eax, 2
$L230458:
  0002f	3b f0		 cmp	 esi, eax
  00031	7d 0c		 jge	 SHORT $L225789

; 166  : 		return;
; 167  : 
; 168  : 	m_vtmPetVis[nth] = tmKeep;

  00033	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00036	8b 4c 24 0c	 mov	 ecx, DWORD PTR _tmKeep$[esp]
  0003a	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  0003d	89 08		 mov	 DWORD PTR [eax], ecx
$L225789:
  0003f	5e		 pop	 esi

; 169  : }

  00040	c2 08 00	 ret	 8
?SetVisKeepTime@CPiercing@@QAEXHJ@Z ENDP		; CPiercing::SetVisKeepTime
_TEXT	ENDS
PUBLIC	?GetVisKeepTime@CPiercing@@QAEJH@Z		; CPiercing::GetVisKeepTime
; Function compile flags: /Ogty
;	COMDAT ?GetVisKeepTime@CPiercing@@QAEJH@Z
_TEXT	SEGMENT
_nth$ = 8						; size = 4
?GetVisKeepTime@CPiercing@@QAEJH@Z PROC NEAR		; CPiercing::GetVisKeepTime, COMDAT
; _this$ = ecx

; 173  : 	if( nth >= GetPiercingSize() || nth >= (int)( m_vtmPetVis.size() ) )

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	85 d2		 test	 edx, edx
  00005	75 04		 jne	 SHORT $L230530
  00007	33 c0		 xor	 eax, eax
  00009	eb 08		 jmp	 SHORT $L230531
$L230530:
  0000b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000e	2b c2		 sub	 eax, edx
  00010	c1 f8 02	 sar	 eax, 2
$L230531:
  00013	56		 push	 esi
  00014	8b 74 24 08	 mov	 esi, DWORD PTR _nth$[esp]
  00018	3b f0		 cmp	 esi, eax
  0001a	7d 23		 jge	 SHORT $L225796
  0001c	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0001f	85 d2		 test	 edx, edx
  00021	75 04		 jne	 SHORT $L230538
  00023	33 c0		 xor	 eax, eax
  00025	eb 08		 jmp	 SHORT $L230539
$L230538:
  00027	8b 41 2c	 mov	 eax, DWORD PTR [ecx+44]
  0002a	2b c2		 sub	 eax, edx
  0002c	c1 f8 02	 sar	 eax, 2
$L230539:
  0002f	3b f0		 cmp	 esi, eax
  00031	7d 0c		 jge	 SHORT $L225796

; 175  : 
; 176  : 	return m_vtmPetVis[nth];

  00033	8b 41 28	 mov	 eax, DWORD PTR [ecx+40]
  00036	8d 04 b0	 lea	 eax, DWORD PTR [eax+esi*4]
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
  0003b	5e		 pop	 esi

; 177  : }

  0003c	c2 04 00	 ret	 4
$L225796:

; 174  : 		return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	5e		 pop	 esi

; 177  : }

  00042	c2 04 00	 ret	 4
?GetVisKeepTime@CPiercing@@QAEJH@Z ENDP			; CPiercing::GetVisKeepTime
_TEXT	ENDS
PUBLIC	??$_Ucopy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKVconst_iterator@01@0PAK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKVconst_iterator@01@0PAK@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$230610 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKVconst_iterator@01@0PAK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$230610[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 805  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@IAEPAKVconst_iterator@01@0PAK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??$_Ucopy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@IAEPAJVconst_iterator@01@0PAJ@Z ; std::vector<long,std::allocator<long> >::_Ucopy<std::vector<long,std::allocator<long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$_Ucopy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@IAEPAJVconst_iterator@01@0PAJ@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$230627 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@IAEPAJVconst_iterator@01@0PAJ@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Ucopy<std::vector<long,std::allocator<long> >::const_iterator>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$230627[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 805  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@IAEPAJVconst_iterator@01@0PAJ@Z ENDP ; std::vector<long,std::allocator<long> >::_Ucopy<std::vector<long,std::allocator<long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L230691
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L230691:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L230724
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L230724:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L230732
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L230732:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L220001

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L220001:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L220003

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L220003:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L220004

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L220004:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L230841
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L230841:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L230842
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L230929:
  0006b	76 6d		 jbe	 SHORT $L230928

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L230893
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L230894

; 599  : 		else if (_Grow(_Num))

$L230842:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L230929
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L230885
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L230885:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L230893:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L230894:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L230901
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L230902
$L230901:
  000b7	8b f8		 mov	 edi, eax
$L230902:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L230925
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L230925:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L230928:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L230951
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L230952
$L230951:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L230952:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L221367
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L230955
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L230956
$L230955:
  00029	8b c8		 mov	 ecx, eax
$L230956:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L221367

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L230968
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L230968:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L221367:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L231066
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L231066:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L231067
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L231147:
  00077	76 68		 jbe	 SHORT $L231144

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L231119
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L231120

; 611  : 
; 612  : 		if (_Grow(_Num))

$L231067:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L231147
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L231110
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L231110:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L231119:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L231120:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L231142
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L231142:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L231144:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCPiercing@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPiercing@@UAEPAXI@Z PROC NEAR			; CPiercing::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CPiercing@@UAE@XZ	; CPiercing::~CPiercing
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L231151
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L231151:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCPiercing@@UAEPAXI@Z ENDP				; CPiercing::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L231225:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L231225
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T231329 DD	0ffffffffH
	DD	FLAT:$L231229
$T231327 DD	019930520H
	DD	01H
	DD	FLAT:$T231329
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L231229:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T231327
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L231339
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L231339:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L231428
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L231428:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L231521:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L231521
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T231642 DD	0ffffffffH
	DD	FLAT:$L231527
$T231639 DD	019930520H
	DD	01H
	DD	FLAT:$T231642
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T231526 = -80						; size = 28
$T231525 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T231526[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T231526[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T231526[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T231526[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T231526[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T231525[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T231525[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T231525[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L231643:
$L231641:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L231527:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T231526[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T231639
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T231749 DD	0ffffffffH
	DD	FLAT:$L231649
$T231747 DD	019930520H
	DD	01H
	DD	FLAT:$T231749
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L231649:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T231747
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ ; std::vector<long,std::allocator<long> >::_Xlen
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T231876 DD	0ffffffffH
	DD	FLAT:$L231761
$T231873 DD	019930520H
	DD	01H
	DD	FLAT:$T231876
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T231760 = -80						; size = 28
$T231759 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ PROC NEAR ; std::vector<long,std::allocator<long> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T231760[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T231760[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T231760[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T231760[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T231760[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T231759[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T231759[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T231759[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L231877:
$L231875:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L231761:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T231760[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T231873
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ ENDP	; std::vector<long,std::allocator<long> >::_Xlen
PUBLIC	?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXViterator@12@IABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n
; Function compile flags: /Ogty
;	COMDAT ?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXViterator@12@IABK@Z
_TEXT	SEGMENT
__Newvec$225988 = -4					; size = 4
tv393 = 8						; size = 4
__Where$ = 8						; size = 4
tv382 = 12						; size = 4
__Count$ = 12						; size = 4
__Tmp$ = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXViterator@12@IABK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  00001	8b 44 24 10	 mov	 eax, DWORD PTR __Val$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 811  : 		size_type _Capacity = capacity();

  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	85 d2		 test	 edx, edx
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	57		 push	 edi
  00010	89 4c 24 18	 mov	 DWORD PTR __Tmp$[esp+8], ecx
  00014	75 04		 jne	 SHORT $L231893
  00016	33 c0		 xor	 eax, eax
  00018	eb 08		 jmp	 SHORT $L231894
$L231893:
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
$L231894:

; 812  : 
; 813  : 		if (_Count == 0)

  00022	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00026	85 ff		 test	 edi, edi
  00028	0f 84 ac 01 00
	00		 je	 $L226008

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L231916
  00032	33 c9		 xor	 ecx, ecx
  00034	eb 08		 jmp	 SHORT $L231917
$L231916:
  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b ca		 sub	 ecx, edx
  0003b	c1 f9 02	 sar	 ecx, 2
$L231917:
  0003e	53		 push	 ebx
  0003f	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00044	2b d9		 sub	 ebx, ecx
  00046	3b df		 cmp	 ebx, edi
  00048	73 07		 jae	 SHORT $L225984

; 816  : 			_Xlen();	// result too long

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$L232048:
$L225984:

; 817  : 		else if (_Capacity < size() + _Count)

  00051	85 d2		 test	 edx, edx
  00053	75 04		 jne	 SHORT $L231923
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 08		 jmp	 SHORT $L231924
$L231923:
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	2b ca		 sub	 ecx, edx
  0005e	c1 f9 02	 sar	 ecx, 2
$L231924:
  00061	03 cf		 add	 ecx, edi
  00063	3b c1		 cmp	 eax, ecx
  00065	55		 push	 ebp
  00066	0f 83 d6 00 00
	00		 jae	 $L225986

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0006c	8b c8		 mov	 ecx, eax
  0006e	d1 e9		 shr	 ecx, 1
  00070	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00075	2b d9		 sub	 ebx, ecx
  00077	3b d8		 cmp	 ebx, eax
  00079	73 04		 jae	 SHORT $L231883
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 02		 jmp	 SHORT $L231884
$L231883:
  0007f	03 c1		 add	 eax, ecx
$L231884:

; 821  : 			if (_Capacity < size() + _Count)

  00081	85 d2		 test	 edx, edx
  00083	75 04		 jne	 SHORT $L231946
  00085	33 c9		 xor	 ecx, ecx
  00087	eb 08		 jmp	 SHORT $L231947
$L231946:
  00089	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008c	2b ca		 sub	 ecx, edx
  0008e	c1 f9 02	 sar	 ecx, 2
$L231947:
  00091	03 cf		 add	 ecx, edi
  00093	3b c1		 cmp	 eax, ecx
  00095	73 12		 jae	 SHORT $L225987

; 822  : 				_Capacity = size() + _Count;

  00097	85 d2		 test	 edx, edx
  00099	75 04		 jne	 SHORT $L231953
  0009b	33 c0		 xor	 eax, eax
  0009d	eb 08		 jmp	 SHORT $L231954
$L231953:
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	2b c2		 sub	 eax, edx
  000a4	c1 f8 02	 sar	 eax, 2
$L231954:
  000a7	03 c7		 add	 eax, edi
$L225987:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000a9	c1 e0 02	 shl	 eax, 2
  000ac	50		 push	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR tv382[esp+20], eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Where$[esp+20]
  000bd	8b d0		 mov	 edx, eax
  000bf	8b c3		 mov	 eax, ebx
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 02	 sar	 eax, 2
  000c6	8d 2c 85 00 00
	00 00		 lea	 ebp, DWORD PTR [eax*4]
  000cd	55		 push	 ebp
  000ce	51		 push	 ecx
  000cf	52		 push	 edx
  000d0	89 54 24 20	 mov	 DWORD PTR __Newvec$225988[esp+36], edx
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000dc	8d 54 24 20	 lea	 edx, DWORD PTR __Tmp$[esp+16]
  000e0	52		 push	 edx
  000e1	03 c5		 add	 eax, ebp
  000e3	57		 push	 edi
  000e4	50		 push	 eax
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  000ec	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ef	2b cb		 sub	 ecx, ebx
  000f1	c1 f9 02	 sar	 ecx, 2
  000f4	c1 e1 02	 shl	 ecx, 2
  000f7	51		 push	 ecx
  000f8	53		 push	 ebx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _memmove

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 834  : 			_RERAISE;
; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $L232036
  00109	33 c9		 xor	 ecx, ecx
  0010b	eb 08		 jmp	 SHORT $L232037
$L232036:
  0010d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00110	2b c8		 sub	 ecx, eax
  00112	c1 f9 02	 sar	 ecx, 2
$L232037:
  00115	03 f9		 add	 edi, ecx

; 838  : 			if (_Myfirst != 0)

  00117	85 c0		 test	 eax, eax
  00119	74 09		 je	 SHORT $L232039

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$L232039:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00124	8b 44 24 10	 mov	 eax, DWORD PTR __Newvec$225988[esp+20]
  00128	8b 54 24 1c	 mov	 edx, DWORD PTR tv382[esp+16]
  0012c	5d		 pop	 ebp
  0012d	5b		 pop	 ebx

; 844  : 			_Mylast = _Newvec + _Count;

  0012e	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00131	03 d0		 add	 edx, eax
  00133	5f		 pop	 edi
  00134	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00137	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  0013a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0013d	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  0013e	59		 pop	 ecx
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$L225986:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00142	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  00145	8b 5c 24 18	 mov	 ebx, DWORD PTR __Where$[esp+16]
  00149	8b d5		 mov	 edx, ebp
  0014b	2b d3		 sub	 edx, ebx
  0014d	c1 fa 02	 sar	 edx, 2
  00150	3b d7		 cmp	 edx, edi

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00152	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00159	8b ce		 mov	 ecx, esi
  0015b	89 44 24 18	 mov	 DWORD PTR tv393[esp+16], eax
  0015f	73 4b		 jae	 SHORT $L225999
  00161	03 c3		 add	 eax, ebx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	53		 push	 ebx
  00166	e8 00 00 00 00	 call	 ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0016b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0016e	8b d0		 mov	 edx, eax
  00170	2b d3		 sub	 edx, ebx
  00172	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00176	51		 push	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	2b fa		 sub	 edi, edx
  0017c	57		 push	 edi
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ?_Ufill@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAKIABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 44 24 18	 mov	 eax, DWORD PTR tv393[esp+16]
  0018c	03 c8		 add	 ecx, eax
  0018e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00191	8b f1		 mov	 esi, ecx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00197	51		 push	 ecx
  00198	2b f0		 sub	 esi, eax
  0019a	56		 push	 esi
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??$fill@PAKK@std@@YAXPAK0ABK@Z ; std::fill<unsigned long *,unsigned long>
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	5d		 pop	 ebp
  001a5	5b		 pop	 ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001a8	59		 pop	 ecx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
$L225999:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  001ac	55		 push	 ebp
  001ad	8b fd		 mov	 edi, ebp
  001af	2b f8		 sub	 edi, eax
  001b1	55		 push	 ebp
  001b2	57		 push	 edi
  001b3	e8 00 00 00 00	 call	 ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  001b8	55		 push	 ebp
  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001be	e8 00 00 00 00	 call	 ??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z ; std::copy_backward<unsigned long *,unsigned long *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  001c3	8b 44 24 24	 mov	 eax, DWORD PTR tv393[esp+28]
  001c7	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$[esp+28]
  001cb	52		 push	 edx
  001cc	03 c3		 add	 eax, ebx
  001ce	50		 push	 eax
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$fill@PAKK@std@@YAXPAK0ABK@Z ; std::fill<unsigned long *,unsigned long>
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
$L226008:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001dc	59		 pop	 ecx
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$L232047:
?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXViterator@12@IABK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@JV?$allocator@J@std@@@std@@IAE_NI@Z ; std::vector<long,std::allocator<long> >::_Buy
; Function compile flags: /Ogty
;	COMDAT ?_Buy@?$vector@JV?$allocator@J@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@JV?$allocator@J@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L226019

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L226019:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L226021

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ ; std::vector<long,std::allocator<long> >::_Xlen
$L232077:
$L226021:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L232076:
?_Buy@?$vector@JV?$allocator@J@std@@@std@@IAE_NI@Z ENDP	; std::vector<long,std::allocator<long> >::_Buy
_TEXT	ENDS
PUBLIC	??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
xdata$x	SEGMENT
$T232400 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T232402 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L232086
$T232403 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L232088
$T232401 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T232402
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T232403
$T232397 DD	019930520H
	DD	04H
	DD	FLAT:$T232400
	DD	02H
	DD	FLAT:$T232401
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Newvec$227181 = -28					; size = 4
tv446 = -24						; size = 4
__Count$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
tv470 = 8						; size = 4
tv457 = 8						; size = 4
__Where$ = 8						; size = 4
__Cat$232245 = 12					; size = 1
__Cat$232392 = 12					; size = 1
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>, COMDAT
; _this$ = ecx

; 653  : 		void _Insert(iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b f1		 mov	 esi, ecx

; 654  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 655  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 656  : 		size_type _Count = 0;
; 657  : 		_Distance(_First, _Last, _Count);

  0001f	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]

; 658  : 		size_type _Capacity = capacity();

  00022	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00025	57		 push	 edi
  00026	2b 4d 0c	 sub	 ecx, DWORD PTR __First$[ebp]
  00029	c1 f9 02	 sar	 ecx, 2
  0002c	85 d2		 test	 edx, edx
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d ec	 mov	 DWORD PTR __Count$[ebp], ecx
  00034	75 04		 jne	 SHORT $L232120
  00036	33 c0		 xor	 eax, eax
  00038	eb 08		 jmp	 SHORT $L232121
$L232120:
  0003a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003d	2b c2		 sub	 eax, edx
  0003f	c1 f8 02	 sar	 eax, 2
$L232121:

; 659  : 
; 660  : 		if (_Count == 0)

  00042	85 c9		 test	 ecx, ecx
  00044	0f 84 ee 01 00
	00		 je	 $L227210

; 661  : 			;
; 662  : 		else if (max_size() - size() < _Count)

  0004a	85 d2		 test	 edx, edx
  0004c	75 04		 jne	 SHORT $L232144
  0004e	33 ff		 xor	 edi, edi
  00050	eb 08		 jmp	 SHORT $L232145
$L232144:
  00052	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00055	2b fa		 sub	 edi, edx
  00057	c1 ff 02	 sar	 edi, 2
$L232145:
  0005a	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  0005f	2b df		 sub	 ebx, edi
  00061	3b d9		 cmp	 ebx, ecx
  00063	73 07		 jae	 SHORT $L227177

; 663  : 			_Xlen();	// result too long

  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$L232404:
$L227177:

; 664  : 		else if (_Capacity < size() + _Count)

  0006c	85 d2		 test	 edx, edx
  0006e	75 04		 jne	 SHORT $L232151
  00070	33 ff		 xor	 edi, edi
  00072	eb 08		 jmp	 SHORT $L232152
$L232151:
  00074	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00077	2b fa		 sub	 edi, edx
  00079	c1 ff 02	 sar	 edi, 2
$L232152:
  0007c	03 f9		 add	 edi, ecx
  0007e	3b c7		 cmp	 eax, edi
  00080	0f 83 fe 00 00
	00		 jae	 $L227179

; 665  : 			{	// not enough room, reallocate
; 666  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 667  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00086	8b f8		 mov	 edi, eax
  00088	d1 ef		 shr	 edi, 1
  0008a	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  0008f	2b df		 sub	 ebx, edi
  00091	3b d8		 cmp	 ebx, eax
  00093	73 04		 jae	 SHORT $L232081
  00095	33 c0		 xor	 eax, eax
  00097	eb 02		 jmp	 SHORT $L232082
$L232081:
  00099	03 c7		 add	 eax, edi
$L232082:

; 668  : 			if (_Capacity < size() + _Count)

  0009b	85 d2		 test	 edx, edx
  0009d	75 04		 jne	 SHORT $L232174
  0009f	33 ff		 xor	 edi, edi
  000a1	eb 08		 jmp	 SHORT $L232175
$L232174:
  000a3	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  000a6	2b fa		 sub	 edi, edx
  000a8	c1 ff 02	 sar	 edi, 2
$L232175:
  000ab	03 f9		 add	 edi, ecx
  000ad	3b c7		 cmp	 eax, edi
  000af	73 12		 jae	 SHORT $L227180

; 669  : 				_Capacity = size() + _Count;

  000b1	85 d2		 test	 edx, edx
  000b3	75 04		 jne	 SHORT $L232181
  000b5	33 c0		 xor	 eax, eax
  000b7	eb 08		 jmp	 SHORT $L232182
$L232181:
  000b9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bc	2b c2		 sub	 eax, edx
  000be	c1 f8 02	 sar	 eax, 2
$L232182:
  000c1	03 c1		 add	 eax, ecx
$L227180:

; 670  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c3	c1 e0 02	 shl	 eax, 2
  000c6	50		 push	 eax
  000c7	89 45 e8	 mov	 DWORD PTR tv446[ebp], eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 671  : 			pointer _Ptr = _Newvec;
; 672  : 
; 673  : 			_TRY_BEGIN
; 674  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 675  : 				_Newvec);	// copy prefix

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d2	8b d8		 mov	 ebx, eax
  000d4	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  000d7	2b c1		 sub	 eax, ecx
  000d9	c1 f8 02	 sar	 eax, 2
  000dc	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  000e3	57		 push	 edi
  000e4	51		 push	 ecx
  000e5	53		 push	 ebx
  000e6	89 5d e4	 mov	 DWORD PTR __Newvec$227181[ebp], ebx
  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000f0	e8 00 00 00 00	 call	 _memmove

; 676  : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff

  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$232245[ebp]
  000f8	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  000fb	51		 push	 ecx
  000fc	03 c7		 add	 eax, edi
  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00103	52		 push	 edx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >

; 677  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  0010a	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  0010d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00110	2b d1		 sub	 edx, ecx
  00112	c1 fa 02	 sar	 edx, 2
  00115	83 c4 24	 add	 esp, 36			; 00000024H
  00118	c1 e2 02	 shl	 edx, 2
  0011b	52		 push	 edx
  0011c	51		 push	 ecx
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _memmove

; 682  : 			_CATCH_END
; 683  : 
; 684  : 			_Count += size();

  00123	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH
  00129	85 c9		 test	 ecx, ecx
  0012b	75 04		 jne	 SHORT $L232288
  0012d	33 c0		 xor	 eax, eax
  0012f	eb 08		 jmp	 SHORT $L232289
$L232288:
  00131	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00134	2b c1		 sub	 eax, ecx
  00136	c1 f8 02	 sar	 eax, 2
$L232289:
  00139	8b 7d ec	 mov	 edi, DWORD PTR __Count$[ebp]
  0013c	03 f8		 add	 edi, eax

; 685  : 			if (_Myfirst != 0)

  0013e	85 c9		 test	 ecx, ecx
  00140	74 09		 je	 SHORT $L232291

; 686  : 				{	// destroy and deallocate old array
; 687  : 				_Destroy(_Myfirst, _Mylast);
; 688  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00148	83 c4 04	 add	 esp, 4
$L232291:

; 689  : 				}
; 690  : 			_Myend = _Newvec + _Capacity;

  0014b	8b 45 e8	 mov	 eax, DWORD PTR tv446[ebp]
  0014e	03 c3		 add	 eax, ebx

; 691  : 			_Mylast = _Newvec + _Count;

  00150	8d 0c bb	 lea	 ecx, DWORD PTR [ebx+edi*4]
  00153	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00156	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 692  : 			_Myfirst = _Newvec;

  00159	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 719  : 			}
; 720  : 		}

  0015c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 10 00	 ret	 16			; 00000010H
$L232086:

; 678  : 			_CATCH_ALL
; 679  : 			_Destroy(_Newvec, _Ptr);
; 680  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  0016f	8b 55 e4	 mov	 edx, DWORD PTR __Newvec$227181[ebp]
  00172	52		 push	 edx
  00173	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00178	83 c4 04	 add	 esp, 4
$L232088:

; 681  : 			_RERAISE;

  0017b	6a 00		 push	 0
  0017d	6a 00		 push	 0
  0017f	e8 00 00 00 00	 call	 __CxxThrowException@8
$L232405:
$L227179:

; 693  : 			}
; 694  : 		else if ((size_type)(end() - _Where) < _Count)

  00184	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00187	8b 7d 08	 mov	 edi, DWORD PTR __Where$[ebp]
  0018a	8b c3		 mov	 eax, ebx
  0018c	2b c7		 sub	 eax, edi
  0018e	c1 f8 02	 sar	 eax, 2
  00191	3b c1		 cmp	 eax, ecx
  00193	73 6c		 jae	 SHORT $L227193

; 695  : 			{	// new stuff spills off end
; 696  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 697  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00195	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0019c	89 45 08	 mov	 DWORD PTR tv457[ebp], eax
  0019f	03 c7		 add	 eax, edi
  001a1	50		 push	 eax
  001a2	53		 push	 ebx
  001a3	57		 push	 edi
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>

; 698  : 			_Iter _Mid = _First;
; 699  : 			advance(_Mid, end() - _Where);

  001ab	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ae	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  001b1	8b c8		 mov	 ecx, eax
  001b3	2b cf		 sub	 ecx, edi
  001b5	c1 f9 02	 sar	 ecx, 2
  001b8	8d 1c 8a	 lea	 ebx, DWORD PTR [edx+ecx*4]

; 700  : 
; 701  : 			_TRY_BEGIN
; 702  : 			_Ucopy(_Mid, _Last, _Mylast);	// insert new stuff off end

  001bb	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$232392[ebp]
  001be	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  001c1	51		 push	 ecx
  001c2	56		 push	 esi
  001c3	50		 push	 eax
  001c4	52		 push	 edx
  001c5	53		 push	 ebx
  001c6	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  001cd	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAKV?$allocator@K@3@@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAKAAV?$allocator@K@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *,std::allocator<unsigned long> >

; 703  : 			_CATCH_ALL
; 704  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 705  : 			_RERAISE;
; 706  : 			_CATCH_END
; 707  : 
; 708  : 			_Mylast += _Count;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	8b 45 08	 mov	 eax, DWORD PTR tv457[ebp]
  001d8	83 c4 14	 add	 esp, 20			; 00000014H
  001db	03 c8		 add	 ecx, eax

; 709  : 			copy(_First, _Mid, _ITER_BASE(_Where));	// insert to old end

  001dd	57		 push	 edi
  001de	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  001e1	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  001e4	53		 push	 ebx
  001e5	51		 push	 ecx
  001e6	e8 00 00 00 00	 call	 ??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z ; std::copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
  001eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 719  : 			}
; 720  : 		}

  001ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 10 00	 ret	 16			; 00000010H
$L227193:

; 710  : 			}
; 711  : 		else
; 712  : 			{	// new stuff can all be assigned
; 713  : 			pointer _Oldend = _Mylast;
; 714  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 715  : 				_Mylast);	// copy suffix

  00201	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00208	53		 push	 ebx
  00209	8b c3		 mov	 eax, ebx
  0020b	2b c2		 sub	 eax, edx
  0020d	53		 push	 ebx
  0020e	50		 push	 eax
  0020f	8b ce		 mov	 ecx, esi
  00211	89 45 08	 mov	 DWORD PTR tv470[ebp], eax
  00214	e8 00 00 00 00	 call	 ??$_Ucopy@PAK@?$vector@KV?$allocator@K@std@@@std@@IAEPAKPAK00@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Ucopy<unsigned long *>
  00219	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 716  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 717  : 				_Oldend);	// copy hole

  0021c	8b 45 08	 mov	 eax, DWORD PTR tv470[ebp]
  0021f	53		 push	 ebx
  00220	50		 push	 eax
  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??$copy_backward@PAKPAK@std@@YAPAKPAK00@Z ; std::copy_backward<unsigned long *,unsigned long *>

; 718  : 			copy(_First, _Last, _ITER_BASE(_Where));	// insert into hole

  00227	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0022a	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0022d	57		 push	 edi
  0022e	51		 push	 ecx
  0022f	52		 push	 edx
  00230	e8 00 00 00 00	 call	 ??$copy@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@PAK@std@@YAPAKVconst_iterator@?$vector@KV?$allocator@K@std@@@0@0PAK@Z ; std::copy<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator,unsigned long *>
  00235	83 c4 18	 add	 esp, 24			; 00000018H
$L227210:

; 719  : 			}
; 720  : 		}

  00238	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 10 00	 ret	 16			; 00000010H
$L232399:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T232397
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
PUBLIC	??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
xdata$x	SEGMENT
$T232729 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T232731 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L232415
$T232732 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L232417
$T232730 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T232731
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T232732
$T232726 DD	019930520H
	DD	04H
	DD	FLAT:$T232729
	DD	02H
	DD	FLAT:$T232730
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
_TEXT	SEGMENT
__Newvec$227229 = -28					; size = 4
tv446 = -24						; size = 4
__Count$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
tv470 = 8						; size = 4
tv457 = 8						; size = 4
__Where$ = 8						; size = 4
__Cat$232573 = 12					; size = 1
__Cat$232721 = 12					; size = 1
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>, COMDAT
; _this$ = ecx

; 653  : 		void _Insert(iterator _Where,

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	8b f1		 mov	 esi, ecx

; 654  : 			_Iter _First, _Iter _Last, forward_iterator_tag)
; 655  : 		{	// insert [_First, _Last) at _Where, forward iterators
; 656  : 		size_type _Count = 0;
; 657  : 		_Distance(_First, _Last, _Count);

  0001f	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]

; 658  : 		size_type _Capacity = capacity();

  00022	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00025	57		 push	 edi
  00026	2b 4d 0c	 sub	 ecx, DWORD PTR __First$[ebp]
  00029	c1 f9 02	 sar	 ecx, 2
  0002c	85 d2		 test	 edx, edx
  0002e	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00031	89 4d ec	 mov	 DWORD PTR __Count$[ebp], ecx
  00034	75 04		 jne	 SHORT $L232450
  00036	33 c0		 xor	 eax, eax
  00038	eb 08		 jmp	 SHORT $L232451
$L232450:
  0003a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0003d	2b c2		 sub	 eax, edx
  0003f	c1 f8 02	 sar	 eax, 2
$L232451:

; 659  : 
; 660  : 		if (_Count == 0)

  00042	85 c9		 test	 ecx, ecx
  00044	0f 84 ee 01 00
	00		 je	 $L227258

; 661  : 			;
; 662  : 		else if (max_size() - size() < _Count)

  0004a	85 d2		 test	 edx, edx
  0004c	75 04		 jne	 SHORT $L232472
  0004e	33 ff		 xor	 edi, edi
  00050	eb 08		 jmp	 SHORT $L232473
$L232472:
  00052	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00055	2b fa		 sub	 edi, edx
  00057	c1 ff 02	 sar	 edi, 2
$L232473:
  0005a	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  0005f	2b df		 sub	 ebx, edi
  00061	3b d9		 cmp	 ebx, ecx
  00063	73 07		 jae	 SHORT $L227225

; 663  : 			_Xlen();	// result too long

  00065	8b ce		 mov	 ecx, esi
  00067	e8 00 00 00 00	 call	 ?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ ; std::vector<long,std::allocator<long> >::_Xlen
$L232733:
$L227225:

; 664  : 		else if (_Capacity < size() + _Count)

  0006c	85 d2		 test	 edx, edx
  0006e	75 04		 jne	 SHORT $L232479
  00070	33 ff		 xor	 edi, edi
  00072	eb 08		 jmp	 SHORT $L232480
$L232479:
  00074	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00077	2b fa		 sub	 edi, edx
  00079	c1 ff 02	 sar	 edi, 2
$L232480:
  0007c	03 f9		 add	 edi, ecx
  0007e	3b c7		 cmp	 eax, edi
  00080	0f 83 fe 00 00
	00		 jae	 $L227227

; 665  : 			{	// not enough room, reallocate
; 666  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 667  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  00086	8b f8		 mov	 edi, eax
  00088	d1 ef		 shr	 edi, 1
  0008a	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  0008f	2b df		 sub	 ebx, edi
  00091	3b d8		 cmp	 ebx, eax
  00093	73 04		 jae	 SHORT $L232410
  00095	33 c0		 xor	 eax, eax
  00097	eb 02		 jmp	 SHORT $L232411
$L232410:
  00099	03 c7		 add	 eax, edi
$L232411:

; 668  : 			if (_Capacity < size() + _Count)

  0009b	85 d2		 test	 edx, edx
  0009d	75 04		 jne	 SHORT $L232502
  0009f	33 ff		 xor	 edi, edi
  000a1	eb 08		 jmp	 SHORT $L232503
$L232502:
  000a3	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  000a6	2b fa		 sub	 edi, edx
  000a8	c1 ff 02	 sar	 edi, 2
$L232503:
  000ab	03 f9		 add	 edi, ecx
  000ad	3b c7		 cmp	 eax, edi
  000af	73 12		 jae	 SHORT $L227228

; 669  : 				_Capacity = size() + _Count;

  000b1	85 d2		 test	 edx, edx
  000b3	75 04		 jne	 SHORT $L232509
  000b5	33 c0		 xor	 eax, eax
  000b7	eb 08		 jmp	 SHORT $L232510
$L232509:
  000b9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bc	2b c2		 sub	 eax, edx
  000be	c1 f8 02	 sar	 eax, 2
$L232510:
  000c1	03 c1		 add	 eax, ecx
$L227228:

; 670  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000c3	c1 e0 02	 shl	 eax, 2
  000c6	50		 push	 eax
  000c7	89 45 e8	 mov	 DWORD PTR tv446[ebp], eax
  000ca	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 671  : 			pointer _Ptr = _Newvec;
; 672  : 
; 673  : 			_TRY_BEGIN
; 674  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 675  : 				_Newvec);	// copy prefix

  000cf	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d2	8b d8		 mov	 ebx, eax
  000d4	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  000d7	2b c1		 sub	 eax, ecx
  000d9	c1 f8 02	 sar	 eax, 2
  000dc	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  000e3	57		 push	 edi
  000e4	51		 push	 ecx
  000e5	53		 push	 ebx
  000e6	89 5d e4	 mov	 DWORD PTR __Newvec$227229[ebp], ebx
  000e9	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  000f0	e8 00 00 00 00	 call	 _memmove

; 676  : 			_Ptr = _Ucopy(_First, _Last, _Ptr);	// add new stuff

  000f5	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$232573[ebp]
  000f8	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  000fb	51		 push	 ecx
  000fc	03 c7		 add	 eax, edi
  000fe	56		 push	 esi
  000ff	50		 push	 eax
  00100	8b 45 0c	 mov	 eax, DWORD PTR __First$[ebp]
  00103	52		 push	 edx
  00104	50		 push	 eax
  00105	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >

; 677  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  0010a	8b 4d 08	 mov	 ecx, DWORD PTR __Where$[ebp]
  0010d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00110	2b d1		 sub	 edx, ecx
  00112	c1 fa 02	 sar	 edx, 2
  00115	83 c4 24	 add	 esp, 36			; 00000024H
  00118	c1 e2 02	 shl	 edx, 2
  0011b	52		 push	 edx
  0011c	51		 push	 ecx
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 _memmove

; 682  : 			_CATCH_END
; 683  : 
; 684  : 			_Count += size();

  00123	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH
  00129	85 c9		 test	 ecx, ecx
  0012b	75 04		 jne	 SHORT $L232616
  0012d	33 c0		 xor	 eax, eax
  0012f	eb 08		 jmp	 SHORT $L232617
$L232616:
  00131	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00134	2b c1		 sub	 eax, ecx
  00136	c1 f8 02	 sar	 eax, 2
$L232617:
  00139	8b 7d ec	 mov	 edi, DWORD PTR __Count$[ebp]
  0013c	03 f8		 add	 edi, eax

; 685  : 			if (_Myfirst != 0)

  0013e	85 c9		 test	 ecx, ecx
  00140	74 09		 je	 SHORT $L232621

; 686  : 				{	// destroy and deallocate old array
; 687  : 				_Destroy(_Myfirst, _Mylast);
; 688  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00142	51		 push	 ecx
  00143	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00148	83 c4 04	 add	 esp, 4
$L232621:

; 689  : 				}
; 690  : 			_Myend = _Newvec + _Capacity;

  0014b	8b 45 e8	 mov	 eax, DWORD PTR tv446[ebp]
  0014e	03 c3		 add	 eax, ebx

; 691  : 			_Mylast = _Newvec + _Count;

  00150	8d 0c bb	 lea	 ecx, DWORD PTR [ebx+edi*4]
  00153	89 46 0c	 mov	 DWORD PTR [esi+12], eax
  00156	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 692  : 			_Myfirst = _Newvec;

  00159	89 5e 04	 mov	 DWORD PTR [esi+4], ebx

; 719  : 			}
; 720  : 		}

  0015c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0015f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00166	5f		 pop	 edi
  00167	5e		 pop	 esi
  00168	5b		 pop	 ebx
  00169	8b e5		 mov	 esp, ebp
  0016b	5d		 pop	 ebp
  0016c	c2 10 00	 ret	 16			; 00000010H
$L232415:

; 678  : 			_CATCH_ALL
; 679  : 			_Destroy(_Newvec, _Ptr);
; 680  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  0016f	8b 55 e4	 mov	 edx, DWORD PTR __Newvec$227229[ebp]
  00172	52		 push	 edx
  00173	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00178	83 c4 04	 add	 esp, 4
$L232417:

; 681  : 			_RERAISE;

  0017b	6a 00		 push	 0
  0017d	6a 00		 push	 0
  0017f	e8 00 00 00 00	 call	 __CxxThrowException@8
$L232734:
$L227227:

; 693  : 			}
; 694  : 		else if ((size_type)(end() - _Where) < _Count)

  00184	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  00187	8b 7d 08	 mov	 edi, DWORD PTR __Where$[ebp]
  0018a	8b c3		 mov	 eax, ebx
  0018c	2b c7		 sub	 eax, edi
  0018e	c1 f8 02	 sar	 eax, 2
  00191	3b c1		 cmp	 eax, ecx
  00193	73 6c		 jae	 SHORT $L227241

; 695  : 			{	// new stuff spills off end
; 696  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 697  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00195	8d 04 8d 00 00
	00 00		 lea	 eax, DWORD PTR [ecx*4]
  0019c	89 45 08	 mov	 DWORD PTR tv457[ebp], eax
  0019f	03 c7		 add	 eax, edi
  001a1	50		 push	 eax
  001a2	53		 push	 ebx
  001a3	57		 push	 edi
  001a4	8b ce		 mov	 ecx, esi
  001a6	e8 00 00 00 00	 call	 ??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z ; std::vector<long,std::allocator<long> >::_Ucopy<long *>

; 698  : 			_Iter _Mid = _First;
; 699  : 			advance(_Mid, end() - _Where);

  001ab	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ae	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  001b1	8b c8		 mov	 ecx, eax
  001b3	2b cf		 sub	 ecx, edi
  001b5	c1 f9 02	 sar	 ecx, 2
  001b8	8d 1c 8a	 lea	 ebx, DWORD PTR [edx+ecx*4]

; 700  : 
; 701  : 			_TRY_BEGIN
; 702  : 			_Ucopy(_Mid, _Last, _Mylast);	// insert new stuff off end

  001bb	8b 4d 0c	 mov	 ecx, DWORD PTR __Cat$232721[ebp]
  001be	8b 55 10	 mov	 edx, DWORD PTR __Last$[ebp]
  001c1	51		 push	 ecx
  001c2	56		 push	 esi
  001c3	50		 push	 eax
  001c4	52		 push	 edx
  001c5	53		 push	 ebx
  001c6	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  001cd	e8 00 00 00 00	 call	 ??$_Uninit_copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJV?$allocator@J@3@@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJAAV?$allocator@J@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<std::vector<long,std::allocator<long> >::const_iterator,long *,std::allocator<long> >

; 703  : 			_CATCH_ALL
; 704  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 705  : 			_RERAISE;
; 706  : 			_CATCH_END
; 707  : 
; 708  : 			_Mylast += _Count;

  001d2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001d5	8b 45 08	 mov	 eax, DWORD PTR tv457[ebp]
  001d8	83 c4 14	 add	 esp, 20			; 00000014H
  001db	03 c8		 add	 ecx, eax

; 709  : 			copy(_First, _Mid, _ITER_BASE(_Where));	// insert to old end

  001dd	57		 push	 edi
  001de	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  001e1	8b 4d 0c	 mov	 ecx, DWORD PTR __First$[ebp]
  001e4	53		 push	 ebx
  001e5	51		 push	 ecx
  001e6	e8 00 00 00 00	 call	 ??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z ; std::copy<std::vector<long,std::allocator<long> >::const_iterator,long *>
  001eb	83 c4 0c	 add	 esp, 12			; 0000000cH

; 719  : 			}
; 720  : 		}

  001ee	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001f1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001f8	5f		 pop	 edi
  001f9	5e		 pop	 esi
  001fa	5b		 pop	 ebx
  001fb	8b e5		 mov	 esp, ebp
  001fd	5d		 pop	 ebp
  001fe	c2 10 00	 ret	 16			; 00000010H
$L227241:

; 710  : 			}
; 711  : 		else
; 712  : 			{	// new stuff can all be assigned
; 713  : 			pointer _Oldend = _Mylast;
; 714  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 715  : 				_Mylast);	// copy suffix

  00201	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  00208	53		 push	 ebx
  00209	8b c3		 mov	 eax, ebx
  0020b	2b c2		 sub	 eax, edx
  0020d	53		 push	 ebx
  0020e	50		 push	 eax
  0020f	8b ce		 mov	 ecx, esi
  00211	89 45 08	 mov	 DWORD PTR tv470[ebp], eax
  00214	e8 00 00 00 00	 call	 ??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z ; std::vector<long,std::allocator<long> >::_Ucopy<long *>
  00219	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 716  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 717  : 				_Oldend);	// copy hole

  0021c	8b 45 08	 mov	 eax, DWORD PTR tv470[ebp]
  0021f	53		 push	 ebx
  00220	50		 push	 eax
  00221	57		 push	 edi
  00222	e8 00 00 00 00	 call	 ??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z ; std::copy_backward<long *,long *>

; 718  : 			copy(_First, _Last, _ITER_BASE(_Where));	// insert into hole

  00227	8b 4d 10	 mov	 ecx, DWORD PTR __Last$[ebp]
  0022a	8b 55 0c	 mov	 edx, DWORD PTR __First$[ebp]
  0022d	57		 push	 edi
  0022e	51		 push	 ecx
  0022f	52		 push	 edx
  00230	e8 00 00 00 00	 call	 ??$copy@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@PAJ@std@@YAPAJVconst_iterator@?$vector@JV?$allocator@J@std@@@0@0PAJ@Z ; std::copy<std::vector<long,std::allocator<long> >::const_iterator,long *>
  00235	83 c4 18	 add	 esp, 24			; 00000018H
$L227258:

; 719  : 			}
; 720  : 		}

  00238	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0023b	5f		 pop	 edi
  0023c	5e		 pop	 esi
  0023d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00244	5b		 pop	 ebx
  00245	8b e5		 mov	 esp, ebp
  00247	5d		 pop	 ebp
  00248	c2 10 00	 ret	 16			; 00000010H
$L232728:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T232726
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ENDP ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>
PUBLIC	?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy
; Function compile flags: /Ogty
;	COMDAT ?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L220539

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L220539:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L220541

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@KV?$allocator@K@std@@@std@@IBEXXZ ; std::vector<unsigned long,std::allocator<unsigned long> >::_Xlen
$L232764:
$L220541:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L232763:
?_Buy@?$vector@KV?$allocator@K@std@@@std@@IAE_NI@Z ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@JV?$allocator@J@std@@@std@@IAEXViterator@12@IABJ@Z ; std::vector<long,std::allocator<long> >::_Insert_n
; Function compile flags: /Ogty
;	COMDAT ?_Insert_n@?$vector@JV?$allocator@J@std@@@std@@IAEXViterator@12@IABJ@Z
_TEXT	SEGMENT
__Newvec$221171 = -4					; size = 4
tv393 = 8						; size = 4
__Where$ = 8						; size = 4
tv382 = 12						; size = 4
__Count$ = 12						; size = 4
__Tmp$ = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@JV?$allocator@J@std@@@std@@IAEXViterator@12@IABJ@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  00001	8b 44 24 10	 mov	 eax, DWORD PTR __Val$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 811  : 		size_type _Capacity = capacity();

  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	85 d2		 test	 edx, edx
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	57		 push	 edi
  00010	89 4c 24 18	 mov	 DWORD PTR __Tmp$[esp+8], ecx
  00014	75 04		 jne	 SHORT $L232778
  00016	33 c0		 xor	 eax, eax
  00018	eb 08		 jmp	 SHORT $L232779
$L232778:
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
$L232779:

; 812  : 
; 813  : 		if (_Count == 0)

  00022	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00026	85 ff		 test	 edi, edi
  00028	0f 84 ac 01 00
	00		 je	 $L221191

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L232801
  00032	33 c9		 xor	 ecx, ecx
  00034	eb 08		 jmp	 SHORT $L232802
$L232801:
  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b ca		 sub	 ecx, edx
  0003b	c1 f9 02	 sar	 ecx, 2
$L232802:
  0003e	53		 push	 ebx
  0003f	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00044	2b d9		 sub	 ebx, ecx
  00046	3b df		 cmp	 ebx, edi
  00048	73 07		 jae	 SHORT $L221167

; 816  : 			_Xlen();	// result too long

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@JV?$allocator@J@std@@@std@@IBEXXZ ; std::vector<long,std::allocator<long> >::_Xlen
$L232933:
$L221167:

; 817  : 		else if (_Capacity < size() + _Count)

  00051	85 d2		 test	 edx, edx
  00053	75 04		 jne	 SHORT $L232808
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 08		 jmp	 SHORT $L232809
$L232808:
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	2b ca		 sub	 ecx, edx
  0005e	c1 f9 02	 sar	 ecx, 2
$L232809:
  00061	03 cf		 add	 ecx, edi
  00063	3b c1		 cmp	 eax, ecx
  00065	55		 push	 ebp
  00066	0f 83 d6 00 00
	00		 jae	 $L221169

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0006c	8b c8		 mov	 ecx, eax
  0006e	d1 e9		 shr	 ecx, 1
  00070	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00075	2b d9		 sub	 ebx, ecx
  00077	3b d8		 cmp	 ebx, eax
  00079	73 04		 jae	 SHORT $L232768
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 02		 jmp	 SHORT $L232769
$L232768:
  0007f	03 c1		 add	 eax, ecx
$L232769:

; 821  : 			if (_Capacity < size() + _Count)

  00081	85 d2		 test	 edx, edx
  00083	75 04		 jne	 SHORT $L232831
  00085	33 c9		 xor	 ecx, ecx
  00087	eb 08		 jmp	 SHORT $L232832
$L232831:
  00089	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008c	2b ca		 sub	 ecx, edx
  0008e	c1 f9 02	 sar	 ecx, 2
$L232832:
  00091	03 cf		 add	 ecx, edi
  00093	3b c1		 cmp	 eax, ecx
  00095	73 12		 jae	 SHORT $L221170

; 822  : 				_Capacity = size() + _Count;

  00097	85 d2		 test	 edx, edx
  00099	75 04		 jne	 SHORT $L232838
  0009b	33 c0		 xor	 eax, eax
  0009d	eb 08		 jmp	 SHORT $L232839
$L232838:
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	2b c2		 sub	 eax, edx
  000a4	c1 f8 02	 sar	 eax, 2
$L232839:
  000a7	03 c7		 add	 eax, edi
$L221170:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000a9	c1 e0 02	 shl	 eax, 2
  000ac	50		 push	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR tv382[esp+20], eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Where$[esp+20]
  000bd	8b d0		 mov	 edx, eax
  000bf	8b c3		 mov	 eax, ebx
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 02	 sar	 eax, 2
  000c6	8d 2c 85 00 00
	00 00		 lea	 ebp, DWORD PTR [eax*4]
  000cd	55		 push	 ebp
  000ce	51		 push	 ecx
  000cf	52		 push	 edx
  000d0	89 54 24 20	 mov	 DWORD PTR __Newvec$221171[esp+36], edx
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000dc	8d 54 24 20	 lea	 edx, DWORD PTR __Tmp$[esp+16]
  000e0	52		 push	 edx
  000e1	03 c5		 add	 eax, ebp
  000e3	57		 push	 edi
  000e4	50		 push	 eax
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z ; std::vector<long,std::allocator<long> >::_Ufill

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  000ec	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ef	2b cb		 sub	 ecx, ebx
  000f1	c1 f9 02	 sar	 ecx, 2
  000f4	c1 e1 02	 shl	 ecx, 2
  000f7	51		 push	 ecx
  000f8	53		 push	 ebx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _memmove

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 834  : 			_RERAISE;
; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $L232920
  00109	33 c9		 xor	 ecx, ecx
  0010b	eb 08		 jmp	 SHORT $L232921
$L232920:
  0010d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00110	2b c8		 sub	 ecx, eax
  00112	c1 f9 02	 sar	 ecx, 2
$L232921:
  00115	03 f9		 add	 edi, ecx

; 838  : 			if (_Myfirst != 0)

  00117	85 c0		 test	 eax, eax
  00119	74 09		 je	 SHORT $L232924

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$L232924:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00124	8b 44 24 10	 mov	 eax, DWORD PTR __Newvec$221171[esp+20]
  00128	8b 54 24 1c	 mov	 edx, DWORD PTR tv382[esp+16]
  0012c	5d		 pop	 ebp
  0012d	5b		 pop	 ebx

; 844  : 			_Mylast = _Newvec + _Count;

  0012e	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00131	03 d0		 add	 edx, eax
  00133	5f		 pop	 edi
  00134	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00137	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  0013a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0013d	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  0013e	59		 pop	 ecx
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$L221169:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00142	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  00145	8b 5c 24 18	 mov	 ebx, DWORD PTR __Where$[esp+16]
  00149	8b d5		 mov	 edx, ebp
  0014b	2b d3		 sub	 edx, ebx
  0014d	c1 fa 02	 sar	 edx, 2
  00150	3b d7		 cmp	 edx, edi

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00152	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00159	8b ce		 mov	 ecx, esi
  0015b	89 44 24 18	 mov	 DWORD PTR tv393[esp+16], eax
  0015f	73 4b		 jae	 SHORT $L221182
  00161	03 c3		 add	 eax, ebx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	53		 push	 ebx
  00166	e8 00 00 00 00	 call	 ??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z ; std::vector<long,std::allocator<long> >::_Ucopy<long *>

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0016b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0016e	8b d0		 mov	 edx, eax
  00170	2b d3		 sub	 edx, ebx
  00172	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00176	51		 push	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	2b fa		 sub	 edi, edx
  0017c	57		 push	 edi
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ?_Ufill@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJIABJ@Z ; std::vector<long,std::allocator<long> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 44 24 18	 mov	 eax, DWORD PTR tv393[esp+16]
  0018c	03 c8		 add	 ecx, eax
  0018e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00191	8b f1		 mov	 esi, ecx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00197	51		 push	 ecx
  00198	2b f0		 sub	 esi, eax
  0019a	56		 push	 esi
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??$fill@PAJJ@std@@YAXPAJ0ABJ@Z ; std::fill<long *,long>
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	5d		 pop	 ebp
  001a5	5b		 pop	 ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001a8	59		 pop	 ecx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
$L221182:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  001ac	55		 push	 ebp
  001ad	8b fd		 mov	 edi, ebp
  001af	2b f8		 sub	 edi, eax
  001b1	55		 push	 ebp
  001b2	57		 push	 edi
  001b3	e8 00 00 00 00	 call	 ??$_Ucopy@PAJ@?$vector@JV?$allocator@J@std@@@std@@IAEPAJPAJ00@Z ; std::vector<long,std::allocator<long> >::_Ucopy<long *>

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  001b8	55		 push	 ebp
  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001be	e8 00 00 00 00	 call	 ??$copy_backward@PAJPAJ@std@@YAPAJPAJ00@Z ; std::copy_backward<long *,long *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  001c3	8b 44 24 24	 mov	 eax, DWORD PTR tv393[esp+28]
  001c7	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$[esp+28]
  001cb	52		 push	 edx
  001cc	03 c3		 add	 eax, ebx
  001ce	50		 push	 eax
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$fill@PAJJ@std@@YAXPAJ0ABJ@Z ; std::fill<long *,long>
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
$L221191:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001dc	59		 pop	 ecx
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$L232932:
?_Insert_n@?$vector@JV?$allocator@J@std@@@std@@IAEXViterator@12@IABJ@Z ENDP ; std::vector<long,std::allocator<long> >::_Insert_n
_TEXT	ENDS
PUBLIC	?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::resize
; Function compile flags: /Ogty
;	COMDAT ?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::resize, COMDAT
; _this$ = ecx

; 507  : 		{	// determine new length, padding with _Val elements as needed

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 508  : 		if (size() < _Newsize)

  00003	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00006	85 d2		 test	 edx, edx
  00008	57		 push	 edi
  00009	75 04		 jne	 SHORT $L232946
  0000b	33 c0		 xor	 eax, eax
  0000d	eb 08		 jmp	 SHORT $L232947
$L232946:
  0000f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2
$L232947:
  00017	8b 7c 24 0c	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0001b	3b c7		 cmp	 eax, edi
  0001d	73 28		 jae	 SHORT $L225813

; 509  : 			_Insert_n(end(), _Newsize - size(), _Val);

  0001f	85 d2		 test	 edx, edx
  00021	75 04		 jne	 SHORT $L232953
  00023	33 c0		 xor	 eax, eax
  00025	eb 08		 jmp	 SHORT $L232954
$L232953:
  00027	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002a	2b c2		 sub	 eax, edx
  0002c	c1 f8 02	 sar	 eax, 2
$L232954:
  0002f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00032	8d 54 24 10	 lea	 edx, DWORD PTR __Val$[esp+4]
  00036	52		 push	 edx
  00037	2b f8		 sub	 edi, eax
  00039	57		 push	 edi
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@KV?$allocator@K@std@@@std@@IAEXViterator@12@IABK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert_n
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 512  : 		}

  00044	c2 08 00	 ret	 8
$L225813:

; 510  : 		else if (_Newsize < size())

  00047	85 d2		 test	 edx, edx
  00049	74 33		 je	 SHORT $L233066
  0004b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004e	8b c8		 mov	 ecx, eax
  00050	2b ca		 sub	 ecx, edx
  00052	c1 f9 02	 sar	 ecx, 2
  00055	3b f9		 cmp	 edi, ecx
  00057	73 25		 jae	 SHORT $L233066

; 511  : 			erase(begin() + _Newsize, end());

  00059	8d 14 ba	 lea	 edx, DWORD PTR [edx+edi*4]
  0005c	3b d0		 cmp	 edx, eax
  0005e	74 1e		 je	 SHORT $L233066
  00060	8b c8		 mov	 ecx, eax
  00062	2b c8		 sub	 ecx, eax
  00064	c1 f9 02	 sar	 ecx, 2
  00067	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  0006e	57		 push	 edi
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _memmove
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	03 c7		 add	 eax, edi
  0007b	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L233066:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 512  : 		}

  00080	c2 08 00	 ret	 8
?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::resize
_TEXT	ENDS
PUBLIC	??0?$vector@JV?$allocator@J@std@@@std@@QAE@XZ	; std::vector<long,std::allocator<long> >::vector<long,std::allocator<long> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@JV?$allocator@J@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@JV?$allocator@J@std@@@std@@QAE@XZ PROC NEAR	; std::vector<long,std::allocator<long> >::vector<long,std::allocator<long> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@JV?$allocator@J@std@@@std@@QAE@XZ ENDP	; std::vector<long,std::allocator<long> >::vector<long,std::allocator<long> >
_TEXT	ENDS
PUBLIC	??$insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
$T233134 = 16						; size = 1
__Last$ = 16						; size = 4
??$insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>, COMDAT
; _this$ = ecx

; 633  : 		{	// insert [_First, _Last) at _Where
; 634  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR $T233134[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 0c	 mov	 edx, DWORD PTR __Where$[esp+4]
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>

; 635  : 		}

  00019	c2 0c 00	 ret	 12			; 0000000cH
??$insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??$insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z ; std::vector<long,std::allocator<long> >::insert<std::vector<long,std::allocator<long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z
_TEXT	SEGMENT
__Where$ = 8						; size = 4
__First$ = 12						; size = 4
$T233143 = 16						; size = 1
__Last$ = 16						; size = 4
??$insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z PROC NEAR ; std::vector<long,std::allocator<long> >::insert<std::vector<long,std::allocator<long> >::const_iterator>, COMDAT
; _this$ = ecx

; 633  : 		{	// insert [_First, _Last) at _Where
; 634  : 		_Insert(_Where, _First, _Last, _Iter_cat(_First));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR $T233143[esp-4]
  00004	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp]
  0000d	52		 push	 edx
  0000e	8b 54 24 0c	 mov	 edx, DWORD PTR __Where$[esp+4]
  00012	50		 push	 eax
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>

; 635  : 		}

  00019	c2 0c 00	 ret	 12			; 0000000cH
??$insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1@Z ENDP ; std::vector<long,std::allocator<long> >::insert<std::vector<long,std::allocator<long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ PROC NEAR	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::vector<unsigned long,std::allocator<unsigned long> >::vector<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
PUBLIC	?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z ; std::vector<long,std::allocator<long> >::resize
; Function compile flags: /Ogty
;	COMDAT ?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Val$ = 12						; size = 4
?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z PROC NEAR ; std::vector<long,std::allocator<long> >::resize, COMDAT
; _this$ = ecx

; 507  : 		{	// determine new length, padding with _Val elements as needed

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 508  : 		if (size() < _Newsize)

  00003	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00006	85 d2		 test	 edx, edx
  00008	57		 push	 edi
  00009	75 04		 jne	 SHORT $L233220
  0000b	33 c0		 xor	 eax, eax
  0000d	eb 08		 jmp	 SHORT $L233221
$L233220:
  0000f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00012	2b c2		 sub	 eax, edx
  00014	c1 f8 02	 sar	 eax, 2
$L233221:
  00017	8b 7c 24 0c	 mov	 edi, DWORD PTR __Newsize$[esp+4]
  0001b	3b c7		 cmp	 eax, edi
  0001d	73 28		 jae	 SHORT $L219677

; 509  : 			_Insert_n(end(), _Newsize - size(), _Val);

  0001f	85 d2		 test	 edx, edx
  00021	75 04		 jne	 SHORT $L233227
  00023	33 c0		 xor	 eax, eax
  00025	eb 08		 jmp	 SHORT $L233228
$L233227:
  00027	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0002a	2b c2		 sub	 eax, edx
  0002c	c1 f8 02	 sar	 eax, 2
$L233228:
  0002f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00032	8d 54 24 10	 lea	 edx, DWORD PTR __Val$[esp+4]
  00036	52		 push	 edx
  00037	2b f8		 sub	 edi, eax
  00039	57		 push	 edi
  0003a	51		 push	 ecx
  0003b	8b ce		 mov	 ecx, esi
  0003d	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@JV?$allocator@J@std@@@std@@IAEXViterator@12@IABJ@Z ; std::vector<long,std::allocator<long> >::_Insert_n
  00042	5f		 pop	 edi
  00043	5e		 pop	 esi

; 512  : 		}

  00044	c2 08 00	 ret	 8
$L219677:

; 510  : 		else if (_Newsize < size())

  00047	85 d2		 test	 edx, edx
  00049	74 33		 je	 SHORT $L233340
  0004b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004e	8b c8		 mov	 ecx, eax
  00050	2b ca		 sub	 ecx, edx
  00052	c1 f9 02	 sar	 ecx, 2
  00055	3b f9		 cmp	 edi, ecx
  00057	73 25		 jae	 SHORT $L233340

; 511  : 			erase(begin() + _Newsize, end());

  00059	8d 14 ba	 lea	 edx, DWORD PTR [edx+edi*4]
  0005c	3b d0		 cmp	 edx, eax
  0005e	74 1e		 je	 SHORT $L233340
  00060	8b c8		 mov	 ecx, eax
  00062	2b c8		 sub	 ecx, eax
  00064	c1 f9 02	 sar	 ecx, 2
  00067	8d 3c 8d 00 00
	00 00		 lea	 edi, DWORD PTR [ecx*4]
  0006e	57		 push	 edi
  0006f	50		 push	 eax
  00070	52		 push	 edx
  00071	e8 00 00 00 00	 call	 _memmove
  00076	83 c4 0c	 add	 esp, 12			; 0000000cH
  00079	03 c7		 add	 eax, edi
  0007b	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L233340:
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi

; 512  : 		}

  00080	c2 08 00	 ret	 8
?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z ENDP ; std::vector<long,std::allocator<long> >::resize
_TEXT	ENDS
PUBLIC	??0CPiercing@@QAE@XZ				; CPiercing::CPiercing
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T233609 DD	0ffffffffH
	DD	FLAT:$L233347
	DD	00H
	DD	FLAT:$L233348
$T233607 DD	019930520H
	DD	02H
	DD	FLAT:$T233609
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
xdata$x	ENDS
;	COMDAT ??0CPiercing@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CPiercing@@QAE@XZ PROC NEAR				; CPiercing::CPiercing, COMDAT
; _this$ = ecx

; 6    : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CPiercing@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	8b c1		 mov	 eax, ecx
  00018	33 c9		 xor	 ecx, ecx
  0001a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPiercing@@6B@
  00020	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00023	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00026	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00029	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0002c	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  0002f	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00032	89 48 28	 mov	 DWORD PTR [eax+40], ecx
  00035	89 48 2c	 mov	 DWORD PTR [eax+44], ecx
  00038	89 48 30	 mov	 DWORD PTR [eax+48], ecx

; 7    : }

  0003b	8b 4c 24 04	 mov	 ecx, DWORD PTR __$EHRec$[esp+16]
  0003f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00046	83 c4 10	 add	 esp, 16			; 00000010H
  00049	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L233347:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 04	 add	 ecx, 4
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
$L233348:
  0000b	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  0000e	83 c1 14	 add	 ecx, 20			; 00000014H
  00011	e9 00 00 00 00	 jmp	 ??1?$vector@KV?$allocator@K@std@@@std@@QAE@XZ ; std::vector<unsigned long,std::allocator<unsigned long> >::~vector<unsigned long,std::allocator<unsigned long> >
__ehhandler$??0CPiercing@@QAE@XZ:
  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T233607
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CPiercing@@QAE@XZ ENDP				; CPiercing::CPiercing
PUBLIC	?SetPiercingSize@CPiercing@@QAEXH@Z		; CPiercing::SetPiercingSize
; Function compile flags: /Ogty
;	COMDAT ?SetPiercingSize@CPiercing@@QAEXH@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
?SetPiercingSize@CPiercing@@QAEXH@Z PROC NEAR		; CPiercing::SetPiercingSize, COMDAT
; _this$ = ecx

; 92   : 	if( nSize > MAX_PIERCING_WEAPON )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nSize$[esp-4]
  00004	83 f8 0a	 cmp	 eax, 10			; 0000000aH
  00007	7e 05		 jle	 SHORT $L225743

; 93   : 		nSize = MAX_PIERCING_WEAPON;

  00009	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
$L225743:

; 94   : 
; 95   : 	m_vPiercing.resize( nSize, 0 );

  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	83 c1 04	 add	 ecx, 4
  00014	e8 00 00 00 00	 call	 ?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::resize

; 96   : }

  00019	c2 04 00	 ret	 4
?SetPiercingSize@CPiercing@@QAEXH@Z ENDP		; CPiercing::SetPiercingSize
_TEXT	ENDS
PUBLIC	?SetUltimatePiercingSize@CPiercing@@QAEXH@Z	; CPiercing::SetUltimatePiercingSize
; Function compile flags: /Ogty
;	COMDAT ?SetUltimatePiercingSize@CPiercing@@QAEXH@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
?SetUltimatePiercingSize@CPiercing@@QAEXH@Z PROC NEAR	; CPiercing::SetUltimatePiercingSize, COMDAT
; _this$ = ecx

; 134  : 	if( nSize > MAX_PIERCING_ULTIMATE )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nSize$[esp-4]
  00004	83 f8 05	 cmp	 eax, 5
  00007	7e 05		 jle	 SHORT $L225767

; 135  : 		nSize = MAX_PIERCING_ULTIMATE;

  00009	b8 05 00 00 00	 mov	 eax, 5
$L225767:

; 136  : 
; 137  : 	m_vUltimatePiercing.resize( nSize, 0 );

  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	83 c1 14	 add	 ecx, 20			; 00000014H
  00014	e8 00 00 00 00	 call	 ?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::resize

; 138  : }

  00019	c2 04 00	 ret	 4
?SetUltimatePiercingSize@CPiercing@@QAEXH@Z ENDP	; CPiercing::SetUltimatePiercingSize
_TEXT	ENDS
PUBLIC	??$_Assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T233732 = 12						; size = 1
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>, COMDAT
; _this$ = ecx

; 608  : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 609  : 		{	// assign [_First, _Last), input iterators
; 610  : 		erase(begin(), end());

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00009	3b d1		 cmp	 edx, ecx
  0000b	74 20		 je	 SHORT $L233703
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 c7		 add	 eax, edi
  00029	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002c	5f		 pop	 edi
$L233703:

; 611  : 		insert(begin(), _First, _Last);

  0002d	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T233732[esp]
  00031	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	51		 push	 ecx
  00039	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First$[esp+4]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
  00047	5e		 pop	 esi

; 612  : 		}

  00048	c2 0c 00	 ret	 12			; 0000000cH
??$_Assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::_Assign<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??$_Assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z ; std::vector<long,std::allocator<long> >::_Assign<std::vector<long,std::allocator<long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$_Assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T233853 = 12						; size = 1
__Last$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z PROC NEAR ; std::vector<long,std::allocator<long> >::_Assign<std::vector<long,std::allocator<long> >::const_iterator>, COMDAT
; _this$ = ecx

; 608  : 		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 609  : 		{	// assign [_First, _Last), input iterators
; 610  : 		erase(begin(), end());

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00009	3b d1		 cmp	 edx, ecx
  0000b	74 20		 je	 SHORT $L233824
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 c7		 add	 eax, edi
  00029	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002c	5f		 pop	 edi
$L233824:

; 611  : 		insert(begin(), _First, _Last);

  0002d	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T233853[esp]
  00031	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	51		 push	 ecx
  00039	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First$[esp+4]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>
  00047	5e		 pop	 esi

; 612  : 		}

  00048	c2 0c 00	 ret	 12			; 0000000cH
??$_Assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0Uinput_iterator_tag@1@@Z ENDP ; std::vector<long,std::allocator<long> >::_Assign<std::vector<long,std::allocator<long> >::const_iterator>
_TEXT	ENDS
PUBLIC	?SetVisKeepTimeSize@CPiercing@@QAEXH@Z		; CPiercing::SetVisKeepTimeSize
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.h
;	COMDAT ?SetVisKeepTimeSize@CPiercing@@QAEXH@Z
_TEXT	SEGMENT
_nSize$ = 8						; size = 4
?SetVisKeepTimeSize@CPiercing@@QAEXH@Z PROC NEAR	; CPiercing::SetVisKeepTimeSize, COMDAT
; _this$ = ecx

; 40   : 	void	SetVisKeepTimeSize( int nSize )	{ m_vtmPetVis.resize( min( nSize, MAX_VIS ), 0 ); }

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nSize$[esp-4]
  00004	83 f8 09	 cmp	 eax, 9
  00007	7c 05		 jl	 SHORT $L233864
  00009	b8 09 00 00 00	 mov	 eax, 9
$L233864:
  0000e	6a 00		 push	 0
  00010	50		 push	 eax
  00011	83 c1 24	 add	 ecx, 36			; 00000024H
  00014	e8 00 00 00 00	 call	 ?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z ; std::vector<long,std::allocator<long> >::resize
  00019	c2 04 00	 ret	 4
?SetVisKeepTimeSize@CPiercing@@QAEXH@Z ENDP		; CPiercing::SetVisKeepTimeSize
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
_TEXT	ENDS
;	COMDAT ?Serialize@CPiercing@@UAEXAAVCAr@@@Z
_TEXT	SEGMENT
_i$225726 = -8						; size = 4
_this$ = -4						; size = 4
_nSize$225725 = 8					; size = 4
_ar$ = 8						; size = 4
?Serialize@CPiercing@@UAEXAAVCAr@@@Z PROC NEAR		; CPiercing::Serialize, COMDAT
; _this$ = ecx

; 37   : {

  00000	83 ec 08	 sub	 esp, 8
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi

; 38   : 	if( ar.IsStoring() )

  00006	8b 74 24 18	 mov	 esi, DWORD PTR _ar$[esp+16]
  0000a	33 c0		 xor	 eax, eax
  0000c	8a 06		 mov	 al, BYTE PTR [esi]
  0000e	8b e9		 mov	 ebp, ecx
  00010	57		 push	 edi
  00011	89 6c 24 14	 mov	 DWORD PTR _this$[esp+24], ebp
  00015	f7 d0		 not	 eax
  00017	a8 01		 test	 al, 1
  00019	0f 84 8a 01 00
	00		 je	 $L225710

; 39   : 	{
; 40   : 		ar << GetPiercingSize();

  0001f	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  00022	85 c0		 test	 eax, eax
  00024	75 04		 jne	 SHORT $L233882
  00026	33 ff		 xor	 edi, edi
  00028	eb 08		 jmp	 SHORT $L233883
$L233882:
  0002a	8b 7d 0c	 mov	 edi, DWORD PTR [ebp+12]
  0002d	2b f8		 sub	 edi, eax
  0002f	c1 ff 02	 sar	 edi, 2
$L233883:
  00032	6a 04		 push	 4
  00034	8b ce		 mov	 ecx, esi
  00036	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0003b	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0003e	89 39		 mov	 DWORD PTR [ecx], edi
  00040	83 46 08 04	 add	 DWORD PTR [esi+8], 4

; 41   : 		for( int i = 0; i < GetPiercingSize(); i++ )

  00044	33 db		 xor	 ebx, ebx
$L225712:
  00046	8b 4d 08	 mov	 ecx, DWORD PTR [ebp+8]
  00049	85 c9		 test	 ecx, ecx
  0004b	75 04		 jne	 SHORT $L233906
  0004d	33 c0		 xor	 eax, eax
  0004f	eb 08		 jmp	 SHORT $L233907
$L233906:
  00051	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00054	2b c1		 sub	 eax, ecx
  00056	c1 f8 02	 sar	 eax, 2
$L233907:
  00059	3b d8		 cmp	 ebx, eax
  0005b	7d 39		 jge	 SHORT $L225714

; 42   : 			ar << GetPiercingItem( i );

  0005d	8b 4d 08	 mov	 ecx, DWORD PTR [ebp+8]
  00060	85 c9		 test	 ecx, ecx
  00062	75 04		 jne	 SHORT $L233984
  00064	33 c0		 xor	 eax, eax
  00066	eb 08		 jmp	 SHORT $L233985
$L233984:
  00068	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  0006b	2b c1		 sub	 eax, ecx
  0006d	c1 f8 02	 sar	 eax, 2
$L233985:
  00070	3b d8		 cmp	 ebx, eax
  00072	7c 04		 jl	 SHORT $L233989
  00074	33 ff		 xor	 edi, edi
  00076	eb 09		 jmp	 SHORT $L233988
$L233989:
  00078	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]
  0007b	8b 3c 9a	 mov	 edi, DWORD PTR [edx+ebx*4]
  0007e	8d 04 9a	 lea	 eax, DWORD PTR [edx+ebx*4]
$L233988:
  00081	6a 04		 push	 4
  00083	8b ce		 mov	 ecx, esi
  00085	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0008a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0008d	89 38		 mov	 DWORD PTR [eax], edi
  0008f	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00093	43		 inc	 ebx
  00094	eb b0		 jmp	 SHORT $L225712
$L225714:

; 43   : #if __VER >= 12 // __EXT_PIERCING
; 44   : 		ar << GetUltimatePiercingSize();

  00096	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00099	85 c0		 test	 eax, eax
  0009b	75 04		 jne	 SHORT $L234025
  0009d	33 ff		 xor	 edi, edi
  0009f	eb 08		 jmp	 SHORT $L234026
$L234025:
  000a1	8b 7d 1c	 mov	 edi, DWORD PTR [ebp+28]
  000a4	2b f8		 sub	 edi, eax
  000a6	c1 ff 02	 sar	 edi, 2
$L234026:
  000a9	6a 04		 push	 4
  000ab	8b ce		 mov	 ecx, esi
  000ad	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  000b2	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000b5	89 39		 mov	 DWORD PTR [ecx], edi
  000b7	83 46 08 04	 add	 DWORD PTR [esi+8], 4

; 45   : 		for( int i = 0; i < GetUltimatePiercingSize(); i++ )

  000bb	33 db		 xor	 ebx, ebx
  000bd	8d 49 00	 npad	 3
$L225716:
  000c0	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  000c3	85 c9		 test	 ecx, ecx
  000c5	75 04		 jne	 SHORT $L234049
  000c7	33 c0		 xor	 eax, eax
  000c9	eb 08		 jmp	 SHORT $L234050
$L234049:
  000cb	8b 45 1c	 mov	 eax, DWORD PTR [ebp+28]
  000ce	2b c1		 sub	 eax, ecx
  000d0	c1 f8 02	 sar	 eax, 2
$L234050:
  000d3	3b d8		 cmp	 ebx, eax
  000d5	7d 39		 jge	 SHORT $L225718

; 46   : 			ar << GetUltimatePiercingItem( i );

  000d7	8b 4d 18	 mov	 ecx, DWORD PTR [ebp+24]
  000da	85 c9		 test	 ecx, ecx
  000dc	75 04		 jne	 SHORT $L234130
  000de	33 c0		 xor	 eax, eax
  000e0	eb 08		 jmp	 SHORT $L234131
$L234130:
  000e2	8b 45 1c	 mov	 eax, DWORD PTR [ebp+28]
  000e5	2b c1		 sub	 eax, ecx
  000e7	c1 f8 02	 sar	 eax, 2
$L234131:
  000ea	3b d8		 cmp	 ebx, eax
  000ec	7c 04		 jl	 SHORT $L234124
  000ee	33 ff		 xor	 edi, edi
  000f0	eb 09		 jmp	 SHORT $L234123
$L234124:
  000f2	8b 55 18	 mov	 edx, DWORD PTR [ebp+24]
  000f5	8b 3c 9a	 mov	 edi, DWORD PTR [edx+ebx*4]
  000f8	8d 04 9a	 lea	 eax, DWORD PTR [edx+ebx*4]
$L234123:
  000fb	6a 04		 push	 4
  000fd	8b ce		 mov	 ecx, esi
  000ff	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00104	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00107	89 38		 mov	 DWORD PTR [eax], edi
  00109	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  0010d	43		 inc	 ebx
  0010e	eb b0		 jmp	 SHORT $L225716
$L225718:

; 47   : #endif // __EXT_PIERCING
; 48   : #if __VER >= 15 // __PETVIS
; 49   : 		ar << m_vtmPetVis.size();

  00110	8b 45 28	 mov	 eax, DWORD PTR [ebp+40]
  00113	85 c0		 test	 eax, eax
  00115	75 04		 jne	 SHORT $L234159
  00117	33 ff		 xor	 edi, edi
  00119	eb 08		 jmp	 SHORT $L234160
$L234159:
  0011b	8b 7d 2c	 mov	 edi, DWORD PTR [ebp+44]
  0011e	2b f8		 sub	 edi, eax
  00120	c1 ff 02	 sar	 edi, 2
$L234160:
  00123	6a 04		 push	 4
  00125	8b ce		 mov	 ecx, esi
  00127	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0012c	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0012f	89 39		 mov	 DWORD PTR [ecx], edi
  00131	83 46 08 04	 add	 DWORD PTR [esi+8], 4

; 50   : 		for( int i=0; i<(int)( m_vtmPetVis.size() ); i++ )

  00135	33 db		 xor	 ebx, ebx
$L225721:
  00137	8b 4d 28	 mov	 ecx, DWORD PTR [ebp+40]
  0013a	85 c9		 test	 ecx, ecx
  0013c	75 04		 jne	 SHORT $L234176
  0013e	33 c0		 xor	 eax, eax
  00140	eb 08		 jmp	 SHORT $L234177
$L234176:
  00142	8b 45 2c	 mov	 eax, DWORD PTR [ebp+44]
  00145	2b c1		 sub	 eax, ecx
  00147	c1 f8 02	 sar	 eax, 2
$L234177:
  0014a	3b d8		 cmp	 ebx, eax
  0014c	0f 8d 45 02 00
	00		 jge	 $L225737

; 51   : 			ar << GetVisKeepTime( i ) - time_null();

  00152	8b 4d 08	 mov	 ecx, DWORD PTR [ebp+8]
  00155	85 c9		 test	 ecx, ecx
  00157	75 04		 jne	 SHORT $L234267
  00159	33 c0		 xor	 eax, eax
  0015b	eb 08		 jmp	 SHORT $L234268
$L234267:
  0015d	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00160	2b c1		 sub	 eax, ecx
  00162	c1 f8 02	 sar	 eax, 2
$L234268:
  00165	3b d8		 cmp	 ebx, eax
  00167	7d 21		 jge	 SHORT $L234261
  00169	8b 4d 28	 mov	 ecx, DWORD PTR [ebp+40]
  0016c	85 c9		 test	 ecx, ecx
  0016e	75 04		 jne	 SHORT $L234270
  00170	33 c0		 xor	 eax, eax
  00172	eb 08		 jmp	 SHORT $L234271
$L234270:
  00174	8b 45 2c	 mov	 eax, DWORD PTR [ebp+44]
  00177	2b c1		 sub	 eax, ecx
  00179	c1 f8 02	 sar	 eax, 2
$L234271:
  0017c	3b d8		 cmp	 ebx, eax
  0017e	7d 0a		 jge	 SHORT $L234261
  00180	8b 55 28	 mov	 edx, DWORD PTR [ebp+40]
  00183	8d 04 9a	 lea	 eax, DWORD PTR [edx+ebx*4]
  00186	8b 00		 mov	 eax, DWORD PTR [eax]
  00188	eb 02		 jmp	 SHORT $L234259
$L234261:
  0018a	33 c0		 xor	 eax, eax
$L234259:
  0018c	2b 05 00 00 00
	00		 sub	 eax, DWORD PTR ?g_tCurrent@@3JA ; g_tCurrent
  00192	6a 04		 push	 4
  00194	8b ce		 mov	 ecx, esi
  00196	8b f8		 mov	 edi, eax
  00198	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0019d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001a0	89 38		 mov	 DWORD PTR [eax], edi
  001a2	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  001a6	43		 inc	 ebx
  001a7	eb 8e		 jmp	 SHORT $L225721
$L225710:

; 52   : #endif // __PETVIS
; 53   : 	}
; 54   : 	else
; 55   : 	{
; 56   : 		m_vPiercing.clear();

  001a9	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  001ac	8d 5d 04	 lea	 ebx, DWORD PTR [ebp+4]
  001af	33 ff		 xor	 edi, edi
  001b1	3b c7		 cmp	 eax, edi
  001b3	74 09		 je	 SHORT $L234317
  001b5	50		 push	 eax
  001b6	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001bb	83 c4 04	 add	 esp, 4
$L234317:
  001be	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  001c1	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  001c4	89 7b 0c	 mov	 DWORD PTR [ebx+12], edi

; 57   : 		size_t nSize;
; 58   : 		ar >> nSize;

  001c7	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  001ca	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  001cd	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  001d0	3b ca		 cmp	 ecx, edx
  001d2	77 07		 ja	 SHORT $L234329
  001d4	8b 38		 mov	 edi, DWORD PTR [eax]
  001d6	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  001d9	eb 03		 jmp	 SHORT $L234735
$L234329:
  001db	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L234735:

; 59   : 		SetPiercingSize( nSize );

  001de	83 ff 0a	 cmp	 edi, 10			; 0000000aH
  001e1	89 7c 24 1c	 mov	 DWORD PTR _nSize$225725[esp+20], edi
  001e5	8b c7		 mov	 eax, edi
  001e7	7e 05		 jle	 SHORT $L234334
  001e9	b8 0a 00 00 00	 mov	 eax, 10			; 0000000aH
$L234334:
  001ee	6a 00		 push	 0
  001f0	50		 push	 eax
  001f1	8b cb		 mov	 ecx, ebx
  001f3	e8 00 00 00 00	 call	 ?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::resize

; 60   : 		for( size_t i = 0; i < nSize; i++ )

  001f8	85 ff		 test	 edi, edi
  001fa	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR _i$225726[esp+24], 0
  00202	76 49		 jbe	 SHORT $L225729
$L225727:

; 61   : 		{
; 62   : 			DWORD dwItem;
; 63   : 			ar >> dwItem;

  00204	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00207	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0020a	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0020d	3b ca		 cmp	 ecx, edx
  0020f	77 07		 ja	 SHORT $L234339
  00211	8b 38		 mov	 edi, DWORD PTR [eax]
  00213	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00216	eb 05		 jmp	 SHORT $L234340
$L234339:
  00218	33 ff		 xor	 edi, edi
  0021a	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L234340:

; 64   : 			SetPiercingItem( i, dwItem );

  0021d	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00220	85 c9		 test	 ecx, ecx
  00222	75 04		 jne	 SHORT $L234420
  00224	33 c0		 xor	 eax, eax
  00226	eb 08		 jmp	 SHORT $L234421
$L234420:
  00228	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  0022b	2b c1		 sub	 eax, ecx
  0022d	c1 f8 02	 sar	 eax, 2
$L234421:
  00230	8b 4c 24 10	 mov	 ecx, DWORD PTR _i$225726[esp+24]
  00234	3b c8		 cmp	 ecx, eax
  00236	7d 08		 jge	 SHORT $L225728
  00238	8b 55 08	 mov	 edx, DWORD PTR [ebp+8]
  0023b	8d 04 8a	 lea	 eax, DWORD PTR [edx+ecx*4]
  0023e	89 38		 mov	 DWORD PTR [eax], edi
$L225728:
  00240	8b 44 24 1c	 mov	 eax, DWORD PTR _nSize$225725[esp+20]
  00244	41		 inc	 ecx
  00245	3b c8		 cmp	 ecx, eax
  00247	89 4c 24 10	 mov	 DWORD PTR _i$225726[esp+24], ecx
  0024b	72 b7		 jb	 SHORT $L225727
$L225729:

; 65   : 		}
; 66   : #if __VER >= 12 // __EXT_PIERCING
; 67   : 		m_vUltimatePiercing.clear();

  0024d	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00250	8d 5d 14	 lea	 ebx, DWORD PTR [ebp+20]
  00253	33 ff		 xor	 edi, edi
  00255	3b c7		 cmp	 eax, edi
  00257	74 09		 je	 SHORT $L234459
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0025f	83 c4 04	 add	 esp, 4
$L234459:
  00262	89 7b 04	 mov	 DWORD PTR [ebx+4], edi
  00265	89 7b 08	 mov	 DWORD PTR [ebx+8], edi
  00268	89 7b 0c	 mov	 DWORD PTR [ebx+12], edi

; 68   : 		ar >> nSize;

  0026b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0026e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00271	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00274	3b ca		 cmp	 ecx, edx
  00276	77 07		 ja	 SHORT $L234471
  00278	8b 00		 mov	 eax, DWORD PTR [eax]
  0027a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0027d	eb 05		 jmp	 SHORT $L234736
$L234471:
  0027f	33 c0		 xor	 eax, eax
  00281	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L234736:

; 69   : 		SetUltimatePiercingSize( nSize );

  00284	83 f8 05	 cmp	 eax, 5
  00287	89 44 24 1c	 mov	 DWORD PTR _nSize$225725[esp+20], eax
  0028b	7e 05		 jle	 SHORT $L234476
  0028d	b8 05 00 00 00	 mov	 eax, 5
$L234476:
  00292	6a 00		 push	 0
  00294	50		 push	 eax
  00295	8b cb		 mov	 ecx, ebx
  00297	e8 00 00 00 00	 call	 ?resize@?$vector@KV?$allocator@K@std@@@std@@QAEXIK@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::resize

; 70   : 		for( i = 0; i < nSize; i++ )

  0029c	8b 44 24 1c	 mov	 eax, DWORD PTR _nSize$225725[esp+20]
  002a0	33 ed		 xor	 ebp, ebp
  002a2	85 c0		 test	 eax, eax
  002a4	76 45		 jbe	 SHORT $L225733
$L225731:

; 71   : 		{
; 72   : 			DWORD dwItem;
; 73   : 			ar >> dwItem;

  002a6	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002a9	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  002ac	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  002af	3b ca		 cmp	 ecx, edx
  002b1	77 07		 ja	 SHORT $L234481
  002b3	8b 38		 mov	 edi, DWORD PTR [eax]
  002b5	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  002b8	eb 05		 jmp	 SHORT $L234482
$L234481:
  002ba	33 ff		 xor	 edi, edi
  002bc	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L234482:

; 74   : 			SetUltimatePiercingItem( i, dwItem );

  002bf	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  002c2	85 c9		 test	 ecx, ecx
  002c4	75 04		 jne	 SHORT $L234557
  002c6	33 c0		 xor	 eax, eax
  002c8	eb 08		 jmp	 SHORT $L234558
$L234557:
  002ca	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  002cd	2b c1		 sub	 eax, ecx
  002cf	c1 f8 02	 sar	 eax, 2
$L234558:
  002d2	3b e8		 cmp	 ebp, eax
  002d4	7d 0c		 jge	 SHORT $L225732
  002d6	8b 44 24 14	 mov	 eax, DWORD PTR _this$[esp+24]
  002da	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  002dd	8d 04 a9	 lea	 eax, DWORD PTR [ecx+ebp*4]
  002e0	89 38		 mov	 DWORD PTR [eax], edi
$L225732:
  002e2	8b 44 24 1c	 mov	 eax, DWORD PTR _nSize$225725[esp+20]
  002e6	45		 inc	 ebp
  002e7	3b e8		 cmp	 ebp, eax
  002e9	72 bb		 jb	 SHORT $L225731
$L225733:

; 75   : 		}
; 76   : #endif // __EXT_PIERCING
; 77   : #if __VER >= 15 // __PETVIS
; 78   : 		ar >> nSize;

  002eb	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  002ee	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  002f1	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  002f4	3b ca		 cmp	 ecx, edx
  002f6	77 42		 ja	 SHORT $L234593
  002f8	8b 00		 mov	 eax, DWORD PTR [eax]

; 79   : 		SetVisKeepTimeSize( nSize );

  002fa	83 f8 09	 cmp	 eax, 9
  002fd	89 44 24 1c	 mov	 DWORD PTR _nSize$225725[esp+20], eax
  00301	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00304	7c 05		 jl	 SHORT $L234601
  00306	b8 09 00 00 00	 mov	 eax, 9
$L234601:
  0030b	8b 5c 24 14	 mov	 ebx, DWORD PTR _this$[esp+24]
  0030f	6a 00		 push	 0
  00311	8d 6b 24	 lea	 ebp, DWORD PTR [ebx+36]
  00314	50		 push	 eax
  00315	8b cd		 mov	 ecx, ebp
  00317	e8 00 00 00 00	 call	 ?resize@?$vector@JV?$allocator@J@std@@@std@@QAEXIJ@Z ; std::vector<long,std::allocator<long> >::resize

; 80   : 		for( i=0; i<nSize; i++ )

  0031c	8b 44 24 1c	 mov	 eax, DWORD PTR _nSize$225725[esp+20]
  00320	33 ff		 xor	 edi, edi
  00322	85 c0		 test	 eax, eax
  00324	76 71		 jbe	 SHORT $L225737
$L225735:

; 81   : 		{
; 82   : 			time_t tmTemp;
; 83   : 			ar >> tmTemp;

  00326	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00329	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0032c	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0032f	3b ca		 cmp	 ecx, edx
  00331	77 18		 ja	 SHORT $L234607
  00333	8b 00		 mov	 eax, DWORD PTR [eax]
  00335	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00338	eb 16		 jmp	 SHORT $L234608

; 75   : 		}
; 76   : #endif // __EXT_PIERCING
; 77   : #if __VER >= 15 // __PETVIS
; 78   : 		ar >> nSize;

$L234593:
  0033a	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR _nSize$225725[esp+20], 0

; 79   : 		SetVisKeepTimeSize( nSize );

  00342	8b 44 24 1c	 mov	 eax, DWORD PTR _nSize$225725[esp+20]
  00346	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00349	eb c0		 jmp	 SHORT $L234601

; 81   : 		{
; 82   : 			time_t tmTemp;
; 83   : 			ar >> tmTemp;

$L234607:
  0034b	33 c0		 xor	 eax, eax
  0034d	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L234608:

; 84   : 			SetVisKeepTime( i, tmTemp + time_null() );

  00350	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?g_tCurrent@@3JA ; g_tCurrent
  00356	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00359	03 d0		 add	 edx, eax
  0035b	85 c9		 test	 ecx, ecx
  0035d	75 04		 jne	 SHORT $L234694
  0035f	33 c0		 xor	 eax, eax
  00361	eb 08		 jmp	 SHORT $L234695
$L234694:
  00363	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  00366	2b c1		 sub	 eax, ecx
  00368	c1 f8 02	 sar	 eax, 2
$L234695:
  0036b	3b f8		 cmp	 edi, eax
  0036d	7d 1f		 jge	 SHORT $L225736
  0036f	8b 4d 04	 mov	 ecx, DWORD PTR [ebp+4]
  00372	85 c9		 test	 ecx, ecx
  00374	75 04		 jne	 SHORT $L234699
  00376	33 c0		 xor	 eax, eax
  00378	eb 08		 jmp	 SHORT $L234700
$L234699:
  0037a	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  0037d	2b c1		 sub	 eax, ecx
  0037f	c1 f8 02	 sar	 eax, 2
$L234700:
  00382	3b f8		 cmp	 edi, eax
  00384	7d 08		 jge	 SHORT $L225736
  00386	8b 43 28	 mov	 eax, DWORD PTR [ebx+40]
  00389	8d 04 b8	 lea	 eax, DWORD PTR [eax+edi*4]
  0038c	89 10		 mov	 DWORD PTR [eax], edx
$L225736:
  0038e	8b 44 24 1c	 mov	 eax, DWORD PTR _nSize$225725[esp+20]
  00392	47		 inc	 edi
  00393	3b f8		 cmp	 edi, eax
  00395	72 8f		 jb	 SHORT $L225735
$L225737:
  00397	5f		 pop	 edi
  00398	5e		 pop	 esi
  00399	5d		 pop	 ebp
  0039a	5b		 pop	 ebx

; 85   : 		}
; 86   : #endif // __PETVIS
; 87   : 	}
; 88   : }

  0039b	83 c4 08	 add	 esp, 8
  0039e	c2 04 00	 ret	 4
?Serialize@CPiercing@@UAEXAAVCAr@@@Z ENDP		; CPiercing::Serialize
_TEXT	ENDS
PUBLIC	??$assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::assign<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T234907 = 12						; size = 1
__Last$ = 12						; size = 4
??$assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0@Z PROC NEAR ; std::vector<unsigned long,std::allocator<unsigned long> >::assign<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>, COMDAT
; _this$ = ecx

; 596  : 		void assign(_Iter _First, _Iter _Last)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 597  : 		{	// assign [_First, _Last)
; 598  : 		_Assign(_First, _Last, _Iter_cat(_First));

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00009	3b d1		 cmp	 edx, ecx
  0000b	74 20		 je	 SHORT $L234897
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 c7		 add	 eax, edi
  00029	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002c	5f		 pop	 edi
$L234897:
  0002d	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T234907[esp]
  00031	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	51		 push	 ecx
  00039	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First$[esp+4]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
  00047	5e		 pop	 esi

; 599  : 		}

  00048	c2 08 00	 ret	 8
??$assign@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXVconst_iterator@01@0@Z ENDP ; std::vector<unsigned long,std::allocator<unsigned long> >::assign<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??$assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0@Z ; std::vector<long,std::allocator<long> >::assign<std::vector<long,std::allocator<long> >::const_iterator>
; Function compile flags: /Ogty
;	COMDAT ??$assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T235085 = 12						; size = 1
__Last$ = 12						; size = 4
??$assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0@Z PROC NEAR ; std::vector<long,std::allocator<long> >::assign<std::vector<long,std::allocator<long> >::const_iterator>, COMDAT
; _this$ = ecx

; 596  : 		void assign(_Iter _First, _Iter _Last)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 597  : 		{	// assign [_First, _Last)
; 598  : 		_Assign(_First, _Last, _Iter_cat(_First));

  00003	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00006	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00009	3b d1		 cmp	 edx, ecx
  0000b	74 20		 je	 SHORT $L235074
  0000d	8b c1		 mov	 eax, ecx
  0000f	2b c1		 sub	 eax, ecx
  00011	57		 push	 edi
  00012	c1 f8 02	 sar	 eax, 2
  00015	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  0001c	57		 push	 edi
  0001d	51		 push	 ecx
  0001e	52		 push	 edx
  0001f	e8 00 00 00 00	 call	 _memmove
  00024	83 c4 0c	 add	 esp, 12			; 0000000cH
  00027	03 c7		 add	 eax, edi
  00029	89 46 08	 mov	 DWORD PTR [esi+8], eax
  0002c	5f		 pop	 edi
$L235074:
  0002d	8b 4c 24 0c	 mov	 ecx, DWORD PTR $T235085[esp]
  00031	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  00035	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00038	51		 push	 ecx
  00039	8b 4c 24 0c	 mov	 ecx, DWORD PTR __First$[esp+4]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	50		 push	 eax
  00040	8b ce		 mov	 ecx, esi
  00042	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>
  00047	5e		 pop	 esi

; 599  : 		}

  00048	c2 08 00	 ret	 8
??$assign@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXVconst_iterator@01@0@Z ENDP ; std::vector<long,std::allocator<long> >::assign<std::vector<long,std::allocator<long> >::const_iterator>
_TEXT	ENDS
PUBLIC	??4CPiercing@@QAEAAV0@ABV0@@Z			; CPiercing::operator=
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\piercing.cpp
;	COMDAT ??4CPiercing@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
$T235600 = -4						; size = 4
$T235349 = -4						; size = 4
tv418 = 8						; size = 4
tv400 = 8						; size = 4
$T235563 = 8						; size = 1
$T235344 = 8						; size = 1
$T235844 = 8						; size = 1
$T235851 = 8						; size = 4
_piercing$ = 8						; size = 4
??4CPiercing@@QAEAAV0@ABV0@@Z PROC NEAR			; CPiercing::operator=, COMDAT
; _this$ = ecx

; 14   : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	56		 push	 esi
  00004	57		 push	 edi

; 15   : 	m_vPiercing.assign( piercing.m_vPiercing.begin(), piercing.m_vPiercing.end() );

  00005	8b 7c 24 18	 mov	 edi, DWORD PTR _piercing$[esp+16]
  00009	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  0000c	8b 6f 0c	 mov	 ebp, DWORD PTR [edi+12]
  0000f	8b d9		 mov	 ebx, ecx
  00011	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00014	8d 73 04	 lea	 esi, DWORD PTR [ebx+4]
  00017	89 44 24 10	 mov	 DWORD PTR $T235349[esp+20], eax
  0001b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0001e	3b d0		 cmp	 edx, eax
  00020	74 22		 je	 SHORT $L235329
  00022	8b c8		 mov	 ecx, eax
  00024	2b c8		 sub	 ecx, eax
  00026	c1 f9 02	 sar	 ecx, 2
  00029	c1 e1 02	 shl	 ecx, 2
  0002c	51		 push	 ecx
  0002d	50		 push	 eax
  0002e	52		 push	 edx
  0002f	89 4c 24 24	 mov	 DWORD PTR tv400[esp+28], ecx
  00033	e8 00 00 00 00	 call	 _memmove
  00038	8b 4c 24 24	 mov	 ecx, DWORD PTR tv400[esp+28]
  0003c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003f	03 c1		 add	 eax, ecx
  00041	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L235329:
  00044	8b 4c 24 18	 mov	 ecx, DWORD PTR $T235344[esp+16]
  00048	8b 54 24 10	 mov	 edx, DWORD PTR $T235349[esp+20]
  0004c	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0004f	51		 push	 ecx
  00050	55		 push	 ebp
  00051	52		 push	 edx
  00052	50		 push	 eax
  00053	8b ce		 mov	 ecx, esi
  00055	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>

; 16   : #if __VER >= 12 // __EXT_PIERCING
; 17   : 	m_vUltimatePiercing.assign( piercing.m_vUltimatePiercing.begin(), piercing.m_vUltimatePiercing.end() );

  0005a	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  0005d	8b 4b 18	 mov	 ecx, DWORD PTR [ebx+24]
  00060	8b 6f 1c	 mov	 ebp, DWORD PTR [edi+28]
  00063	8d 73 14	 lea	 esi, DWORD PTR [ebx+20]
  00066	89 44 24 10	 mov	 DWORD PTR $T235600[esp+20], eax
  0006a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006d	3b c8		 cmp	 ecx, eax
  0006f	74 22		 je	 SHORT $L235593
  00071	8b d0		 mov	 edx, eax
  00073	2b d0		 sub	 edx, eax
  00075	c1 fa 02	 sar	 edx, 2
  00078	c1 e2 02	 shl	 edx, 2
  0007b	52		 push	 edx
  0007c	50		 push	 eax
  0007d	51		 push	 ecx
  0007e	89 54 24 24	 mov	 DWORD PTR tv418[esp+28], edx
  00082	e8 00 00 00 00	 call	 _memmove
  00087	8b 4c 24 24	 mov	 ecx, DWORD PTR tv418[esp+28]
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	03 c1		 add	 eax, ecx
  00090	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L235593:
  00093	8b 4c 24 18	 mov	 ecx, DWORD PTR $T235563[esp+16]
  00097	8b 54 24 10	 mov	 edx, DWORD PTR $T235600[esp+20]
  0009b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0009e	51		 push	 ecx
  0009f	55		 push	 ebp
  000a0	52		 push	 edx
  000a1	50		 push	 eax
  000a2	8b ce		 mov	 ecx, esi
  000a4	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@KV?$allocator@K@std@@@std@@@?$vector@KV?$allocator@K@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<unsigned long,std::allocator<unsigned long> >::_Insert<std::vector<unsigned long,std::allocator<unsigned long> >::const_iterator>

; 18   : #endif // __EXT_PIERCING
; 19   : #if __VER >= 15 // __PETVIS
; 20   : 	m_vtmPetVis.assign( piercing.m_vtmPetVis.begin(), piercing.m_vtmPetVis.end() );

  000a9	8b 47 28	 mov	 eax, DWORD PTR [edi+40]
  000ac	8b 4b 28	 mov	 ecx, DWORD PTR [ebx+40]
  000af	8b 6f 2c	 mov	 ebp, DWORD PTR [edi+44]
  000b2	8d 73 24	 lea	 esi, DWORD PTR [ebx+36]
  000b5	89 44 24 18	 mov	 DWORD PTR $T235851[esp+16], eax
  000b9	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000bc	3b c8		 cmp	 ecx, eax
  000be	74 1e		 je	 SHORT $L235834
  000c0	8b d0		 mov	 edx, eax
  000c2	2b d0		 sub	 edx, eax
  000c4	c1 fa 02	 sar	 edx, 2
  000c7	8d 3c 95 00 00
	00 00		 lea	 edi, DWORD PTR [edx*4]
  000ce	57		 push	 edi
  000cf	50		 push	 eax
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 _memmove
  000d6	83 c4 0c	 add	 esp, 12			; 0000000cH
  000d9	03 c7		 add	 eax, edi
  000db	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L235834:
  000de	8b 4c 24 18	 mov	 ecx, DWORD PTR $T235844[esp+16]
  000e2	8b 54 24 18	 mov	 edx, DWORD PTR $T235851[esp+16]
  000e6	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  000e9	51		 push	 ecx
  000ea	55		 push	 ebp
  000eb	52		 push	 edx
  000ec	50		 push	 eax
  000ed	8b ce		 mov	 ecx, esi
  000ef	e8 00 00 00 00	 call	 ??$_Insert@Vconst_iterator@?$vector@JV?$allocator@J@std@@@std@@@?$vector@JV?$allocator@J@std@@@std@@QAEXViterator@01@Vconst_iterator@01@1Uforward_iterator_tag@1@@Z ; std::vector<long,std::allocator<long> >::_Insert<std::vector<long,std::allocator<long> >::const_iterator>
  000f4	5f		 pop	 edi
  000f5	5e		 pop	 esi
  000f6	5d		 pop	 ebp

; 21   : #endif // __PETVIS
; 22   : 	return *this;

  000f7	8b c3		 mov	 eax, ebx
  000f9	5b		 pop	 ebx

; 23   : }

  000fa	59		 pop	 ecx
  000fb	c2 04 00	 ret	 4
??4CPiercing@@QAEAAV0@ABV0@@Z ENDP			; CPiercing::operator=
_TEXT	ENDS
END
