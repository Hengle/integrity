; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_DirectX\dxutil.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKAAOJGK@DX9SDK?5Samples?5Path?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07JADGJGAE@?2Media?2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BF@PHKGEBGA@?$CFs?2C?$CL?$CL?2?$CFs?2readme?4txt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KCHKBMF@?2readme?4txt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@KFDNOLCO@shell32?4dll?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BK@MEKHEPPF@Could?5not?5find?5readme?4txt?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_FindMediaFileCch@@YAJPADH0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PAD1K1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PAD1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PADPAKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PADK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PADPAHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PADPAU_GUID@@AAU2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PADU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertGenericStringToWideCch@@YAJPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertWideStringToGenericCch@@YAJPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_LaunchReadme@@YAXPAUHWND__@@PAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_Trace@@YAXPADZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CArrayList@@QAE@W4ArrayListType@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CArrayList@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CArrayList@@QAEJPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Remove@CArrayList@@QAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPtr@CArrayList@@QAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Contains@CArrayList@@QAE_NPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertAnsiStringToWideCb@@YAJPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertGenericStringToWideCb@@YAJPAGPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertWideStringToGenericCb@@YAJPADPBGH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PAD1K1@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?DXUtil_FindMediaFileCb@@YAJPADH0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __tcsrchr
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __tcsncpy
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@ ; `string'
PUBLIC	??_C@_0BE@LKAAOJGK@DX9SDK?5Samples?5Path?$AA@	; `string'
PUBLIC	??_C@_07JADGJGAE@?2Media?2?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z		; DXUtil_GetDXSDKMediaPathCch
EXTRN	__imp__RegOpenKeyExA@20:NEAR
EXTRN	__imp__RegQueryValueExA@24:NEAR
EXTRN	__imp__lstrcpyA@8:NEAR
EXTRN	__imp__lstrlenA@4:NEAR
EXTRN	__imp__RegCloseKey@4:NEAR
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\dxutil.cpp
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
CONST	SEGMENT
??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@ DB 'Software\Mi'
	DB	'crosoft\DirectX SDK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LKAAOJGK@DX9SDK?5Samples?5Path?$AA@
CONST	SEGMENT
??_C@_0BE@LKAAOJGK@DX9SDK?5Samples?5Path?$AA@ DB 'DX9SDK Samples Path', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JADGJGAE@?2Media?2?$AA@
CONST	SEGMENT
??_C@_07JADGJGAE@?2Media?2?$AA@ DB '\Media\', 00H	; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z
_TEXT	SEGMENT
_dwSize$ = -8						; size = 4
_dwType$ = -4						; size = 4
_hKey$ = 8						; size = 4
_strDest$ = 8						; size = 4
_cchDest$ = 12						; size = 4
?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z PROC NEAR	; DXUtil_GetDXSDKMediaPathCch, COMDAT

; 35   : {

  00000	83 ec 08	 sub	 esp, 8
  00003	56		 push	 esi

; 36   :     if( strDest == NULL || cchDest < 1 )

  00004	8b 74 24 10	 mov	 esi, DWORD PTR _strDest$[esp+8]
  00008	85 f6		 test	 esi, esi
  0000a	57		 push	 edi
  0000b	0f 84 d2 00 00
	00		 je	 $L186710
  00011	8b 7c 24 18	 mov	 edi, DWORD PTR _cchDest$[esp+12]
  00015	83 ff 01	 cmp	 edi, 1
  00018	0f 8c c5 00 00
	00		 jl	 $L186710

; 38   : 
; 39   :     lstrcpy( strDest, TEXT("") );

  0001e	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00023	56		 push	 esi
  00024	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyA@8

; 40   : 
; 41   :     // Open the appropriate registry key
; 42   :     HKEY  hKey;
; 43   :     LONG lResult = RegOpenKeyEx( HKEY_LOCAL_MACHINE,
; 44   :                                 _T("Software\\Microsoft\\DirectX SDK"),
; 45   :                                 0, KEY_READ, &hKey );

  0002a	8d 44 24 14	 lea	 eax, DWORD PTR _hKey$[esp+12]
  0002e	50		 push	 eax
  0002f	68 19 00 02 00	 push	 131097			; 00020019H
  00034	6a 00		 push	 0
  00036	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
  0003b	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20

; 46   :     if( ERROR_SUCCESS != lResult )

  00046	85 c0		 test	 eax, eax
  00048	74 0b		 je	 SHORT $L186718
  0004a	5f		 pop	 edi

; 47   :         return E_FAIL;

  0004b	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00050	5e		 pop	 esi

; 66   : }

  00051	83 c4 08	 add	 esp, 8
  00054	c3		 ret	 0
$L186718:

; 48   : 
; 49   :     DWORD dwType;
; 50   :     DWORD dwSize = cchDest * sizeof(TCHAR);
; 51   :     lResult = RegQueryValueEx( hKey, _T("DX9SDK Samples Path"), NULL,
; 52   :                               &dwType, (BYTE*)strDest, &dwSize );

  00055	8b 44 24 14	 mov	 eax, DWORD PTR _hKey$[esp+12]
  00059	53		 push	 ebx
  0005a	8d 4c 24 0c	 lea	 ecx, DWORD PTR _dwSize$[esp+20]
  0005e	51		 push	 ecx
  0005f	56		 push	 esi
  00060	8d 54 24 18	 lea	 edx, DWORD PTR _dwType$[esp+28]
  00064	52		 push	 edx
  00065	6a 00		 push	 0
  00067	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LKAAOJGK@DX9SDK?5Samples?5Path?$AA@
  0006c	50		 push	 eax
  0006d	89 7c 24 24	 mov	 DWORD PTR _dwSize$[esp+44], edi
  00071	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24

; 53   :     strDest[cchDest-1] = 0; // RegQueryValueEx doesn't NULL term if buffer too small
; 54   :     RegCloseKey( hKey );

  00077	8b 4c 24 18	 mov	 ecx, DWORD PTR _hKey$[esp+16]
  0007b	51		 push	 ecx
  0007c	8b d8		 mov	 ebx, eax
  0007e	c6 44 3e ff 00	 mov	 BYTE PTR [esi+edi-1], 0
  00083	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4

; 55   : 
; 56   :     if( ERROR_SUCCESS != lResult )

  00089	85 db		 test	 ebx, ebx
  0008b	74 0c		 je	 SHORT $L186725
  0008d	5b		 pop	 ebx
  0008e	5f		 pop	 edi

; 57   :         return E_FAIL;

  0008f	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00094	5e		 pop	 esi

; 66   : }

  00095	83 c4 08	 add	 esp, 8
  00098	c3		 ret	 0
$L186725:

; 58   : 
; 59   :     const TCHAR* strMedia = _T("\\Media\\");
; 60   :     if( lstrlen(strDest) + lstrlen(strMedia) < cchDest )

  00099	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__lstrlenA@4
  0009f	55		 push	 ebp
  000a0	56		 push	 esi
  000a1	ff d3		 call	 ebx
  000a3	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_07JADGJGAE@?2Media?2?$AA@
  000a8	8b e8		 mov	 ebp, eax
  000aa	ff d3		 call	 ebx
  000ac	03 e8		 add	 ebp, eax
  000ae	3b ef		 cmp	 ebp, edi
  000b0	5d		 pop	 ebp
  000b1	7d 24		 jge	 SHORT $L186729

; 61   :         _tcscat( strDest, strMedia );

  000b3	4e		 dec	 esi
$L187436:
  000b4	8a 46 01	 mov	 al, BYTE PTR [esi+1]
  000b7	46		 inc	 esi
  000b8	84 c0		 test	 al, al
  000ba	75 f8		 jne	 SHORT $L187436
  000bc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_07JADGJGAE@?2Media?2?$AA@
  000c2	8b fe		 mov	 edi, esi
  000c4	89 17		 mov	 DWORD PTR [edi], edx
  000c6	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_07JADGJGAE@?2Media?2?$AA@+4
  000cb	5b		 pop	 ebx
  000cc	89 47 04	 mov	 DWORD PTR [edi+4], eax
  000cf	5f		 pop	 edi

; 64   : 
; 65   :     return S_OK;

  000d0	33 c0		 xor	 eax, eax
  000d2	5e		 pop	 esi

; 66   : }

  000d3	83 c4 08	 add	 esp, 8
  000d6	c3		 ret	 0
$L186729:
  000d7	5b		 pop	 ebx
  000d8	5f		 pop	 edi

; 62   :     else
; 63   :         return E_INVALIDARG;

  000d9	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  000de	5e		 pop	 esi

; 66   : }

  000df	83 c4 08	 add	 esp, 8
  000e2	c3		 ret	 0
$L186710:
  000e3	5f		 pop	 edi

; 37   :         return E_INVALIDARG;

  000e4	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  000e9	5e		 pop	 esi

; 66   : }

  000ea	83 c4 08	 add	 esp, 8
  000ed	c3		 ret	 0
?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z ENDP		; DXUtil_GetDXSDKMediaPathCch
_TEXT	ENDS
PUBLIC	?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PAD1@Z	; DXUtil_WriteStringRegKey
EXTRN	__imp__RegSetValueExA@24:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PAD1@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_strValue$ = 16						; size = 4
?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PAD1@Z PROC NEAR ; DXUtil_WriteStringRegKey, COMDAT

; 183  :     if( NULL == strValue )

  00000	8b 54 24 0c	 mov	 edx, DWORD PTR _strValue$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	75 06		 jne	 SHORT $L186791

; 184  :         return E_INVALIDARG;

  00008	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H

; 190  :         return E_FAIL;
; 191  : 
; 192  :     return S_OK;
; 193  : }

  0000d	c3		 ret	 0
$L186791:

; 185  :         
; 186  :     DWORD cbValue = ((DWORD)_tcslen(strValue)+1) * sizeof(TCHAR);

  0000e	8b c2		 mov	 eax, edx
  00010	56		 push	 esi
  00011	8d 70 01	 lea	 esi, DWORD PTR [eax+1]
$L187440:
  00014	8a 08		 mov	 cl, BYTE PTR [eax]
  00016	40		 inc	 eax
  00017	84 c9		 test	 cl, cl
  00019	75 f9		 jne	 SHORT $L187440

; 187  : 
; 188  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_SZ, 
; 189  :                                         (BYTE*)strValue, cbValue ) )

  0001b	8b 4c 24 08	 mov	 ecx, DWORD PTR _hKey$[esp]
  0001f	2b c6		 sub	 eax, esi
  00021	40		 inc	 eax
  00022	50		 push	 eax
  00023	8b 44 24 10	 mov	 eax, DWORD PTR _strRegName$[esp+4]
  00027	52		 push	 edx
  00028	6a 01		 push	 1
  0002a	6a 00		 push	 0
  0002c	50		 push	 eax
  0002d	51		 push	 ecx
  0002e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  00034	f7 d8		 neg	 eax
  00036	1b c0		 sbb	 eax, eax
  00038	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H
  0003d	5e		 pop	 esi

; 190  :         return E_FAIL;
; 191  : 
; 192  :     return S_OK;
; 193  : }

  0003e	c3		 ret	 0
?DXUtil_WriteStringRegKey@@YAJPAUHKEY__@@PAD1@Z ENDP	; DXUtil_WriteStringRegKey
_TEXT	ENDS
PUBLIC	?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PADPAKK@Z	; DXUtil_ReadIntRegKey
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PADPAKK@Z
_TEXT	SEGMENT
_dwLength$ = -8						; size = 4
_dwType$ = -4						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pdwDest$ = 16						; size = 4
_dwDefault$ = 20					; size = 4
?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PADPAKK@Z PROC NEAR ; DXUtil_ReadIntRegKey, COMDAT

; 204  : {

  00000	83 ec 08	 sub	 esp, 8

; 205  :     DWORD dwType;
; 206  :     DWORD dwLength = sizeof(DWORD);
; 207  : 
; 208  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 209  :                                           (BYTE*)pdwDest, &dwLength ) )

  00003	8b 54 24 10	 mov	 edx, DWORD PTR _strRegName$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR _pdwDest$[esp+8]
  0000c	8d 44 24 04	 lea	 eax, DWORD PTR _dwLength$[esp+12]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR _hKey$[esp+12]
  00015	56		 push	 esi
  00016	8d 4c 24 10	 lea	 ecx, DWORD PTR _dwType$[esp+20]
  0001a	51		 push	 ecx
  0001b	6a 00		 push	 0
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	c7 44 24 1c 04
	00 00 00	 mov	 DWORD PTR _dwLength$[esp+36], 4
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0002d	85 c0		 test	 eax, eax
  0002f	74 1d		 je	 SHORT $L186810

; 210  :     {
; 211  :         *pdwDest = dwDefault;

  00031	8b 4c 24 1c	 mov	 ecx, DWORD PTR _dwDefault$[esp+8]
  00035	89 0e		 mov	 DWORD PTR [esi], ecx

; 212  :         if( dwType != REG_DWORD )

  00037	8b 74 24 08	 mov	 esi, DWORD PTR _dwType$[esp+12]
  0003b	33 c0		 xor	 eax, eax
  0003d	83 fe 04	 cmp	 esi, 4
  00040	0f 94 c0	 sete	 al
  00043	5e		 pop	 esi
  00044	48		 dec	 eax
  00045	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H

; 219  : }

  0004a	83 c4 08	 add	 esp, 8
  0004d	c3		 ret	 0
$L186810:

; 213  :             return E_FAIL;
; 214  : 
; 215  :         return S_OK;
; 216  :     }
; 217  : 
; 218  :     return E_FAIL;

  0004e	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00053	5e		 pop	 esi

; 219  : }

  00054	83 c4 08	 add	 esp, 8
  00057	c3		 ret	 0
?DXUtil_ReadIntRegKey@@YAJPAUHKEY__@@PADPAKK@Z ENDP	; DXUtil_ReadIntRegKey
_TEXT	ENDS
PUBLIC	?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PADK@Z	; DXUtil_WriteIntRegKey
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PADK@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_dwValue$ = 16						; size = 4
?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PADK@Z PROC NEAR	; DXUtil_WriteIntRegKey, COMDAT

; 230  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_DWORD, 
; 231  :                                         (BYTE*)&dwValue, sizeof(DWORD) ) )

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _strRegName$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _hKey$[esp-4]
  00008	6a 04		 push	 4
  0000a	8d 44 24 10	 lea	 eax, DWORD PTR _dwValue$[esp]
  0000e	50		 push	 eax
  0000f	6a 04		 push	 4
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H

; 232  :         return E_FAIL;
; 233  : 
; 234  :     return S_OK;
; 235  : }

  00024	c3		 ret	 0
?DXUtil_WriteIntRegKey@@YAJPAUHKEY__@@PADK@Z ENDP	; DXUtil_WriteIntRegKey
_TEXT	ENDS
PUBLIC	?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PADPAHH@Z	; DXUtil_ReadBoolRegKey
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PADPAHH@Z
_TEXT	SEGMENT
_dwLength$ = -8						; size = 4
_dwType$ = -4						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pbDest$ = 16						; size = 4
_bDefault$ = 20						; size = 4
?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PADPAHH@Z PROC NEAR ; DXUtil_ReadBoolRegKey, COMDAT

; 246  : {

  00000	83 ec 08	 sub	 esp, 8

; 247  :     DWORD dwType;
; 248  :     DWORD dwLength = sizeof(BOOL);
; 249  : 
; 250  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 251  :                                           (BYTE*)pbDest, &dwLength ) )

  00003	8b 54 24 10	 mov	 edx, DWORD PTR _strRegName$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR _pbDest$[esp+8]
  0000c	8d 44 24 04	 lea	 eax, DWORD PTR _dwLength$[esp+12]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR _hKey$[esp+12]
  00015	56		 push	 esi
  00016	8d 4c 24 10	 lea	 ecx, DWORD PTR _dwType$[esp+20]
  0001a	51		 push	 ecx
  0001b	6a 00		 push	 0
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	c7 44 24 1c 04
	00 00 00	 mov	 DWORD PTR _dwLength$[esp+36], 4
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0002d	85 c0		 test	 eax, eax
  0002f	74 1d		 je	 SHORT $L186835

; 252  :     {
; 253  :         *pbDest = bDefault;

  00031	8b 4c 24 1c	 mov	 ecx, DWORD PTR _bDefault$[esp+8]
  00035	89 0e		 mov	 DWORD PTR [esi], ecx

; 254  :         if( dwType != REG_DWORD )

  00037	8b 74 24 08	 mov	 esi, DWORD PTR _dwType$[esp+12]
  0003b	33 c0		 xor	 eax, eax
  0003d	83 fe 04	 cmp	 esi, 4
  00040	0f 94 c0	 sete	 al
  00043	5e		 pop	 esi
  00044	48		 dec	 eax
  00045	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H

; 261  : }

  0004a	83 c4 08	 add	 esp, 8
  0004d	c3		 ret	 0
$L186835:

; 255  :             return E_FAIL;
; 256  : 
; 257  :         return S_OK;
; 258  :     }
; 259  : 
; 260  :     return E_FAIL;

  0004e	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00053	5e		 pop	 esi

; 261  : }

  00054	83 c4 08	 add	 esp, 8
  00057	c3		 ret	 0
?DXUtil_ReadBoolRegKey@@YAJPAUHKEY__@@PADPAHH@Z ENDP	; DXUtil_ReadBoolRegKey
_TEXT	ENDS
PUBLIC	?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PADH@Z	; DXUtil_WriteBoolRegKey
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PADH@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_bValue$ = 16						; size = 4
?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PADH@Z PROC NEAR	; DXUtil_WriteBoolRegKey, COMDAT

; 272  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_DWORD, 
; 273  :                                         (BYTE*)&bValue, sizeof(BOOL) ) )

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR _strRegName$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _hKey$[esp-4]
  00008	6a 04		 push	 4
  0000a	8d 44 24 10	 lea	 eax, DWORD PTR _bValue$[esp]
  0000e	50		 push	 eax
  0000f	6a 04		 push	 4
  00011	6a 00		 push	 0
  00013	51		 push	 ecx
  00014	52		 push	 edx
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24
  0001b	f7 d8		 neg	 eax
  0001d	1b c0		 sbb	 eax, eax
  0001f	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H

; 274  :         return E_FAIL;
; 275  : 
; 276  :     return S_OK;
; 277  : }

  00024	c3		 ret	 0
?DXUtil_WriteBoolRegKey@@YAJPAUHKEY__@@PADH@Z ENDP	; DXUtil_WriteBoolRegKey
_TEXT	ENDS
PUBLIC	?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PADPAU_GUID@@AAU2@@Z ; DXUtil_ReadGuidRegKey
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PADPAU_GUID@@AAU2@@Z
_TEXT	SEGMENT
_dwLength$ = -8						; size = 4
_dwType$ = -4						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_pGuidDest$ = 16					; size = 4
_guidDefault$ = 20					; size = 4
?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PADPAU_GUID@@AAU2@@Z PROC NEAR ; DXUtil_ReadGuidRegKey, COMDAT

; 288  : {

  00000	83 ec 08	 sub	 esp, 8

; 289  :     DWORD dwType;
; 290  :     DWORD dwLength = sizeof(GUID);
; 291  : 
; 292  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 293  :                                           (LPBYTE) pGuidDest, &dwLength ) )

  00003	8b 54 24 10	 mov	 edx, DWORD PTR _strRegName$[esp+4]
  00007	56		 push	 esi
  00008	8b 74 24 18	 mov	 esi, DWORD PTR _pGuidDest$[esp+8]
  0000c	8d 44 24 04	 lea	 eax, DWORD PTR _dwLength$[esp+12]
  00010	50		 push	 eax
  00011	8b 44 24 14	 mov	 eax, DWORD PTR _hKey$[esp+12]
  00015	56		 push	 esi
  00016	8d 4c 24 10	 lea	 ecx, DWORD PTR _dwType$[esp+20]
  0001a	51		 push	 ecx
  0001b	6a 00		 push	 0
  0001d	52		 push	 edx
  0001e	50		 push	 eax
  0001f	c7 44 24 1c 10
	00 00 00	 mov	 DWORD PTR _dwLength$[esp+36], 16 ; 00000010H
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0002d	85 c0		 test	 eax, eax
  0002f	74 31		 je	 SHORT $L186860

; 294  :     {
; 295  :         *pGuidDest = guidDefault;

  00031	8b 4c 24 1c	 mov	 ecx, DWORD PTR _guidDefault$[esp+8]
  00035	8b 11		 mov	 edx, DWORD PTR [ecx]
  00037	89 16		 mov	 DWORD PTR [esi], edx
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0003f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00042	89 56 08	 mov	 DWORD PTR [esi+8], edx
  00045	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00048	89 46 0c	 mov	 DWORD PTR [esi+12], eax

; 296  :         if( dwType != REG_BINARY )

  0004b	8b 74 24 08	 mov	 esi, DWORD PTR _dwType$[esp+12]
  0004f	33 c0		 xor	 eax, eax
  00051	83 fe 03	 cmp	 esi, 3
  00054	0f 94 c0	 sete	 al
  00057	5e		 pop	 esi
  00058	48		 dec	 eax
  00059	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H

; 303  : }

  0005e	83 c4 08	 add	 esp, 8
  00061	c3		 ret	 0
$L186860:

; 297  :             return E_FAIL;
; 298  : 
; 299  :         return S_OK;
; 300  :     }
; 301  : 
; 302  :     return E_FAIL;

  00062	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00067	5e		 pop	 esi

; 303  : }

  00068	83 c4 08	 add	 esp, 8
  0006b	c3		 ret	 0
?DXUtil_ReadGuidRegKey@@YAJPAUHKEY__@@PADPAU_GUID@@AAU2@@Z ENDP ; DXUtil_ReadGuidRegKey
_TEXT	ENDS
PUBLIC	?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PADU_GUID@@@Z ; DXUtil_WriteGuidRegKey
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PADU_GUID@@@Z
_TEXT	SEGMENT
$T187456 = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_guidValue$ = 16					; size = 16
?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PADU_GUID@@@Z PROC NEAR ; DXUtil_WriteGuidRegKey, COMDAT

; 313  : {

  00000	83 ec 14	 sub	 esp, 20			; 00000014H
  00003	8b 54 24 20	 mov	 edx, DWORD PTR _guidValue$[esp+16]
  00007	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000c	8b 4c 24 1c	 mov	 ecx, DWORD PTR _strRegName$[esp+16]
  00010	89 14 24	 mov	 DWORD PTR $T187456[esp+20], edx
  00013	8b 54 24 24	 mov	 edx, DWORD PTR _guidValue$[esp+20]
  00017	89 54 24 04	 mov	 DWORD PTR $T187456[esp+24], edx
  0001b	8b 54 24 28	 mov	 edx, DWORD PTR _guidValue$[esp+24]
  0001f	33 c4		 xor	 eax, esp
  00021	89 54 24 08	 mov	 DWORD PTR $T187456[esp+28], edx
  00025	8b 54 24 2c	 mov	 edx, DWORD PTR _guidValue$[esp+28]

; 314  :     if( ERROR_SUCCESS != RegSetValueEx( hKey, strRegName, 0, REG_BINARY, 
; 315  :                                         (BYTE*)&guidValue, sizeof(GUID) ) )

  00029	6a 10		 push	 16			; 00000010H
  0002b	89 54 24 10	 mov	 DWORD PTR $T187456[esp+36], edx
  0002f	8d 54 24 04	 lea	 edx, DWORD PTR $T187456[esp+24]
  00033	52		 push	 edx
  00034	6a 03		 push	 3
  00036	6a 00		 push	 0
  00038	89 44 24 20	 mov	 DWORD PTR __$ArrayPad$[esp+36], eax
  0003c	8b 44 24 28	 mov	 eax, DWORD PTR _hKey$[esp+32]
  00040	51		 push	 ecx
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegSetValueExA@24

; 316  :         return E_FAIL;
; 317  : 
; 318  :     return S_OK;
; 319  : }

  00048	8b 4c 24 10	 mov	 ecx, DWORD PTR __$ArrayPad$[esp+20]
  0004c	f7 d8		 neg	 eax
  0004e	1b c0		 sbb	 eax, eax
  00050	33 cc		 xor	 ecx, esp
  00052	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H
  00057	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0005c	83 c4 14	 add	 esp, 20			; 00000014H
  0005f	c3		 ret	 0
?DXUtil_WriteGuidRegKey@@YAJPAUHKEY__@@PADU_GUID@@@Z ENDP ; DXUtil_WriteGuidRegKey
_TEXT	ENDS
PUBLIC	__real@00000000
PUBLIC	__real@bf800000
PUBLIC	__real@0000000000000000
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3fb99999a0000000
PUBLIC	__real@41f0000000000000
PUBLIC	?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z		; DXUtil_Timer
EXTRN	__alldiv:NEAR
EXTRN	__fltused:NEAR
EXTRN	__imp__QueryPerformanceCounter@4:NEAR
EXTRN	__imp__QueryPerformanceFrequency@4:NEAR
EXTRN	__imp__timeGetTime@0:NEAR
;	COMDAT ?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
_BSS	SEGMENT
?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA DD 01H DUP (?) ; `DXUtil_Timer'::`2'::m_bTimerInitialized
_BSS	ENDS
;	COMDAT ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
_BSS	SEGMENT
?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA DD 01H DUP (?) ; `DXUtil_Timer'::`2'::m_bUsingQPF
_BSS	ENDS
;	COMDAT ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_BSS	SEGMENT
?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`2'::m_llQPFTicksPerSec
_BSS	ENDS
;	COMDAT ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_BSS	SEGMENT
?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`10'::m_llStopTime
_BSS	ENDS
;	COMDAT ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_BSS	SEGMENT
?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`10'::m_llLastElapsedTime
_BSS	ENDS
;	COMDAT ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
_BSS	SEGMENT
?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA DQ 01H DUP (?) ; `DXUtil_Timer'::`10'::m_llBaseTime
_BSS	ENDS
;	COMDAT ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
_BSS	SEGMENT
?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA DQ 01H DUP (?) ; `DXUtil_Timer'::`41'::m_fLastElapsedTime
_BSS	ENDS
;	COMDAT ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
_BSS	SEGMENT
?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA DQ 01H DUP (?) ; `DXUtil_Timer'::`41'::m_fBaseTime
_BSS	ENDS
;	COMDAT ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
_BSS	SEGMENT
?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA DQ 01H DUP (?) ; `DXUtil_Timer'::`41'::m_fStopTime
_BSS	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
_DATA	SEGMENT
?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA DD 01H ; `DXUtil_Timer'::`2'::m_bTimerStopped
_DATA	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@41f0000000000000
CONST	SEGMENT
__real@41f0000000000000 DQ 041f0000000000000r	; 4.29497e+009
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@3fb99999a0000000
CONST	SEGMENT
__real@3fb99999a0000000 DQ 03fb99999a0000000r	; 0.1
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z
_TEXT	SEGMENT
tv275 = -8						; size = 8
tv263 = -8						; size = 8
_fElapsedTime$186927 = -8				; size = 8
_qwTime$186898 = -8					; size = 8
_qwTicksPerSec$186887 = -8				; size = 8
tv221 = 8						; size = 4
_command$ = 8						; size = 4
?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z PROC NEAR		; DXUtil_Timer, COMDAT

; 338  :     static BOOL     m_bTimerInitialized = FALSE;
; 339  :     static BOOL     m_bUsingQPF         = FALSE;
; 340  :     static BOOL     m_bTimerStopped     = TRUE;
; 341  :     static LONGLONG m_llQPFTicksPerSec  = 0;
; 342  : 
; 343  :     // Initialize the timer
; 344  :     if( FALSE == m_bTimerInitialized )

  00000	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
  00005	83 ec 08	 sub	 esp, 8
  00008	55		 push	 ebp
  00009	33 ed		 xor	 ebp, ebp
  0000b	3b c5		 cmp	 eax, ebp
  0000d	56		 push	 esi
  0000e	75 38		 jne	 SHORT $L187473

; 345  :     {
; 346  :         m_bTimerInitialized = TRUE;
; 347  : 
; 348  :         // Use QueryPerformanceFrequency() to get frequency of timer.  If QPF is
; 349  :         // not supported, we will timeGetTime() which returns milliseconds.
; 350  :         LARGE_INTEGER qwTicksPerSec;
; 351  :         m_bUsingQPF = QueryPerformanceFrequency( &qwTicksPerSec );

  00010	8d 44 24 08	 lea	 eax, DWORD PTR _qwTicksPerSec$186887[esp+16]
  00014	50		 push	 eax
  00015	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?m_bTimerInitialized@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 1
  0001f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryPerformanceFrequency@4

; 352  :         if( m_bUsingQPF )

  00025	3b c5		 cmp	 eax, ebp
  00027	a3 00 00 00 00	 mov	 DWORD PTR ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, eax
  0002c	0f 84 23 02 00
	00		 je	 $L187476

; 353  :             m_llQPFTicksPerSec = qwTicksPerSec.QuadPart;

  00032	8b 4c 24 08	 mov	 ecx, DWORD PTR _qwTicksPerSec$186887[esp+16]
  00036	8b 54 24 0c	 mov	 edx, DWORD PTR _qwTicksPerSec$186887[esp+20]
  0003a	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  00040	89 15 04 00 00
	00		 mov	 DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, edx
  00046	eb 05		 jmp	 SHORT $L186888
$L187473:
  00048	a1 00 00 00 00	 mov	 eax, DWORD PTR ?m_bUsingQPF@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA
$L186888:

; 354  :     }
; 355  : 
; 356  :     if( m_bUsingQPF )

  0004d	3b c5		 cmp	 eax, ebp
  0004f	0f 84 00 02 00
	00		 je	 $L187476

; 357  :     {
; 358  :         static LONGLONG m_llStopTime        = 0;
; 359  :         static LONGLONG m_llLastElapsedTime = 0;
; 360  :         static LONGLONG m_llBaseTime        = 0;
; 361  :         double fTime;
; 362  :         double fElapsedTime;
; 363  :         LARGE_INTEGER qwTime;
; 364  :         
; 365  :         // Get either the current time or the stop time, depending
; 366  :         // on whether we're stopped and what command was sent
; 367  :         if( m_llStopTime != 0 && command != TIMER_START && command != TIMER_GETABSOLUTETIME)

  00055	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  0005b	53		 push	 ebx
  0005c	8b 5c 24 18	 mov	 ebx, DWORD PTR _command$[esp+16]
  00060	57		 push	 edi
  00061	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
  00067	8b c6		 mov	 eax, esi
  00069	0b c7		 or	 eax, edi
  0006b	74 18		 je	 SHORT $L186899
  0006d	83 fb 01	 cmp	 ebx, 1
  00070	74 13		 je	 SHORT $L186899
  00072	83 fb 04	 cmp	 ebx, 4
  00075	74 0e		 je	 SHORT $L186899

; 368  :             qwTime.QuadPart = m_llStopTime;

  00077	8b ce		 mov	 ecx, esi
  00079	8b c7		 mov	 eax, edi
  0007b	89 4c 24 10	 mov	 DWORD PTR _qwTime$186898[esp+24], ecx
  0007f	89 44 24 14	 mov	 DWORD PTR _qwTime$186898[esp+28], eax

; 369  :         else

  00083	eb 1f		 jmp	 SHORT $L186900
$L186899:

; 370  :             QueryPerformanceCounter( &qwTime );

  00085	8d 4c 24 10	 lea	 ecx, DWORD PTR _qwTime$186898[esp+24]
  00089	51		 push	 ecx
  0008a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__QueryPerformanceCounter@4
  00090	8b 44 24 14	 mov	 eax, DWORD PTR _qwTime$186898[esp+28]
  00094	8b 4c 24 10	 mov	 ecx, DWORD PTR _qwTime$186898[esp+24]
  00098	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
  0009e	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
$L186900:

; 371  : 
; 372  :         // Return the elapsed time
; 373  :         if( command == TIMER_GETELAPSEDTIME )

  000a4	83 fb 06	 cmp	 ebx, 6
  000a7	75 3d		 jne	 SHORT $L186901

; 374  :         {
; 375  :             fElapsedTime = (double) ( qwTime.QuadPart - m_llLastElapsedTime ) / (double) m_llQPFTicksPerSec;

  000a9	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  000af	8b 3d 04 00 00
	00		 mov	 edi, DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
  000b5	8b d1		 mov	 edx, ecx
  000b7	2b d3		 sub	 edx, ebx
  000b9	8b f0		 mov	 esi, eax
  000bb	1b f7		 sbb	 esi, edi
  000bd	5f		 pop	 edi
  000be	89 74 24 10	 mov	 DWORD PTR tv275[esp+24], esi
  000c2	89 54 24 0c	 mov	 DWORD PTR tv275[esp+20], edx
  000c6	df 6c 24 0c	 fild	 QWORD PTR tv275[esp+20]
  000ca	df 2d 00 00 00
	00		 fild	 QWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  000d0	5b		 pop	 ebx
  000d1	5e		 pop	 esi

; 376  :             m_llLastElapsedTime = qwTime.QuadPart;

  000d2	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  000d8	de f9		 fdivp	 ST(1), ST(0)
  000da	a3 04 00 00 00	 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, eax
  000df	5d		 pop	 ebp

; 511  :     }
; 512  : }

  000e0	83 c4 08	 add	 esp, 8
  000e3	c2 04 00	 ret	 4
$L186901:

; 377  :             return (FLOAT) fElapsedTime;
; 378  :         }
; 379  :     
; 380  :         // Return the current time
; 381  :         if( command == TIMER_GETAPPTIME )

  000e6	83 fb 05	 cmp	 ebx, 5
  000e9	75 2e		 jne	 SHORT $L186905

; 382  :         {
; 383  :             double fAppTime = (double) ( qwTime.QuadPart - m_llBaseTime ) / (double) m_llQPFTicksPerSec;

  000eb	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  000f1	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
  000f7	2b ce		 sub	 ecx, esi
  000f9	1b c2		 sbb	 eax, edx

; 384  :             return (FLOAT) fAppTime;

  000fb	89 4c 24 10	 mov	 DWORD PTR tv263[esp+24], ecx
  000ff	89 44 24 14	 mov	 DWORD PTR tv263[esp+28], eax
  00103	df 6c 24 10	 fild	 QWORD PTR tv263[esp+24]
  00107	df 2d 00 00 00
	00		 fild	 QWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  0010d	5f		 pop	 edi
  0010e	5b		 pop	 ebx
  0010f	de f9		 fdivp	 ST(1), ST(0)
$L186919:
  00111	5e		 pop	 esi
  00112	5d		 pop	 ebp

; 511  :     }
; 512  : }

  00113	83 c4 08	 add	 esp, 8
  00116	c2 04 00	 ret	 4
$L186905:

; 385  :         }
; 386  :     
; 387  :         // Reset the timer
; 388  :         if( command == TIMER_RESET )

  00119	3b dd		 cmp	 ebx, ebp
  0011b	75 38		 jne	 SHORT $L186910

; 389  :         {
; 390  :             m_llBaseTime        = qwTime.QuadPart;
; 391  :             m_llLastElapsedTime = qwTime.QuadPart;
; 392  :             m_llStopTime        = 0;
; 393  :             m_bTimerStopped     = FALSE;
; 394  :             return 0.0f;

  0011d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00123	5f		 pop	 edi
  00124	5b		 pop	 ebx
  00125	5e		 pop	 esi
  00126	89 2d 00 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ebp
  0012c	89 2d 04 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ebp
  00132	89 2d 00 00 00
	00		 mov	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  00138	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  0013e	a3 04 00 00 00	 mov	 DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, eax
  00143	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  00149	a3 04 00 00 00	 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, eax
  0014e	5d		 pop	 ebp

; 511  :     }
; 512  : }

  0014f	83 c4 08	 add	 esp, 8
  00152	c2 04 00	 ret	 4
$L186910:

; 395  :         }
; 396  :     
; 397  :         // Start the timer
; 398  :         if( command == TIMER_START )

  00155	83 fb 01	 cmp	 ebx, 1
  00158	75 59		 jne	 SHORT $L186911

; 399  :         {
; 400  :             if( m_bTimerStopped )

  0015a	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  00160	74 24		 je	 SHORT $L186912

; 401  :                 m_llBaseTime += qwTime.QuadPart - m_llStopTime;

  00162	8b d1		 mov	 edx, ecx
  00164	2b d6		 sub	 edx, esi
  00166	8b f0		 mov	 esi, eax
  00168	1b f7		 sbb	 esi, edi
  0016a	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  00170	03 fa		 add	 edi, edx
  00172	8b 15 04 00 00
	00		 mov	 edx, DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
  00178	13 d6		 adc	 edx, esi
  0017a	89 3d 00 00 00
	00		 mov	 DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, edi
  00180	89 15 04 00 00
	00		 mov	 DWORD PTR ?m_llBaseTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, edx
$L186912:

; 402  :             m_llStopTime = 0;
; 403  :             m_llLastElapsedTime = qwTime.QuadPart;
; 404  :             m_bTimerStopped = FALSE;
; 405  :             return 0.0f;

  00186	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  0018c	5f		 pop	 edi
  0018d	5b		 pop	 ebx
  0018e	5e		 pop	 esi
  0018f	89 2d 00 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ebp
  00195	89 2d 04 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, ebp
  0019b	89 2d 00 00 00
	00		 mov	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  001a1	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  001a7	a3 04 00 00 00	 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, eax
  001ac	5d		 pop	 ebp

; 511  :     }
; 512  : }

  001ad	83 c4 08	 add	 esp, 8
  001b0	c2 04 00	 ret	 4
$L186911:

; 406  :         }
; 407  :     
; 408  :         // Stop the timer
; 409  :         if( command == TIMER_STOP )

  001b3	83 fb 02	 cmp	 ebx, 2
  001b6	75 38		 jne	 SHORT $L186913

; 410  :         {
; 411  :             if( !m_bTimerStopped )

  001b8	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  001be	75 20		 jne	 SHORT $L186914

; 412  :             {
; 413  :                 m_llStopTime = qwTime.QuadPart;

  001c0	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  001c6	a3 04 00 00 00	 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, eax

; 414  :                 m_llLastElapsedTime = qwTime.QuadPart;

  001cb	89 0d 00 00 00
	00		 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, ecx
  001d1	a3 04 00 00 00	 mov	 DWORD PTR ?m_llLastElapsedTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, eax

; 415  :                 m_bTimerStopped = TRUE;

  001d6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 1
$L186914:

; 416  :             }
; 417  :             return 0.0f;

  001e0	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  001e6	5f		 pop	 edi
  001e7	5b		 pop	 ebx
  001e8	5e		 pop	 esi
  001e9	5d		 pop	 ebp

; 511  :     }
; 512  : }

  001ea	83 c4 08	 add	 esp, 8
  001ed	c2 04 00	 ret	 4
$L186913:

; 418  :         }
; 419  :     
; 420  :         // Advance the timer by 1/10th second
; 421  :         if( command == TIMER_ADVANCE )

  001f0	83 fb 03	 cmp	 ebx, 3
  001f3	75 35		 jne	 SHORT $L186915

; 422  :         {
; 423  :             m_llStopTime += m_llQPFTicksPerSec/10;

  001f5	a1 04 00 00 00	 mov	 eax, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4
  001fa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  00200	55		 push	 ebp
  00201	6a 0a		 push	 10			; 0000000aH
  00203	50		 push	 eax
  00204	51		 push	 ecx
  00205	e8 00 00 00 00	 call	 __alldiv

; 424  :             return 0.0f;

  0020a	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00210	03 f0		 add	 esi, eax
  00212	13 fa		 adc	 edi, edx
  00214	89 3d 04 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA+4, edi
  0021a	5f		 pop	 edi
  0021b	5b		 pop	 ebx
  0021c	89 35 00 00 00
	00		 mov	 DWORD PTR ?m_llStopTime@?9??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA, esi
  00222	5e		 pop	 esi
  00223	5d		 pop	 ebp

; 511  :     }
; 512  : }

  00224	83 c4 08	 add	 esp, 8
  00227	c2 04 00	 ret	 4
$L186915:

; 425  :         }
; 426  : 
; 427  :         if( command == TIMER_GETABSOLUTETIME )

  0022a	83 fb 04	 cmp	 ebx, 4
  0022d	75 16		 jne	 SHORT $L186916

; 428  :         {
; 429  :             fTime = qwTime.QuadPart / (double) m_llQPFTicksPerSec;
; 430  :             return (FLOAT) fTime;

  0022f	df 6c 24 10	 fild	 QWORD PTR _qwTime$186898[esp+24]
  00233	5f		 pop	 edi
  00234	df 2d 00 00 00
	00		 fild	 QWORD PTR ?m_llQPFTicksPerSec@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4_JA
  0023a	5b		 pop	 ebx
  0023b	5e		 pop	 esi
  0023c	5d		 pop	 ebp
  0023d	de f9		 fdivp	 ST(1), ST(0)

; 511  :     }
; 512  : }

  0023f	83 c4 08	 add	 esp, 8
  00242	c2 04 00	 ret	 4
$L186916:

; 431  :         }
; 432  : 
; 433  :         return -1.0f; // Invalid command specified

  00245	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  0024b	5f		 pop	 edi
  0024c	5b		 pop	 ebx
  0024d	5e		 pop	 esi
  0024e	5d		 pop	 ebp

; 511  :     }
; 512  : }

  0024f	83 c4 08	 add	 esp, 8
  00252	c2 04 00	 ret	 4
$L187476:

; 434  :     }
; 435  :     else
; 436  :     {
; 437  :         // Get the time using timeGetTime()
; 438  :         static double m_fLastElapsedTime  = 0.0;
; 439  :         static double m_fBaseTime         = 0.0;
; 440  :         static double m_fStopTime         = 0.0;
; 441  :         double fTime;
; 442  :         double fElapsedTime;
; 443  :         
; 444  :         // Get either the current time or the stop time, depending
; 445  :         // on whether we're stopped and what command was sent
; 446  :         if( m_fStopTime != 0.0 && command != TIMER_START && command != TIMER_GETABSOLUTETIME)

  00255	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@0000000000000000
  0025b	8b 74 24 14	 mov	 esi, DWORD PTR _command$[esp+12]
  0025f	dd 05 00 00 00
	00		 fld	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  00265	da e9		 fucompp
  00267	df e0		 fnstsw	 ax
  00269	f6 c4 44	 test	 ah, 68			; 00000044H
  0026c	7b 12		 jnp	 SHORT $L187477
  0026e	83 fe 01	 cmp	 esi, 1
  00271	74 0d		 je	 SHORT $L187477
  00273	83 fe 04	 cmp	 esi, 4
  00276	74 08		 je	 SHORT $L187477

; 447  :             fTime = m_fStopTime;

  00278	dd 05 00 00 00
	00		 fld	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 448  :         else

  0027e	eb 1e		 jmp	 SHORT $L186929
$L187477:

; 449  :             fTime = GETTIMESTAMP() * 0.001;

  00280	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__timeGetTime@0
  00286	85 c0		 test	 eax, eax
  00288	89 44 24 14	 mov	 DWORD PTR tv221[esp+12], eax
  0028c	db 44 24 14	 fild	 DWORD PTR tv221[esp+12]
  00290	7d 06		 jge	 SHORT $L187480
  00292	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@41f0000000000000
$L187480:
  00298	dc 0d 00 00 00
	00		 fmul	 QWORD PTR __real@3f50624dd2f1a9fc
$L186929:

; 450  :     
; 451  :         // Return the elapsed time
; 452  :         if( command == TIMER_GETELAPSEDTIME )

  0029e	83 fe 06	 cmp	 esi, 6
  002a1	75 1c		 jne	 SHORT $L186930

; 453  :         {   
; 454  :             fElapsedTime = (double) (fTime - m_fLastElapsedTime);

  002a3	dd 05 00 00 00
	00		 fld	 QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  002a9	5e		 pop	 esi
  002aa	d8 e9		 fsubr	 ST(0), ST(1)
  002ac	5d		 pop	 ebp
  002ad	dd 1c 24	 fstp	 QWORD PTR _fElapsedTime$186927[esp+8]

; 455  :             m_fLastElapsedTime = fTime;

  002b0	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 456  :             return (FLOAT) fElapsedTime;

  002b6	dd 04 24	 fld	 QWORD PTR _fElapsedTime$186927[esp+8]

; 511  :     }
; 512  : }

  002b9	83 c4 08	 add	 esp, 8
  002bc	c2 04 00	 ret	 4
$L186930:

; 457  :         }
; 458  :     
; 459  :         // Return the current time
; 460  :         if( command == TIMER_GETAPPTIME )

  002bf	83 fe 05	 cmp	 esi, 5
  002c2	75 0e		 jne	 SHORT $L186933

; 461  :         {
; 462  :             return (FLOAT) (fTime - m_fBaseTime);

  002c4	dc 25 00 00 00
	00		 fsub	 QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  002ca	5e		 pop	 esi
  002cb	5d		 pop	 ebp

; 511  :     }
; 512  : }

  002cc	83 c4 08	 add	 esp, 8
  002cf	c2 04 00	 ret	 4
$L186933:

; 463  :         }
; 464  :     
; 465  :         // Reset the timer
; 466  :         if( command == TIMER_RESET )

  002d2	3b f5		 cmp	 esi, ebp
  002d4	75 2c		 jne	 SHORT $L186935

; 467  :         {
; 468  :             m_fBaseTime         = fTime;

  002d6	dd 15 00 00 00
	00		 fst	 QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  002dc	5e		 pop	 esi

; 469  :             m_fLastElapsedTime  = fTime;

  002dd	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 470  :             m_fStopTime         = 0;
; 471  :             m_bTimerStopped     = FALSE;

  002e3	89 2d 00 00 00
	00		 mov	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  002e9	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@0000000000000000
  002ef	5d		 pop	 ebp
  002f0	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 472  :             return 0.0f;

  002f6	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000

; 511  :     }
; 512  : }

  002fc	83 c4 08	 add	 esp, 8
  002ff	c2 04 00	 ret	 4
$L186935:

; 473  :         }
; 474  :     
; 475  :         // Start the timer
; 476  :         if( command == TIMER_START )

  00302	83 fe 01	 cmp	 esi, 1
  00305	75 42		 jne	 SHORT $L186936

; 477  :         {
; 478  :             if( m_bTimerStopped )

  00307	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  0030d	74 14		 je	 SHORT $L186937

; 479  :                 m_fBaseTime += fTime - m_fStopTime;

  0030f	dd 05 00 00 00
	00		 fld	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  00315	d8 e9		 fsubr	 ST(0), ST(1)
  00317	dc 05 00 00 00
	00		 fadd	 QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  0031d	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fBaseTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
$L186937:

; 480  :             m_fStopTime = 0.0f;

  00323	dd 05 00 00 00
	00		 fld	 QWORD PTR __real@0000000000000000
  00329	5e		 pop	 esi
  0032a	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 481  :             m_fLastElapsedTime  = fTime;
; 482  :             m_bTimerStopped = FALSE;

  00330	89 2d 00 00 00
	00		 mov	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  00336	5d		 pop	 ebp
  00337	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 483  :             return 0.0f;

  0033d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000

; 511  :     }
; 512  : }

  00343	83 c4 08	 add	 esp, 8
  00346	c2 04 00	 ret	 4
$L186936:

; 484  :         }
; 485  :     
; 486  :         // Stop the timer
; 487  :         if( command == TIMER_STOP )

  00349	83 fe 02	 cmp	 esi, 2
  0034c	75 3c		 jne	 SHORT $L186938

; 488  :         {
; 489  :             if( !m_bTimerStopped )

  0034e	39 2d 00 00 00
	00		 cmp	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, ebp
  00354	75 24		 jne	 SHORT $L187474

; 490  :             {
; 491  :                 m_fStopTime = fTime;

  00356	dd 15 00 00 00
	00		 fst	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  0035c	5e		 pop	 esi

; 492  :                 m_fLastElapsedTime  = fTime;

  0035d	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fLastElapsedTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 493  :                 m_bTimerStopped = TRUE;

  00363	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?m_bTimerStopped@?1??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4HA, 1

; 494  :             }
; 495  :             return 0.0f;

  0036d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00373	5d		 pop	 ebp

; 511  :     }
; 512  : }

  00374	83 c4 08	 add	 esp, 8
  00377	c2 04 00	 ret	 4
$L187474:
  0037a	5e		 pop	 esi

; 493  :                 m_bTimerStopped = TRUE;

  0037b	dd d8		 fstp	 ST(0)

; 494  :             }
; 495  :             return 0.0f;

  0037d	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000
  00383	5d		 pop	 ebp

; 511  :     }
; 512  : }

  00384	83 c4 08	 add	 esp, 8
  00387	c2 04 00	 ret	 4
$L186938:

; 496  :         }
; 497  :     
; 498  :         // Advance the timer by 1/10th second
; 499  :         if( command == TIMER_ADVANCE )

  0038a	83 fe 03	 cmp	 esi, 3
  0038d	75 22		 jne	 SHORT $L186940
  0038f	dd d8		 fstp	 ST(0)
  00391	5e		 pop	 esi

; 500  :         {
; 501  :             m_fStopTime += 0.1f;

  00392	dd 05 00 00 00
	00		 fld	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA
  00398	5d		 pop	 ebp
  00399	dc 05 00 00 00
	00		 fadd	 QWORD PTR __real@3fb99999a0000000
  0039f	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?m_fStopTime@?CJ@??DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z@4NA

; 502  :             return 0.0f;

  003a5	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@00000000

; 511  :     }
; 512  : }

  003ab	83 c4 08	 add	 esp, 8
  003ae	c2 04 00	 ret	 4
$L186940:

; 503  :         }
; 504  : 
; 505  :         if( command == TIMER_GETABSOLUTETIME )

  003b1	83 fe 04	 cmp	 esi, 4
  003b4	0f 84 57 fd ff
	ff		 je	 $L186919
  003ba	5e		 pop	 esi
  003bb	dd d8		 fstp	 ST(0)

; 506  :         {
; 507  :             return (FLOAT) fTime;
; 508  :         }
; 509  : 
; 510  :         return -1.0f; // Invalid command specified

  003bd	d9 05 00 00 00
	00		 fld	 DWORD PTR __real@bf800000
  003c3	5d		 pop	 ebp

; 511  :     }
; 512  : }

  003c4	83 c4 08	 add	 esp, 8
  003c7	c2 04 00	 ret	 4
?DXUtil_Timer@@YGMW4TIMER_COMMAND@@@Z ENDP		; DXUtil_Timer
_TEXT	ENDS
PUBLIC	__tcsncpy
EXTRN	__mbsnbcpy:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\tchar.h
;	COMDAT __tcsncpy
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__s2$ = 12						; size = 4
__n$ = 16						; size = 4
__tcsncpy PROC NEAR					; COMDAT

; 843  : __inline _PC _tcsncpy(_PC _s1,_CPC _s2,size_t _n) {return (_PC)_mbsnbcpy((_PUC)_s1,(_CPUC)_s2,_n);}

  00000	e9 00 00 00 00	 jmp	 __mbsnbcpy
__tcsncpy ENDP
_TEXT	ENDS
PUBLIC	__tcsrchr
EXTRN	__mbsrchr:NEAR
; Function compile flags: /Ogty
;	COMDAT __tcsrchr
_TEXT	SEGMENT
__s1$ = 8						; size = 4
__c$ = 12						; size = 4
__tcsrchr PROC NEAR					; COMDAT

; 845  : __inline _PC _tcsrchr(_CPC _s1,_UI _c) {return (_PC)_mbsrchr((_CPUC)_s1,_c);}

  00000	e9 00 00 00 00	 jmp	 __mbsrchr
__tcsrchr ENDP
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z ; DXUtil_ConvertAnsiStringToWideCch
EXTRN	?MultiByteToWideCharEx@@YAHIKPBDHPAGH@Z:NEAR	; MultiByteToWideCharEx
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\dxutil.cpp
;	COMDAT ?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z PROC NEAR ; DXUtil_ConvertAnsiStringToWideCch, COMDAT

; 526  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 527  :     if( wstrDestination==NULL || strSource==NULL || cchDestChar < 1 )

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _wstrDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 3c		 je	 SHORT $L186949
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _strSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 34		 je	 SHORT $L186949
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cchDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 2b		 jl	 SHORT $L186949

; 529  : 
; 530  :     int nResult = MultiByteToWideCharEx( CP_ACP, 0, strSource, -1, wstrDestination, cchDestChar );

  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	6a ff		 push	 -1
  0001f	50		 push	 eax
  00020	6a 00		 push	 0
  00022	6a 00		 push	 0
  00024	e8 00 00 00 00	 call	 ?MultiByteToWideCharEx@@YAHIKPBDHPAGH@Z ; MultiByteToWideCharEx
  00029	83 c4 18	 add	 esp, 24			; 00000018H

; 531  :     wstrDestination[cchDestChar-1] = 0;
; 532  :     
; 533  :     if( nResult == 0 )

  0002c	33 c9		 xor	 ecx, ecx
  0002e	85 c0		 test	 eax, eax
  00030	0f 95 c1	 setne	 cl
  00033	66 c7 44 77 fe
	00 00		 mov	 WORD PTR [edi+esi*2-2], 0
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	49		 dec	 ecx
  0003d	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  00043	8b c1		 mov	 eax, ecx

; 534  :         return E_FAIL;
; 535  :     return S_OK;
; 536  : }

  00045	c3		 ret	 0
$L186949:
  00046	5f		 pop	 edi

; 528  :         return E_INVALIDARG;

  00047	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0004c	5e		 pop	 esi

; 534  :         return E_FAIL;
; 535  :     return S_OK;
; 536  : }

  0004d	c3		 ret	 0
?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z ENDP	; DXUtil_ConvertAnsiStringToWideCch
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z ; DXUtil_ConvertWideStringToAnsiCch
EXTRN	?WideCharToMultiByteEx@@YAHIKPBGHPADHPBDPAH@Z:NEAR ; WideCharToMultiByteEx
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z PROC NEAR ; DXUtil_ConvertWideStringToAnsiCch, COMDAT

; 549  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 550  :     if( strDestination==NULL || wstrSource==NULL || cchDestChar < 1 )

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _strDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 3e		 je	 SHORT $L186961
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _wstrSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 36		 je	 SHORT $L186961
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cchDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 2d		 jl	 SHORT $L186961

; 552  : 
; 553  :     int nResult = WideCharToMultiByteEx( CP_ACP, 0, wstrSource, -1, strDestination, 
; 554  :                                        cchDestChar*sizeof(CHAR), NULL, NULL );

  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	6a ff		 push	 -1
  00023	50		 push	 eax
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ?WideCharToMultiByteEx@@YAHIKPBGHPADHPBDPAH@Z ; WideCharToMultiByteEx
  0002d	83 c4 20	 add	 esp, 32			; 00000020H

; 555  :     strDestination[cchDestChar-1] = 0;
; 556  :     
; 557  :     if( nResult == 0 )

  00030	33 c9		 xor	 ecx, ecx
  00032	85 c0		 test	 eax, eax
  00034	0f 95 c1	 setne	 cl
  00037	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	49		 dec	 ecx
  0003f	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  00045	8b c1		 mov	 eax, ecx

; 558  :         return E_FAIL;
; 559  :     return S_OK;
; 560  : }

  00047	c3		 ret	 0
$L186961:
  00048	5f		 pop	 edi

; 551  :         return E_INVALIDARG;

  00049	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0004e	5e		 pop	 esi

; 558  :         return E_FAIL;
; 559  :     return S_OK;
; 560  : }

  0004f	c3		 ret	 0
?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z ENDP	; DXUtil_ConvertWideStringToAnsiCch
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z ; DXUtil_ConvertGenericStringToAnsiCch
EXTRN	_strncpy:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z PROC NEAR ; DXUtil_ConvertGenericStringToAnsiCch, COMDAT

; 573  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 574  :     if( strDestination==NULL || tstrSource==NULL || cchDestChar < 1 )

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _strDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 26		 je	 SHORT $L186974
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _tstrSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $L186974
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cchDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 15		 jl	 SHORT $L186974

; 576  : 
; 577  : #ifdef _UNICODE
; 578  :     return DXUtil_ConvertWideStringToAnsiCch( strDestination, tstrSource, cchDestChar );
; 579  : #else
; 580  :     strncpy( strDestination, tstrSource, cchDestChar );

  0001b	56		 push	 esi
  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _strncpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 581  :     strDestination[cchDestChar-1] = '\0';

  00026	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0002b	5f		 pop	 edi

; 582  :     return S_OK;

  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 583  : #endif   
; 584  : }

  0002f	c3		 ret	 0
$L186974:
  00030	5f		 pop	 edi

; 575  :         return E_INVALIDARG;

  00031	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00036	5e		 pop	 esi

; 583  : #endif   
; 584  : }

  00037	c3		 ret	 0
?DXUtil_ConvertGenericStringToAnsiCch@@YAJPADPBDH@Z ENDP ; DXUtil_ConvertGenericStringToAnsiCch
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertGenericStringToWideCch@@YAJPAGPBDH@Z ; DXUtil_ConvertGenericStringToWideCch
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertGenericStringToWideCch@@YAJPAGPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToWideCch@@YAJPAGPBDH@Z PROC NEAR ; DXUtil_ConvertGenericStringToWideCch, COMDAT

; 599  :     if( wstrDestination==NULL || tstrSource==NULL || cchDestChar < 1 )

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _wstrDestination$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 22		 je	 SHORT $L186983
  00008	8b 44 24 08	 mov	 eax, DWORD PTR _tstrSource$[esp-4]
  0000c	85 c0		 test	 eax, eax
  0000e	74 1a		 je	 SHORT $L186983
  00010	8b 4c 24 0c	 mov	 ecx, DWORD PTR _cchDestChar$[esp-4]
  00014	83 f9 01	 cmp	 ecx, 1
  00017	7c 11		 jl	 SHORT $L186983

; 601  : 
; 602  : #ifdef _UNICODE
; 603  :     wcsncpy( wstrDestination, tstrSource, cchDestChar );
; 604  :     wstrDestination[cchDestChar-1] = L'\0';
; 605  :     return S_OK;
; 606  : #else
; 607  :     return DXUtil_ConvertAnsiStringToWideCch( wstrDestination, tstrSource, cchDestChar );

  00019	89 4c 24 0c	 mov	 DWORD PTR _cchDestChar$[esp-4], ecx
  0001d	89 44 24 08	 mov	 DWORD PTR _tstrSource$[esp-4], eax
  00021	89 54 24 04	 mov	 DWORD PTR _wstrDestination$[esp-4], edx
  00025	e9 00 00 00 00	 jmp	 ?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z ; DXUtil_ConvertAnsiStringToWideCch
$L186983:

; 600  :         return E_INVALIDARG;

  0002a	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H

; 608  : #endif    
; 609  : }

  0002f	c3		 ret	 0
?DXUtil_ConvertGenericStringToWideCch@@YAJPAGPBDH@Z ENDP ; DXUtil_ConvertGenericStringToWideCch
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z ; DXUtil_ConvertAnsiStringToGenericCch
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z PROC NEAR ; DXUtil_ConvertAnsiStringToGenericCch, COMDAT

; 623  : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 624  :     if( tstrDestination==NULL || strSource==NULL || cchDestChar < 1 )

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _tstrDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 26		 je	 SHORT $L186991
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _strSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $L186991
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cchDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 15		 jl	 SHORT $L186991

; 626  :         
; 627  : #ifdef _UNICODE
; 628  :     return DXUtil_ConvertAnsiStringToWideCch( tstrDestination, strSource, cchDestChar );
; 629  : #else
; 630  :     strncpy( tstrDestination, strSource, cchDestChar );

  0001b	56		 push	 esi
  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _strncpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH

; 631  :     tstrDestination[cchDestChar-1] = '\0';

  00026	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0002b	5f		 pop	 edi

; 632  :     return S_OK;

  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 633  : #endif    
; 634  : }

  0002f	c3		 ret	 0
$L186991:
  00030	5f		 pop	 edi

; 625  :         return E_INVALIDARG;

  00031	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00036	5e		 pop	 esi

; 633  : #endif    
; 634  : }

  00037	c3		 ret	 0
?DXUtil_ConvertAnsiStringToGenericCch@@YAJPADPBDH@Z ENDP ; DXUtil_ConvertAnsiStringToGenericCch
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertWideStringToGenericCch@@YAJPADPBGH@Z ; DXUtil_ConvertWideStringToGenericCch
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertWideStringToGenericCch@@YAJPADPBGH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToGenericCch@@YAJPADPBGH@Z PROC NEAR ; DXUtil_ConvertWideStringToGenericCch, COMDAT

; 649  :     if( tstrDestination==NULL || wstrSource==NULL || cchDestChar < 1 )

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _tstrDestination$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 22		 je	 SHORT $L187000
  00008	8b 44 24 08	 mov	 eax, DWORD PTR _wstrSource$[esp-4]
  0000c	85 c0		 test	 eax, eax
  0000e	74 1a		 je	 SHORT $L187000
  00010	8b 4c 24 0c	 mov	 ecx, DWORD PTR _cchDestChar$[esp-4]
  00014	83 f9 01	 cmp	 ecx, 1
  00017	7c 11		 jl	 SHORT $L187000

; 651  : 
; 652  : #ifdef _UNICODE
; 653  :     wcsncpy( tstrDestination, wstrSource, cchDestChar );
; 654  :     tstrDestination[cchDestChar-1] = L'\0';    
; 655  :     return S_OK;
; 656  : #else
; 657  :     return DXUtil_ConvertWideStringToAnsiCch( tstrDestination, wstrSource, cchDestChar );

  00019	89 4c 24 0c	 mov	 DWORD PTR _cchDestChar$[esp-4], ecx
  0001d	89 44 24 08	 mov	 DWORD PTR _wstrSource$[esp-4], eax
  00021	89 54 24 04	 mov	 DWORD PTR _tstrDestination$[esp-4], edx
  00025	e9 00 00 00 00	 jmp	 ?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z ; DXUtil_ConvertWideStringToAnsiCch
$L187000:

; 650  :         return E_INVALIDARG;

  0002a	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H

; 658  : #endif
; 659  : }

  0002f	c3		 ret	 0
?DXUtil_ConvertWideStringToGenericCch@@YAJPADPBGH@Z ENDP ; DXUtil_ConvertWideStringToGenericCch
_TEXT	ENDS
PUBLIC	??_C@_0BF@PHKGEBGA@?$CFs?2C?$CL?$CL?2?$CFs?2readme?4txt?$AA@ ; `string'
PUBLIC	??_C@_01KICIPPFI@?2?$AA@			; `string'
PUBLIC	??_C@_0M@KCHKBMF@?2readme?4txt?$AA@		; `string'
PUBLIC	??_C@_0M@KFDNOLCO@shell32?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@		; `string'
PUBLIC	??_C@_04PMOCAHAA@open?$AA@			; `string'
PUBLIC	??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@	; `string'
PUBLIC	??_C@_0BK@MEKHEPPF@Could?5not?5find?5readme?4txt?$AA@ ; `string'
PUBLIC	?DXUtil_LaunchReadme@@YAXPAUHWND__@@PAD@Z	; DXUtil_LaunchReadme
EXTRN	__snprintf:NEAR
EXTRN	__imp__FreeLibrary@4:NEAR
EXTRN	__imp__GetProcAddress@8:NEAR
EXTRN	__imp__GetFileAttributesA@4:NEAR
EXTRN	__imp__lstrcatA@8:NEAR
EXTRN	__imp__MessageBoxA@16:NEAR
EXTRN	__imp__LoadLibraryA@4:NEAR
EXTRN	__imp__GetModuleFileNameA@12:NEAR
;	COMDAT ??_C@_0BF@PHKGEBGA@?$CFs?2C?$CL?$CL?2?$CFs?2readme?4txt?$AA@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\tchar.h
CONST	SEGMENT
??_C@_0BF@PHKGEBGA@?$CFs?2C?$CL?$CL?2?$CFs?2readme?4txt?$AA@ DB '%s\C++\%'
	DB	's\readme.txt', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01KICIPPFI@?2?$AA@
CONST	SEGMENT
??_C@_01KICIPPFI@?2?$AA@ DB '\', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCHKBMF@?2readme?4txt?$AA@
CONST	SEGMENT
??_C@_0M@KCHKBMF@?2readme?4txt?$AA@ DB '\readme.txt', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KFDNOLCO@shell32?4dll?$AA@
CONST	SEGMENT
??_C@_0M@KFDNOLCO@shell32?4dll?$AA@ DB 'shell32.dll', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@
CONST	SEGMENT
??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@ DB 'ShellExecuteA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PMOCAHAA@open?$AA@
CONST	SEGMENT
??_C@_04PMOCAHAA@open?$AA@ DB 'open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@
CONST	SEGMENT
??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@ DB 'DirectX SDK Sample', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MEKHEPPF@Could?5not?5find?5readme?4txt?$AA@
CONST	SEGMENT
??_C@_0BK@MEKHEPPF@Could?5not?5find?5readme?4txt?$AA@ DB 'Could not find '
	DB	'readme.txt', 00H				; `string'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_directx\dxutil.cpp
CONST	ENDS
;	COMDAT ?DXUtil_LaunchReadme@@YAXPAUHWND__@@PAD@Z
_TEXT	SEGMENT
_bSuccess$ = -1825					; size = 1
_hKey$187014 = -1824					; size = 4
$T187540 = -1820					; size = 4
_dwSize$187021 = -1816					; size = 4
_dwType$187020 = -1812					; size = 4
_strExePath$ = -1808					; size = 260
_strReadmePath$ = -1548					; size = 1024
_strExeName$ = -524					; size = 260
_strSamplePath$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_hWnd$ = 8						; size = 4
_strLoc$ = 12						; size = 4
?DXUtil_LaunchReadme@@YAXPAUHWND__@@PAD@Z PROC NEAR	; DXUtil_LaunchReadme, COMDAT

; 670  : {

  00000	81 ec 24 07 00
	00		 sub	 esp, 1828		; 00000724H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	53		 push	 ebx
  0000e	55		 push	 ebp
  0000f	56		 push	 esi

; 671  : 
; 672  : #ifdef UNDER_CE
; 673  :     // This is not available on PocketPC
; 674  :     MessageBox( hWnd, TEXT("For operating instructions, please open the ")
; 675  :                       TEXT("readme.txt file included with the project."),
; 676  :                 TEXT("DirectX SDK Sample"), MB_ICONWARNING | MB_OK );
; 677  : 
; 678  :     return;
; 679  : #else 
; 680  : 
; 681  :     bool bSuccess = false;
; 682  :     bool bFound = false;
; 683  :     TCHAR strReadmePath[1024];
; 684  :     TCHAR strExeName[MAX_PATH];
; 685  :     TCHAR strExePath[MAX_PATH];
; 686  :     TCHAR strSamplePath[MAX_PATH];
; 687  :     TCHAR* strLastSlash = NULL;
; 688  : 
; 689  :     lstrcpy( strReadmePath, TEXT("") );

  00010	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__lstrcpyA@8
  00016	57		 push	 edi
  00017	8b bc 24 3c 07
	00 00		 mov	 edi, DWORD PTR _strLoc$[esp+1840]
  0001e	89 84 24 30 07
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+1844], eax
  00025	8b 84 24 38 07
	00 00		 mov	 eax, DWORD PTR _hWnd$[esp+1840]
  0002c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00031	8d 8c 24 2c 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1848]
  00038	51		 push	 ecx

; 788  :         lstrcat( strReadmePath, TEXT("\\readme.txt") );

  00039	89 44 24 20	 mov	 DWORD PTR $T187540[esp+1852], eax
  0003d	c6 44 24 1b 00	 mov	 BYTE PTR _bSuccess$[esp+1852], 0
  00042	32 db		 xor	 bl, bl
  00044	ff d6		 call	 esi
  00046	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0004b	8d 54 24 28	 lea	 edx, DWORD PTR _strExePath$[esp+1848]
  0004f	52		 push	 edx
  00050	ff d6		 call	 esi
  00052	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00057	8d 84 24 2c 05
	00 00		 lea	 eax, DWORD PTR _strExeName$[esp+1848]
  0005e	50		 push	 eax
  0005f	ff d6		 call	 esi
  00061	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00066	8d 8c 24 30 06
	00 00		 lea	 ecx, DWORD PTR _strSamplePath$[esp+1848]
  0006d	51		 push	 ecx
  0006e	ff d6		 call	 esi
  00070	85 ff		 test	 edi, edi
  00072	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__GetFileAttributesA@4
  00078	0f 84 9d 00 00
	00		 je	 $L187554
  0007e	8d 54 24 14	 lea	 edx, DWORD PTR _hKey$187014[esp+1844]
  00082	52		 push	 edx
  00083	68 19 00 02 00	 push	 131097			; 00020019H
  00088	6a 00		 push	 0
  0008a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BP@HEGLIIKH@Software?2Microsoft?2DirectX?5SDK?$AA@
  0008f	68 02 00 00 80	 push	 -2147483646		; 80000002H
  00094	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegOpenKeyExA@20
  0009a	85 c0		 test	 eax, eax
  0009c	75 72		 jne	 SHORT $L187552
  0009e	8d 44 24 1c	 lea	 eax, DWORD PTR _dwSize$187021[esp+1844]
  000a2	50		 push	 eax
  000a3	8b 44 24 18	 mov	 eax, DWORD PTR _hKey$187014[esp+1848]
  000a7	8d 8c 24 30 06
	00 00		 lea	 ecx, DWORD PTR _strSamplePath$[esp+1848]
  000ae	51		 push	 ecx
  000af	8d 54 24 28	 lea	 edx, DWORD PTR _dwType$187020[esp+1852]
  000b3	52		 push	 edx
  000b4	6a 00		 push	 0
  000b6	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BE@LKAAOJGK@DX9SDK?5Samples?5Path?$AA@
  000bb	50		 push	 eax
  000bc	c7 44 24 34 04
	01 00 00	 mov	 DWORD PTR _dwSize$187021[esp+1868], 260 ; 00000104H
  000c4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  000ca	85 c0		 test	 eax, eax
  000cc	88 9c 24 2f 07
	00 00		 mov	 BYTE PTR _strSamplePath$[esp+2103], bl
  000d3	75 3b		 jne	 SHORT $L187552
  000d5	57		 push	 edi
  000d6	8d 8c 24 30 06
	00 00		 lea	 ecx, DWORD PTR _strSamplePath$[esp+1848]
  000dd	51		 push	 ecx
  000de	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BF@PHKGEBGA@?$CFs?2C?$CL?$CL?2?$CFs?2readme?4txt?$AA@
  000e3	8d 94 24 34 01
	00 00		 lea	 edx, DWORD PTR _strReadmePath$[esp+1856]
  000ea	68 ff 03 00 00	 push	 1023			; 000003ffH
  000ef	52		 push	 edx
  000f0	e8 00 00 00 00	 call	 __snprintf
  000f5	83 c4 14	 add	 esp, 20			; 00000014H
  000f8	8d 84 24 28 01
	00 00		 lea	 eax, DWORD PTR _strReadmePath$[esp+1844]
  000ff	50		 push	 eax
  00100	88 9c 24 2b 05
	00 00		 mov	 BYTE PTR _strReadmePath$[esp+2871], bl
  00107	ff d5		 call	 ebp
  00109	83 f8 ff	 cmp	 eax, -1
  0010c	74 02		 je	 SHORT $L187552

; 690  :     lstrcpy( strExePath, TEXT("") );
; 691  :     lstrcpy( strExeName, TEXT("") );
; 692  :     lstrcpy( strSamplePath, TEXT("") );
; 693  : 
; 694  :     // If the user provided a location for the readme, check there first.
; 695  :     if( strLoc )
; 696  :     {
; 697  :         HKEY  hKey;
; 698  :         LONG lResult = RegOpenKeyEx( HKEY_LOCAL_MACHINE,
; 699  :                                     _T("Software\\Microsoft\\DirectX SDK"),
; 700  :                                     0, KEY_READ, &hKey );
; 701  :         if( ERROR_SUCCESS == lResult )
; 702  :         {
; 703  :             DWORD dwType;
; 704  :             DWORD dwSize = MAX_PATH * sizeof(TCHAR);
; 705  :             lResult = RegQueryValueEx( hKey, _T("DX9SDK Samples Path"), NULL,
; 706  :                                       &dwType, (BYTE*)strSamplePath, &dwSize );
; 707  :             strSamplePath[MAX_PATH-1] = 0; // RegQueryValueEx doesn't NULL term if buffer too small
; 708  :             
; 709  :             if( ERROR_SUCCESS == lResult )
; 710  :             {
; 711  :                 _sntprintf( strReadmePath, 1023, TEXT("%s\\C++\\%s\\readme.txt"), 
; 712  :                             strSamplePath, strLoc );
; 713  :                 strReadmePath[1023] = 0;
; 714  : 
; 715  :                 if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )
; 716  :                     bFound = TRUE;

  0010e	b3 01		 mov	 bl, 1
$L187552:

; 717  :             }
; 718  :         }
; 719  : 
; 720  :         RegCloseKey( hKey );

  00110	8b 4c 24 14	 mov	 ecx, DWORD PTR _hKey$187014[esp+1844]
  00114	51		 push	 ecx
  00115	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegCloseKey@4
$L187554:

; 721  :     }
; 722  : 
; 723  :     // Get the exe name, and exe path
; 724  :     GetModuleFileName( NULL, strExePath, MAX_PATH );

  0011b	68 04 01 00 00	 push	 260			; 00000104H
  00120	8d 54 24 28	 lea	 edx, DWORD PTR _strExePath$[esp+1848]
  00124	52		 push	 edx
  00125	6a 00		 push	 0
  00127	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleFileNameA@12

; 725  :     strExePath[MAX_PATH-1]=0;
; 726  : 
; 727  :     strLastSlash = _tcsrchr( strExePath, TEXT('\\') );

  0012d	8d 44 24 24	 lea	 eax, DWORD PTR _strExePath$[esp+1844]
  00131	6a 5c		 push	 92			; 0000005cH
  00133	50		 push	 eax
  00134	c6 84 24 2f 01
	00 00 00	 mov	 BYTE PTR _strExePath$[esp+2111], 0
  0013c	e8 00 00 00 00	 call	 __mbsrchr
  00141	8b f0		 mov	 esi, eax
  00143	83 c4 08	 add	 esp, 8

; 728  :     if( strLastSlash )

  00146	85 f6		 test	 esi, esi
  00148	74 3a		 je	 SHORT $L187028

; 729  :     {
; 730  :         _tcsncpy( strExeName, &strLastSlash[1], MAX_PATH );

  0014a	68 04 01 00 00	 push	 260			; 00000104H
  0014f	8d 4e 01	 lea	 ecx, DWORD PTR [esi+1]
  00152	51		 push	 ecx
  00153	8d 94 24 30 05
	00 00		 lea	 edx, DWORD PTR _strExeName$[esp+1852]
  0015a	52		 push	 edx
  0015b	e8 00 00 00 00	 call	 __mbsnbcpy

; 731  :         strExeName[MAX_PATH-1]=0;
; 732  : 
; 733  :         // Chop the exe name from the exe path
; 734  :         *strLastSlash = 0;
; 735  : 
; 736  :         // Chop the .exe from the exe name
; 737  :         strLastSlash = _tcsrchr( strExeName, TEXT('.') );

  00160	8d 84 24 34 05
	00 00		 lea	 eax, DWORD PTR _strExeName$[esp+1856]
  00167	6a 2e		 push	 46			; 0000002eH
  00169	c6 84 24 3b 06
	00 00 00	 mov	 BYTE PTR _strExeName$[esp+2119], 0
  00171	50		 push	 eax
  00172	c6 06 00	 mov	 BYTE PTR [esi], 0
  00175	e8 00 00 00 00	 call	 __mbsrchr
  0017a	83 c4 14	 add	 esp, 20			; 00000014H

; 738  :         if( strLastSlash )

  0017d	85 c0		 test	 eax, eax
  0017f	74 03		 je	 SHORT $L187028

; 739  :             *strLastSlash = 0;

  00181	c6 00 00	 mov	 BYTE PTR [eax], 0
$L187028:

; 740  :     }
; 741  : 
; 742  :     if( !bFound )

  00184	84 db		 test	 bl, bl
  00186	0f 85 64 01 00
	00		 jne	 $L187546

; 743  :     {
; 744  :         // Search in "%EXE_DIR%\..\%EXE_NAME%".  This matchs the DirectX SDK layout
; 745  :         _tcscpy( strReadmePath, strExePath );

  0018c	33 c0		 xor	 eax, eax
  0018e	8b ff		 npad	 2
$L187515:
  00190	8a 4c 04 24	 mov	 cl, BYTE PTR _strExePath$[esp+eax+1844]
  00194	88 8c 04 28 01
	00 00		 mov	 BYTE PTR _strReadmePath$[esp+eax+1844], cl
  0019b	40		 inc	 eax
  0019c	84 c9		 test	 cl, cl
  0019e	75 f0		 jne	 SHORT $L187515

; 746  : 
; 747  :         strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

  001a0	8d 8c 24 28 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1844]
  001a7	6a 5c		 push	 92			; 0000005cH
  001a9	51		 push	 ecx
  001aa	e8 00 00 00 00	 call	 __mbsrchr
  001af	83 c4 08	 add	 esp, 8

; 748  :         if( strLastSlash )

  001b2	85 c0		 test	 eax, eax
  001b4	74 03		 je	 SHORT $L187030

; 749  :             *strLastSlash = 0;

  001b6	c6 00 00	 mov	 BYTE PTR [eax], 0
$L187030:

; 750  :         lstrcat( strReadmePath, TEXT("\\") );

  001b9	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR __imp__lstrcatA@8
  001bf	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_01KICIPPFI@?2?$AA@
  001c4	8d 94 24 2c 01
	00 00		 lea	 edx, DWORD PTR _strReadmePath$[esp+1848]
  001cb	52		 push	 edx
  001cc	ff d6		 call	 esi

; 751  :         lstrcat( strReadmePath, strExeName );

  001ce	8d 84 24 28 05
	00 00		 lea	 eax, DWORD PTR _strExeName$[esp+1844]
  001d5	50		 push	 eax
  001d6	8d 8c 24 2c 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1848]
  001dd	51		 push	 ecx
  001de	ff d6		 call	 esi

; 752  :         lstrcat( strReadmePath, TEXT("\\readme.txt") );

  001e0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KCHKBMF@?2readme?4txt?$AA@
  001e5	8d 94 24 2c 01
	00 00		 lea	 edx, DWORD PTR _strReadmePath$[esp+1848]
  001ec	52		 push	 edx
  001ed	ff d6		 call	 esi

; 753  :         if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

  001ef	8d 84 24 28 01
	00 00		 lea	 eax, DWORD PTR _strReadmePath$[esp+1844]
  001f6	50		 push	 eax
  001f7	ff d5		 call	 ebp
  001f9	83 f8 ff	 cmp	 eax, -1
  001fc	0f 85 ee 00 00
	00		 jne	 $L187546

; 754  :             bFound = TRUE;
; 755  :     }
; 756  : 
; 757  :     if( !bFound )
; 758  :     {
; 759  :         // Search in "%EXE_DIR%\"
; 760  :         _tcscpy( strReadmePath, strExePath );

  00202	33 c0		 xor	 eax, eax
$L187516:
  00204	8a 4c 04 24	 mov	 cl, BYTE PTR _strExePath$[esp+eax+1844]
  00208	88 8c 04 28 01
	00 00		 mov	 BYTE PTR _strReadmePath$[esp+eax+1844], cl
  0020f	40		 inc	 eax
  00210	84 c9		 test	 cl, cl
  00212	75 f0		 jne	 SHORT $L187516

; 761  :         lstrcat( strReadmePath, TEXT("\\readme.txt") );

  00214	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KCHKBMF@?2readme?4txt?$AA@
  00219	8d 8c 24 2c 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1848]
  00220	51		 push	 ecx
  00221	ff d6		 call	 esi

; 762  :         if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

  00223	8d 94 24 28 01
	00 00		 lea	 edx, DWORD PTR _strReadmePath$[esp+1844]
  0022a	52		 push	 edx
  0022b	ff d5		 call	 ebp
  0022d	83 f8 ff	 cmp	 eax, -1
  00230	0f 85 ba 00 00
	00		 jne	 $L187546

; 763  :             bFound = TRUE;
; 764  :     }
; 765  : 
; 766  :     if( !bFound )
; 767  :     {
; 768  :         // Search in "%EXE_DIR%\.."
; 769  :         _tcscpy( strReadmePath, strExePath );

  00236	33 c0		 xor	 eax, eax
  00238	eb 06 8d 9b 00
	00 00 00	 npad	 8
$L187517:
  00240	8a 4c 04 24	 mov	 cl, BYTE PTR _strExePath$[esp+eax+1844]
  00244	88 8c 04 28 01
	00 00		 mov	 BYTE PTR _strReadmePath$[esp+eax+1844], cl
  0024b	40		 inc	 eax
  0024c	84 c9		 test	 cl, cl
  0024e	75 f0		 jne	 SHORT $L187517

; 770  :         strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

  00250	8d 84 24 28 01
	00 00		 lea	 eax, DWORD PTR _strReadmePath$[esp+1844]
  00257	6a 5c		 push	 92			; 0000005cH
  00259	50		 push	 eax
  0025a	e8 00 00 00 00	 call	 __mbsrchr
  0025f	83 c4 08	 add	 esp, 8

; 771  :         if( strLastSlash )

  00262	85 c0		 test	 eax, eax
  00264	74 03		 je	 SHORT $L187037

; 772  :             *strLastSlash = 0;

  00266	c6 00 00	 mov	 BYTE PTR [eax], 0
$L187037:

; 773  :         lstrcat( strReadmePath, TEXT("\\readme.txt") );

  00269	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KCHKBMF@?2readme?4txt?$AA@
  0026e	8d 8c 24 2c 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1848]
  00275	51		 push	 ecx
  00276	ff d6		 call	 esi

; 774  :         if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

  00278	8d 94 24 28 01
	00 00		 lea	 edx, DWORD PTR _strReadmePath$[esp+1844]
  0027f	52		 push	 edx
  00280	ff d5		 call	 ebp
  00282	83 f8 ff	 cmp	 eax, -1
  00285	75 69		 jne	 SHORT $L187546

; 775  :             bFound = TRUE;
; 776  :     }
; 777  : 
; 778  :     if( !bFound )
; 779  :     {
; 780  :         // Search in "%EXE_DIR%\..\.."
; 781  :         _tcscpy( strReadmePath, strExePath );

  00287	33 c0		 xor	 eax, eax
  00289	8d a4 24 00 00
	00 00		 npad	 7
$L187518:
  00290	8a 4c 04 24	 mov	 cl, BYTE PTR _strExePath$[esp+eax+1844]
  00294	88 8c 04 28 01
	00 00		 mov	 BYTE PTR _strReadmePath$[esp+eax+1844], cl
  0029b	40		 inc	 eax
  0029c	84 c9		 test	 cl, cl
  0029e	75 f0		 jne	 SHORT $L187518

; 782  :         strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

  002a0	8d 84 24 28 01
	00 00		 lea	 eax, DWORD PTR _strReadmePath$[esp+1844]
  002a7	6a 5c		 push	 92			; 0000005cH
  002a9	50		 push	 eax
  002aa	e8 00 00 00 00	 call	 __mbsrchr
  002af	83 c4 08	 add	 esp, 8

; 783  :         if( strLastSlash )

  002b2	85 c0		 test	 eax, eax
  002b4	74 03		 je	 SHORT $L187040

; 784  :             *strLastSlash = 0;

  002b6	c6 00 00	 mov	 BYTE PTR [eax], 0
$L187040:

; 785  :         strLastSlash = _tcsrchr( strReadmePath, TEXT('\\') );

  002b9	8d 8c 24 28 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1844]
  002c0	6a 5c		 push	 92			; 0000005cH
  002c2	51		 push	 ecx
  002c3	e8 00 00 00 00	 call	 __mbsrchr
  002c8	83 c4 08	 add	 esp, 8

; 786  :         if( strLastSlash )

  002cb	85 c0		 test	 eax, eax
  002cd	74 03		 je	 SHORT $L187041

; 787  :             *strLastSlash = 0;

  002cf	c6 00 00	 mov	 BYTE PTR [eax], 0
$L187041:

; 788  :         lstrcat( strReadmePath, TEXT("\\readme.txt") );

  002d2	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KCHKBMF@?2readme?4txt?$AA@
  002d7	8d 94 24 2c 01
	00 00		 lea	 edx, DWORD PTR _strReadmePath$[esp+1848]
  002de	52		 push	 edx
  002df	ff d6		 call	 esi

; 789  :         if( GetFileAttributes( strReadmePath ) != 0xFFFFFFFF )

  002e1	8d 84 24 28 01
	00 00		 lea	 eax, DWORD PTR _strReadmePath$[esp+1844]
  002e8	50		 push	 eax
  002e9	ff d5		 call	 ebp
  002eb	83 f8 ff	 cmp	 eax, -1
  002ee	74 51		 je	 SHORT $L187556
$L187546:

; 790  :             bFound = TRUE;
; 791  :     }
; 792  : 
; 793  :     if( bFound )
; 794  :     {
; 795  :         // GetProcAddress for ShellExecute, so we don't have to include shell32.lib 
; 796  :         // in every project that uses dxutil.cpp
; 797  :         LPShellExecute pShellExecute = NULL;
; 798  :         HINSTANCE hInstShell32 = LoadLibrary(TEXT("shell32.dll"));

  002f0	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0M@KFDNOLCO@shell32?4dll?$AA@
  002f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  002fb	8b f0		 mov	 esi, eax

; 799  :         if (hInstShell32 != NULL)

  002fd	85 f6		 test	 esi, esi
  002ff	74 40		 je	 SHORT $L187556

; 800  :         {
; 801  : #ifdef UNICODE
; 802  :             pShellExecute = (LPShellExecute)GetProcAddress(hInstShell32, _TWINCE("ShellExecuteW"));
; 803  : #else
; 804  :             pShellExecute = (LPShellExecute)GetProcAddress(hInstShell32, _TWINCE("ShellExecuteA"));

  00301	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0O@MOHFGHHE@ShellExecuteA?$AA@
  00306	56		 push	 esi
  00307	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8

; 805  : #endif
; 806  :             if( pShellExecute != NULL )

  0030d	85 c0		 test	 eax, eax
  0030f	74 21		 je	 SHORT $L187555

; 807  :             {
; 808  :                 if( pShellExecute( hWnd, TEXT("open"), strReadmePath, NULL, NULL, SW_SHOW ) > (HINSTANCE) 32 )

  00311	8b 54 24 18	 mov	 edx, DWORD PTR $T187540[esp+1844]
  00315	6a 05		 push	 5
  00317	6a 00		 push	 0
  00319	6a 00		 push	 0
  0031b	8d 8c 24 34 01
	00 00		 lea	 ecx, DWORD PTR _strReadmePath$[esp+1856]
  00322	51		 push	 ecx
  00323	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_04PMOCAHAA@open?$AA@
  00328	52		 push	 edx
  00329	ff d0		 call	 eax
  0032b	83 f8 20	 cmp	 eax, 32			; 00000020H

; 809  :                     bSuccess = true;

  0032e	b3 01		 mov	 bl, 1
  00330	77 04		 ja	 SHORT $L187052
$L187555:
  00332	8a 5c 24 13	 mov	 bl, BYTE PTR _bSuccess$[esp+1844]
$L187052:

; 810  :             }
; 811  : 
; 812  :             FreeLibrary(hInstShell32);

  00336	56		 push	 esi
  00337	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4

; 813  :         }
; 814  :     }
; 815  : 
; 816  :     if( !bSuccess )

  0033d	84 db		 test	 bl, bl
  0033f	75 17		 jne	 SHORT $L187054
$L187556:

; 817  :     {
; 818  :         // Tell the user that the readme couldn't be opened
; 819  :         MessageBox( hWnd, TEXT("Could not find readme.txt"), 
; 820  :                     TEXT("DirectX SDK Sample"), MB_ICONWARNING | MB_OK );

  00341	8b 44 24 18	 mov	 eax, DWORD PTR $T187540[esp+1844]
  00345	6a 30		 push	 48			; 00000030H
  00347	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@NHAEFHIC@DirectX?5SDK?5Sample?$AA@
  0034c	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BK@MEKHEPPF@Could?5not?5find?5readme?4txt?$AA@
  00351	50		 push	 eax
  00352	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MessageBoxA@16
$L187054:

; 821  :     }
; 822  : 
; 823  : #endif // UNDER_CE
; 824  : }

  00358	8b 8c 24 30 07
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+1844]
  0035f	5f		 pop	 edi
  00360	5e		 pop	 esi
  00361	5d		 pop	 ebp
  00362	5b		 pop	 ebx
  00363	33 cc		 xor	 ecx, esp
  00365	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0036a	81 c4 24 07 00
	00		 add	 esp, 1828		; 00000724H
  00370	c3		 ret	 0
?DXUtil_LaunchReadme@@YAXPAUHWND__@@PAD@Z ENDP		; DXUtil_LaunchReadme
_TEXT	ENDS
PUBLIC	?DXUtil_Trace@@YAXPADZZ				; DXUtil_Trace
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_Trace@@YAXPADZZ
_TEXT	SEGMENT
_strMsg$ = 8						; size = 4
?DXUtil_Trace@@YAXPADZZ PROC NEAR			; DXUtil_Trace, COMDAT

; 837  : #if defined(DEBUG) | defined(_DEBUG)
; 838  :     TCHAR strBuffer[512];
; 839  :     
; 840  :     va_list args;
; 841  :     va_start(args, strMsg);
; 842  :     _vsntprintf( strBuffer, 512, strMsg, args );
; 843  :     va_end(args);
; 844  : 
; 845  :     OutputDebugString( strBuffer );
; 846  : #else
; 847  :     UNREFERENCED_PARAMETER(strMsg);
; 848  : #endif
; 849  : }

  00000	c3		 ret	 0
?DXUtil_Trace@@YAXPADZZ ENDP				; DXUtil_Trace
_TEXT	ENDS
PUBLIC	??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@ ; `string'
PUBLIC	?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z	; DXUtil_ConvertStringToGUID
EXTRN	_sscanf:NEAR
;	COMDAT ??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@
CONST	SEGMENT
??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@ DB '{'
	DB	'%8X-%4X-%4X-%2X%2X-%2X%2X%2X%2X%2X%2X}', 00H ; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z
_TEXT	SEGMENT
_aiTmp$ = -40						; size = 40
_strSrc$ = 8						; size = 4
_pGuidDest$ = 12					; size = 4
?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z PROC NEAR ; DXUtil_ConvertStringToGUID, COMDAT

; 859  : {

  00000	83 ec 28	 sub	 esp, 40			; 00000028H
  00003	56		 push	 esi

; 860  :     UINT aiTmp[10];
; 861  : 
; 862  :     if( _stscanf( strSrc, TEXT("{%8X-%4X-%4X-%2X%2X-%2X%2X%2X%2X%2X%2X}"),
; 863  :                     &pGuidDest->Data1, 
; 864  :                     &aiTmp[0], &aiTmp[1], 
; 865  :                     &aiTmp[2], &aiTmp[3],
; 866  :                     &aiTmp[4], &aiTmp[5],
; 867  :                     &aiTmp[6], &aiTmp[7],
; 868  :                     &aiTmp[8], &aiTmp[9] ) != 11 )

  00004	8b 74 24 34	 mov	 esi, DWORD PTR _pGuidDest$[esp+40]
  00008	8d 44 24 28	 lea	 eax, DWORD PTR _aiTmp$[esp+80]
  0000c	50		 push	 eax
  0000d	8d 4c 24 28	 lea	 ecx, DWORD PTR _aiTmp$[esp+80]
  00011	51		 push	 ecx
  00012	8d 54 24 28	 lea	 edx, DWORD PTR _aiTmp$[esp+80]
  00016	52		 push	 edx
  00017	8d 44 24 28	 lea	 eax, DWORD PTR _aiTmp$[esp+80]
  0001b	50		 push	 eax
  0001c	8d 4c 24 28	 lea	 ecx, DWORD PTR _aiTmp$[esp+80]
  00020	51		 push	 ecx
  00021	8d 54 24 28	 lea	 edx, DWORD PTR _aiTmp$[esp+80]
  00025	52		 push	 edx
  00026	8d 44 24 28	 lea	 eax, DWORD PTR _aiTmp$[esp+80]
  0002a	50		 push	 eax
  0002b	8d 4c 24 28	 lea	 ecx, DWORD PTR _aiTmp$[esp+80]
  0002f	51		 push	 ecx
  00030	8b 4c 24 50	 mov	 ecx, DWORD PTR _strSrc$[esp+72]
  00034	8d 54 24 28	 lea	 edx, DWORD PTR _aiTmp$[esp+80]
  00038	52		 push	 edx
  00039	8d 44 24 28	 lea	 eax, DWORD PTR _aiTmp$[esp+80]
  0003d	50		 push	 eax
  0003e	56		 push	 esi
  0003f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0CI@FDANOHPD@?$HL?$CF8X?9?$CF4X?9?$CF4X?9?$CF2X?$CF2X?9?$CF2X?$CF2X?$CF2X?$CF2X@
  00044	51		 push	 ecx
  00045	e8 00 00 00 00	 call	 _sscanf
  0004a	83 c4 34	 add	 esp, 52			; 00000034H
  0004d	83 f8 0b	 cmp	 eax, 11			; 0000000bH
  00050	74 17		 je	 SHORT $L187066

; 869  :     {
; 870  :         ZeroMemory( pGuidDest, sizeof(GUID) );

  00052	33 d2		 xor	 edx, edx
  00054	89 16		 mov	 DWORD PTR [esi], edx
  00056	89 56 04	 mov	 DWORD PTR [esi+4], edx
  00059	89 56 08	 mov	 DWORD PTR [esi+8], edx
  0005c	89 56 0c	 mov	 DWORD PTR [esi+12], edx

; 871  :         return E_FAIL;

  0005f	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00064	5e		 pop	 esi

; 886  :     }
; 887  : }

  00065	83 c4 28	 add	 esp, 40			; 00000028H
  00068	c3		 ret	 0
$L187066:

; 872  :     }
; 873  :     else
; 874  :     {
; 875  :         pGuidDest->Data2       = (USHORT) aiTmp[0];

  00069	66 8b 44 24 04	 mov	 ax, WORD PTR _aiTmp$[esp+44]

; 876  :         pGuidDest->Data3       = (USHORT) aiTmp[1];

  0006e	66 8b 4c 24 08	 mov	 cx, WORD PTR _aiTmp$[esp+48]

; 877  :         pGuidDest->Data4[0]    = (BYTE) aiTmp[2];

  00073	8a 54 24 0c	 mov	 dl, BYTE PTR _aiTmp$[esp+52]
  00077	66 89 46 04	 mov	 WORD PTR [esi+4], ax

; 878  :         pGuidDest->Data4[1]    = (BYTE) aiTmp[3];

  0007b	8a 44 24 10	 mov	 al, BYTE PTR _aiTmp$[esp+56]
  0007f	88 46 09	 mov	 BYTE PTR [esi+9], al

; 879  :         pGuidDest->Data4[2]    = (BYTE) aiTmp[4];
; 880  :         pGuidDest->Data4[3]    = (BYTE) aiTmp[5];
; 881  :         pGuidDest->Data4[4]    = (BYTE) aiTmp[6];

  00082	8a 44 24 1c	 mov	 al, BYTE PTR _aiTmp$[esp+68]
  00086	66 89 4e 06	 mov	 WORD PTR [esi+6], cx
  0008a	8a 4c 24 14	 mov	 cl, BYTE PTR _aiTmp$[esp+60]
  0008e	88 56 08	 mov	 BYTE PTR [esi+8], dl
  00091	8a 54 24 18	 mov	 dl, BYTE PTR _aiTmp$[esp+64]
  00095	88 46 0c	 mov	 BYTE PTR [esi+12], al

; 882  :         pGuidDest->Data4[5]    = (BYTE) aiTmp[7];
; 883  :         pGuidDest->Data4[6]    = (BYTE) aiTmp[8];
; 884  :         pGuidDest->Data4[7]    = (BYTE) aiTmp[9];

  00098	8a 44 24 28	 mov	 al, BYTE PTR _aiTmp$[esp+80]
  0009c	88 4e 0a	 mov	 BYTE PTR [esi+10], cl
  0009f	8a 4c 24 20	 mov	 cl, BYTE PTR _aiTmp$[esp+72]
  000a3	88 56 0b	 mov	 BYTE PTR [esi+11], dl
  000a6	8a 54 24 24	 mov	 dl, BYTE PTR _aiTmp$[esp+76]
  000aa	88 46 0f	 mov	 BYTE PTR [esi+15], al
  000ad	88 4e 0d	 mov	 BYTE PTR [esi+13], cl
  000b0	88 56 0e	 mov	 BYTE PTR [esi+14], dl

; 885  :         return S_OK;

  000b3	33 c0		 xor	 eax, eax
  000b5	5e		 pop	 esi

; 886  :     }
; 887  : }

  000b6	83 c4 28	 add	 esp, 40			; 00000028H
  000b9	c3		 ret	 0
?DXUtil_ConvertStringToGUID@@YAJPBDPAU_GUID@@@Z ENDP	; DXUtil_ConvertStringToGUID
_TEXT	ENDS
PUBLIC	??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@ ; `string'
PUBLIC	?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z ; DXUtil_ConvertGUIDToStringCch
;	COMDAT ??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@
CONST	SEGMENT
??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@ DB '{'
	DB	'%0.8X-%0.4X-%0.4X-%0.2X%0.2X-%0.2X%0.2X%0.2X%0.2X%0.2X%0.2X}', 00H ; `string'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z
_TEXT	SEGMENT
_pGuidSrc$ = 8						; size = 4
_strDest$ = 12						; size = 4
_cchDestChar$ = 16					; size = 4
?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z PROC NEAR ; DXUtil_ConvertGUIDToStringCch, COMDAT

; 900  :     int nResult = _sntprintf( strDest, cchDestChar, TEXT("{%0.8X-%0.4X-%0.4X-%0.2X%0.2X-%0.2X%0.2X%0.2X%0.2X%0.2X%0.2X}"),
; 901  :                pGuidSrc->Data1, pGuidSrc->Data2, pGuidSrc->Data3,
; 902  :                pGuidSrc->Data4[0], pGuidSrc->Data4[1],
; 903  :                pGuidSrc->Data4[2], pGuidSrc->Data4[3],
; 904  :                pGuidSrc->Data4[4], pGuidSrc->Data4[5],
; 905  :                pGuidSrc->Data4[6], pGuidSrc->Data4[7] );
; 906  : 
; 907  :     if( nResult < 0 )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _pGuidSrc$[esp-4]
  00004	0f b6 48 0f	 movzx	 ecx, BYTE PTR [eax+15]
  00008	0f b6 50 0e	 movzx	 edx, BYTE PTR [eax+14]
  0000c	51		 push	 ecx
  0000d	0f b6 48 0d	 movzx	 ecx, BYTE PTR [eax+13]
  00011	52		 push	 edx
  00012	0f b6 50 0c	 movzx	 edx, BYTE PTR [eax+12]
  00016	51		 push	 ecx
  00017	0f b6 48 0b	 movzx	 ecx, BYTE PTR [eax+11]
  0001b	52		 push	 edx
  0001c	0f b6 50 0a	 movzx	 edx, BYTE PTR [eax+10]
  00020	51		 push	 ecx
  00021	0f b6 48 09	 movzx	 ecx, BYTE PTR [eax+9]
  00025	52		 push	 edx
  00026	0f b6 50 08	 movzx	 edx, BYTE PTR [eax+8]
  0002a	51		 push	 ecx
  0002b	0f b7 48 06	 movzx	 ecx, WORD PTR [eax+6]
  0002f	52		 push	 edx
  00030	0f b7 50 04	 movzx	 edx, WORD PTR [eax+4]
  00034	8b 00		 mov	 eax, DWORD PTR [eax]
  00036	51		 push	 ecx
  00037	8b 4c 24 30	 mov	 ecx, DWORD PTR _cchDestChar$[esp+32]
  0003b	52		 push	 edx
  0003c	8b 54 24 30	 mov	 edx, DWORD PTR _strDest$[esp+36]
  00040	50		 push	 eax
  00041	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0DO@OBIAHMKG@?$HL?$CF0?48X?9?$CF0?44X?9?$CF0?44X?9?$CF0?42X?$CF0?42X?9?$CF0@
  00046	51		 push	 ecx
  00047	52		 push	 edx
  00048	e8 00 00 00 00	 call	 __snprintf
  0004d	33 c9		 xor	 ecx, ecx
  0004f	83 c4 38	 add	 esp, 56			; 00000038H
  00052	85 c0		 test	 eax, eax
  00054	0f 9d c1	 setge	 cl
  00057	49		 dec	 ecx
  00058	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  0005e	8b c1		 mov	 eax, ecx

; 908  :         return E_FAIL;
; 909  :     return S_OK;
; 910  : }

  00060	c3		 ret	 0
?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z ENDP ; DXUtil_ConvertGUIDToStringCch
_TEXT	ENDS
PUBLIC	??0CArrayList@@QAE@W4ArrayListType@@I@Z		; CArrayList::CArrayList
; Function compile flags: /Ogty
;	COMDAT ??0CArrayList@@QAE@W4ArrayListType@@I@Z
_TEXT	SEGMENT
_Type$ = 8						; size = 4
_BytesPerEntry$ = 12					; size = 4
??0CArrayList@@QAE@W4ArrayListType@@I@Z PROC NEAR	; CArrayList::CArrayList, COMDAT
; _this$ = ecx

; 920  : {

  00000	8b c1		 mov	 eax, ecx

; 921  :     if( Type == AL_REFERENCE )

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _Type$[esp-4]
  00006	83 f9 01	 cmp	 ecx, 1

; 922  :         BytesPerEntry = sizeof(void*);

  00009	ba 04 00 00 00	 mov	 edx, 4
  0000e	74 04		 je	 SHORT $L187097
  00010	8b 54 24 08	 mov	 edx, DWORD PTR _BytesPerEntry$[esp-4]
$L187097:

; 923  :     m_ArrayListType = Type;

  00014	89 08		 mov	 DWORD PTR [eax], ecx

; 924  :     m_pData = NULL;

  00016	33 c9		 xor	 ecx, ecx
  00018	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 925  :     m_BytesPerEntry = BytesPerEntry;

  0001b	89 50 08	 mov	 DWORD PTR [eax+8], edx

; 926  :     m_NumEntries = 0;

  0001e	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 927  :     m_NumEntriesAllocated = 0;

  00021	89 48 10	 mov	 DWORD PTR [eax+16], ecx

; 928  : }

  00024	c2 08 00	 ret	 8
??0CArrayList@@QAE@W4ArrayListType@@I@Z ENDP		; CArrayList::CArrayList
_TEXT	ENDS
PUBLIC	??1CArrayList@@QAE@XZ				; CArrayList::~CArrayList
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
; Function compile flags: /Ogty
;	COMDAT ??1CArrayList@@QAE@XZ
_TEXT	SEGMENT
??1CArrayList@@QAE@XZ PROC NEAR				; CArrayList::~CArrayList, COMDAT
; _this$ = ecx

; 938  :     if( m_pData != NULL )

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	74 07		 je	 SHORT $L187103

; 939  :         safe_delete_array( m_pData );

  00007	50		 push	 eax
  00008	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0000d	59		 pop	 ecx
$L187103:

; 940  : }

  0000e	c3		 ret	 0
??1CArrayList@@QAE@XZ ENDP				; CArrayList::~CArrayList
_TEXT	ENDS
PUBLIC	?Add@CArrayList@@QAEJPAX@Z			; CArrayList::Add
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
; Function compile flags: /Ogty
;	COMDAT ?Add@CArrayList@@QAEJPAX@Z
_TEXT	SEGMENT
_NumEntriesAllocatedNew$187115 = -4			; size = 4
_pEntry$ = 8						; size = 4
?Add@CArrayList@@QAEJPAX@Z PROC NEAR			; CArrayList::Add, COMDAT
; _this$ = ecx

; 950  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	8b d9		 mov	 ebx, ecx

; 951  :     if( m_BytesPerEntry == 0 )

  00004	8b 43 08	 mov	 eax, DWORD PTR [ebx+8]
  00007	85 c0		 test	 eax, eax
  00009	75 0a		 jne	 SHORT $L187110

; 952  :         return E_FAIL;

  0000b	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00010	5b		 pop	 ebx

; 980  : }

  00011	59		 pop	 ecx
  00012	c2 04 00	 ret	 4
$L187110:

; 953  :     if( m_pData == NULL || m_NumEntries + 1 > m_NumEntriesAllocated )

  00015	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00018	85 c9		 test	 ecx, ecx
  0001a	55		 push	 ebp
  0001b	56		 push	 esi
  0001c	57		 push	 edi
  0001d	74 0b		 je	 SHORT $L187113
  0001f	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00022	8b 53 10	 mov	 edx, DWORD PTR [ebx+16]
  00025	41		 inc	 ecx
  00026	3b ca		 cmp	 ecx, edx
  00028	76 6d		 jbe	 SHORT $L187112
$L187113:

; 954  :     {
; 955  :         void* pDataNew;
; 956  :         UINT NumEntriesAllocatedNew;
; 957  :         if( m_NumEntriesAllocated == 0 )

  0002a	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  0002d	85 c9		 test	 ecx, ecx
  0002f	75 0a		 jne	 SHORT $L187116

; 958  :             NumEntriesAllocatedNew = 16;

  00031	c7 44 24 10 10
	00 00 00	 mov	 DWORD PTR _NumEntriesAllocatedNew$187115[esp+20], 16 ; 00000010H

; 959  :         else

  00039	eb 07		 jmp	 SHORT $L187117
$L187116:

; 960  :             NumEntriesAllocatedNew = m_NumEntriesAllocated * 2;

  0003b	8d 14 09	 lea	 edx, DWORD PTR [ecx+ecx]
  0003e	89 54 24 10	 mov	 DWORD PTR _NumEntriesAllocatedNew$187115[esp+20], edx
$L187117:

; 961  :         pDataNew = new BYTE[NumEntriesAllocatedNew * m_BytesPerEntry];

  00042	0f af 44 24 10	 imul	 eax, DWORD PTR _NumEntriesAllocatedNew$187115[esp+20]
  00047	50		 push	 eax
  00048	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  0004d	8b e8		 mov	 ebp, eax
  0004f	83 c4 04	 add	 esp, 4

; 962  :         if( pDataNew == NULL )

  00052	85 ed		 test	 ebp, ebp
  00054	75 0d		 jne	 SHORT $L187120
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5d		 pop	 ebp

; 963  :             return E_OUTOFMEMORY;

  00059	b8 0e 00 07 80	 mov	 eax, -2147024882	; 8007000eH
  0005e	5b		 pop	 ebx

; 980  : }

  0005f	59		 pop	 ecx
  00060	c2 04 00	 ret	 4
$L187120:

; 964  :         if( m_pData != NULL )

  00063	8b 73 04	 mov	 esi, DWORD PTR [ebx+4]
  00066	85 f6		 test	 esi, esi
  00068	74 23		 je	 SHORT $L187122

; 965  :         {
; 966  :             CopyMemory( pDataNew, m_pData, m_NumEntries * m_BytesPerEntry );

  0006a	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0006d	0f af 4b 08	 imul	 ecx, DWORD PTR [ebx+8]
  00071	8b c1		 mov	 eax, ecx
  00073	c1 e9 02	 shr	 ecx, 2
  00076	8b fd		 mov	 edi, ebp
  00078	f3 a5		 rep movsd
  0007a	8b c8		 mov	 ecx, eax
  0007c	83 e1 03	 and	 ecx, 3
  0007f	f3 a4		 rep movsb

; 967  :             safe_delete_array( m_pData );

  00081	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  00084	51		 push	 ecx
  00085	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0008a	83 c4 04	 add	 esp, 4
$L187122:

; 968  :         }
; 969  :         m_pData = pDataNew;
; 970  :         m_NumEntriesAllocated = NumEntriesAllocatedNew;

  0008d	8b 54 24 10	 mov	 edx, DWORD PTR _NumEntriesAllocatedNew$187115[esp+20]
  00091	89 6b 04	 mov	 DWORD PTR [ebx+4], ebp
  00094	89 53 10	 mov	 DWORD PTR [ebx+16], edx
$L187112:

; 971  :     }
; 972  : 
; 973  :     if( m_ArrayListType == AL_VALUE )

  00097	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  0009a	75 31		 jne	 SHORT $L187125

; 974  :         CopyMemory( (BYTE*)m_pData + (m_NumEntries * m_BytesPerEntry), pEntry, m_BytesPerEntry );

  0009c	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0009f	8b 7b 0c	 mov	 edi, DWORD PTR [ebx+12]
  000a2	8b 6b 04	 mov	 ebp, DWORD PTR [ebx+4]
  000a5	0f af f9	 imul	 edi, ecx
  000a8	8b 74 24 18	 mov	 esi, DWORD PTR _pEntry$[esp+16]
  000ac	8b c1		 mov	 eax, ecx
  000ae	03 fd		 add	 edi, ebp
  000b0	c1 e9 02	 shr	 ecx, 2
  000b3	f3 a5		 rep movsd
  000b5	8b c8		 mov	 ecx, eax
  000b7	83 e1 03	 and	 ecx, 3
  000ba	f3 a4		 rep movsb

; 977  :     m_NumEntries++;

  000bc	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000bf	5f		 pop	 edi
  000c0	5e		 pop	 esi
  000c1	40		 inc	 eax
  000c2	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000c5	5d		 pop	 ebp

; 978  : 
; 979  :     return S_OK;

  000c6	33 c0		 xor	 eax, eax
  000c8	5b		 pop	 ebx

; 980  : }

  000c9	59		 pop	 ecx
  000ca	c2 04 00	 ret	 4
$L187125:

; 975  :     else
; 976  :         *(((void**)m_pData) + m_NumEntries) = pEntry;

  000cd	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  000d0	8b 53 04	 mov	 edx, DWORD PTR [ebx+4]
  000d3	8b 44 24 18	 mov	 eax, DWORD PTR _pEntry$[esp+16]
  000d7	89 04 8a	 mov	 DWORD PTR [edx+ecx*4], eax

; 977  :     m_NumEntries++;

  000da	8b 43 0c	 mov	 eax, DWORD PTR [ebx+12]
  000dd	5f		 pop	 edi
  000de	5e		 pop	 esi
  000df	40		 inc	 eax
  000e0	89 43 0c	 mov	 DWORD PTR [ebx+12], eax
  000e3	5d		 pop	 ebp

; 978  : 
; 979  :     return S_OK;

  000e4	33 c0		 xor	 eax, eax
  000e6	5b		 pop	 ebx

; 980  : }

  000e7	59		 pop	 ecx
  000e8	c2 04 00	 ret	 4
?Add@CArrayList@@QAEJPAX@Z ENDP				; CArrayList::Add
_TEXT	ENDS
PUBLIC	?Remove@CArrayList@@QAEXI@Z			; CArrayList::Remove
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Remove@CArrayList@@QAEXI@Z
_TEXT	SEGMENT
_Entry$ = 8						; size = 4
?Remove@CArrayList@@QAEXI@Z PROC NEAR			; CArrayList::Remove, COMDAT
; _this$ = ecx

; 991  :     // Decrement count
; 992  :     m_NumEntries--;

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	53		 push	 ebx

; 993  : 
; 994  :     // Find the entry address
; 995  :     BYTE* pData = (BYTE*)m_pData + (Entry * m_BytesPerEntry);

  00004	8b 59 04	 mov	 ebx, DWORD PTR [ecx+4]
  00007	56		 push	 esi
  00008	8b 71 08	 mov	 esi, DWORD PTR [ecx+8]
  0000b	48		 dec	 eax
  0000c	8b d0		 mov	 edx, eax
  0000e	57		 push	 edi
  0000f	8b 7c 24 10	 mov	 edi, DWORD PTR _Entry$[esp+8]
  00013	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00016	8b c6		 mov	 eax, esi
  00018	0f af c7	 imul	 eax, edi

; 996  : 
; 997  :     // Collapse the array
; 998  :     MoveMemory( pData, pData + m_BytesPerEntry, ( m_NumEntries - Entry ) * m_BytesPerEntry );

  0001b	2b d7		 sub	 edx, edi
  0001d	0f af d6	 imul	 edx, esi
  00020	03 c3		 add	 eax, ebx
  00022	52		 push	 edx
  00023	03 f0		 add	 esi, eax
  00025	56		 push	 esi
  00026	50		 push	 eax
  00027	e8 00 00 00 00	 call	 _memmove
  0002c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0002f	5f		 pop	 edi
  00030	5e		 pop	 esi
  00031	5b		 pop	 ebx

; 999  : }

  00032	c2 04 00	 ret	 4
?Remove@CArrayList@@QAEXI@Z ENDP			; CArrayList::Remove
_TEXT	ENDS
PUBLIC	?GetPtr@CArrayList@@QAEPAXI@Z			; CArrayList::GetPtr
; Function compile flags: /Ogty
;	COMDAT ?GetPtr@CArrayList@@QAEPAXI@Z
_TEXT	SEGMENT
_Entry$ = 8						; size = 4
?GetPtr@CArrayList@@QAEPAXI@Z PROC NEAR			; CArrayList::GetPtr, COMDAT
; _this$ = ecx

; 1010 :     if( m_ArrayListType == AL_VALUE )

  00000	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00003	75 0e		 jne	 SHORT $L187140

; 1011 :         return (BYTE*)m_pData + (Entry * m_BytesPerEntry);

  00005	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00008	0f af 44 24 04	 imul	 eax, DWORD PTR _Entry$[esp-4]
  0000d	03 41 04	 add	 eax, DWORD PTR [ecx+4]

; 1014 : }

  00010	c2 04 00	 ret	 4
$L187140:

; 1012 :     else
; 1013 :         return *(((void**)m_pData) + Entry);

  00013	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00016	8b 4c 24 04	 mov	 ecx, DWORD PTR _Entry$[esp-4]
  0001a	8b 04 88	 mov	 eax, DWORD PTR [eax+ecx*4]

; 1014 : }

  0001d	c2 04 00	 ret	 4
?GetPtr@CArrayList@@QAEPAXI@Z ENDP			; CArrayList::GetPtr
_TEXT	ENDS
PUBLIC	?Contains@CArrayList@@QAE_NPAX@Z		; CArrayList::Contains
; Function compile flags: /Ogty
;	COMDAT ?Contains@CArrayList@@QAE_NPAX@Z
_TEXT	SEGMENT
_pEntryData$ = 8					; size = 4
?Contains@CArrayList@@QAE_NPAX@Z PROC NEAR		; CArrayList::Contains, COMDAT
; _this$ = ecx

; 1025 : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	8b c1		 mov	 eax, ecx

; 1026 :     for( UINT iEntry = 0; iEntry < m_NumEntries; iEntry++ )

  00004	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00007	56		 push	 esi
  00008	33 d2		 xor	 edx, edx
  0000a	85 c9		 test	 ecx, ecx
  0000c	57		 push	 edi
  0000d	76 2e		 jbe	 SHORT $L187151
  0000f	8b 5c 24 14	 mov	 ebx, DWORD PTR _pEntryData$[esp+12]
$L187602:

; 1027 :     {
; 1028 :         if( m_ArrayListType == AL_VALUE )

  00013	83 38 00	 cmp	 DWORD PTR [eax], 0
  00016	75 15		 jne	 SHORT $L187592

; 1029 :         {
; 1030 :             if( memcmp( GetPtr(iEntry), pEntryData, m_BytesPerEntry ) == 0 )

  00018	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0001b	8b 78 04	 mov	 edi, DWORD PTR [eax+4]
  0001e	8b f1		 mov	 esi, ecx
  00020	0f af f2	 imul	 esi, edx
  00023	03 f7		 add	 esi, edi
  00025	8b fb		 mov	 edi, ebx
  00027	33 ed		 xor	 ebp, ebp
  00029	f3 a6		 repe cmpsb

; 1031 :                 return true;
; 1032 :         }
; 1033 :         else

  0002b	eb 06		 jmp	 SHORT $L187603

; 1034 :         {
; 1035 :             if( GetPtr(iEntry) == pEntryData )

$L187592:
  0002d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00030	39 1c 91	 cmp	 DWORD PTR [ecx+edx*4], ebx
$L187603:
  00033	74 11		 je	 SHORT $L187597
  00035	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00038	42		 inc	 edx
  00039	3b d1		 cmp	 edx, ecx
  0003b	72 d6		 jb	 SHORT $L187602
$L187151:
  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5d		 pop	 ebp

; 1037 :         }
; 1038 :     }
; 1039 :     return false;

  00040	32 c0		 xor	 al, al
  00042	5b		 pop	 ebx

; 1040 : }

  00043	c2 04 00	 ret	 4
$L187597:
  00046	5f		 pop	 edi
  00047	5e		 pop	 esi
  00048	5d		 pop	 ebp

; 1036 :                 return true;

  00049	b0 01		 mov	 al, 1
  0004b	5b		 pop	 ebx

; 1040 : }

  0004c	c2 04 00	 ret	 4
?Contains@CArrayList@@QAE_NPAX@Z ENDP			; CArrayList::Contains
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertAnsiStringToWideCb@@YAJPAGPBDH@Z	; DXUtil_ConvertAnsiStringToWideCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertAnsiStringToWideCb@@YAJPAGPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToWideCb@@YAJPAGPBDH@Z PROC NEAR ; DXUtil_ConvertAnsiStringToWideCb, COMDAT

; 1054 : {

  00000	56		 push	 esi

; 1055 :     return DXUtil_ConvertAnsiStringToWideCch( wstrDestination, strSource, cbDestChar / sizeof(WCHAR) );

  00001	8b 74 24 10	 mov	 esi, DWORD PTR _cbDestChar$[esp]
  00005	57		 push	 edi
  00006	8b 7c 24 0c	 mov	 edi, DWORD PTR _wstrDestination$[esp+4]
  0000a	d1 ee		 shr	 esi, 1
  0000c	85 ff		 test	 edi, edi
  0000e	74 38		 je	 SHORT $L187610
  00010	8b 44 24 10	 mov	 eax, DWORD PTR _strSource$[esp+4]
  00014	85 c0		 test	 eax, eax
  00016	74 30		 je	 SHORT $L187610
  00018	83 fe 01	 cmp	 esi, 1
  0001b	7c 2b		 jl	 SHORT $L187610
  0001d	56		 push	 esi
  0001e	57		 push	 edi
  0001f	6a ff		 push	 -1
  00021	50		 push	 eax
  00022	6a 00		 push	 0
  00024	6a 00		 push	 0
  00026	e8 00 00 00 00	 call	 ?MultiByteToWideCharEx@@YAHIKPBDHPAGH@Z ; MultiByteToWideCharEx
  0002b	83 c4 18	 add	 esp, 24			; 00000018H
  0002e	33 c9		 xor	 ecx, ecx
  00030	85 c0		 test	 eax, eax
  00032	0f 95 c1	 setne	 cl
  00035	66 c7 44 77 fe
	00 00		 mov	 WORD PTR [edi+esi*2-2], 0
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	49		 dec	 ecx
  0003f	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  00045	8b c1		 mov	 eax, ecx

; 1056 : }

  00047	c3		 ret	 0

; 1055 :     return DXUtil_ConvertAnsiStringToWideCch( wstrDestination, strSource, cbDestChar / sizeof(WCHAR) );

$L187610:
  00048	5f		 pop	 edi
  00049	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0004e	5e		 pop	 esi

; 1056 : }

  0004f	c3		 ret	 0
?DXUtil_ConvertAnsiStringToWideCb@@YAJPAGPBDH@Z ENDP	; DXUtil_ConvertAnsiStringToWideCb
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPBGH@Z	; DXUtil_ConvertWideStringToAnsiCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPBGH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPBGH@Z PROC NEAR ; DXUtil_ConvertWideStringToAnsiCb, COMDAT

; 1059 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1060 :     return DXUtil_ConvertWideStringToAnsiCch( strDestination, wstrSource, cbDestChar / sizeof(CHAR) );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _strDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 3e		 je	 SHORT $L187621
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _wstrSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 36		 je	 SHORT $L187621
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cbDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 2d		 jl	 SHORT $L187621
  0001b	6a 00		 push	 0
  0001d	6a 00		 push	 0
  0001f	56		 push	 esi
  00020	57		 push	 edi
  00021	6a ff		 push	 -1
  00023	50		 push	 eax
  00024	6a 00		 push	 0
  00026	6a 00		 push	 0
  00028	e8 00 00 00 00	 call	 ?WideCharToMultiByteEx@@YAHIKPBGHPADHPBDPAH@Z ; WideCharToMultiByteEx
  0002d	83 c4 20	 add	 esp, 32			; 00000020H
  00030	33 c9		 xor	 ecx, ecx
  00032	85 c0		 test	 eax, eax
  00034	0f 95 c1	 setne	 cl
  00037	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0003c	5f		 pop	 edi
  0003d	5e		 pop	 esi
  0003e	49		 dec	 ecx
  0003f	81 e1 05 40 00
	80		 and	 ecx, -2147467259	; 80004005H
  00045	8b c1		 mov	 eax, ecx

; 1061 : }

  00047	c3		 ret	 0

; 1060 :     return DXUtil_ConvertWideStringToAnsiCch( strDestination, wstrSource, cbDestChar / sizeof(CHAR) );

$L187621:
  00048	5f		 pop	 edi
  00049	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0004e	5e		 pop	 esi

; 1061 : }

  0004f	c3		 ret	 0
?DXUtil_ConvertWideStringToAnsiCb@@YAJPADPBGH@Z ENDP	; DXUtil_ConvertWideStringToAnsiCb
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z ; DXUtil_ConvertGenericStringToAnsiCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z
_TEXT	SEGMENT
_strDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z PROC NEAR ; DXUtil_ConvertGenericStringToAnsiCb, COMDAT

; 1064 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1065 :     return DXUtil_ConvertGenericStringToAnsiCch( strDestination, tstrSource, cbDestChar / sizeof(CHAR) );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _strDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 26		 je	 SHORT $L187631
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _tstrSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $L187631
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cbDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 15		 jl	 SHORT $L187631
  0001b	56		 push	 esi
  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _strncpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0002b	5f		 pop	 edi
  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 1066 : }

  0002f	c3		 ret	 0

; 1065 :     return DXUtil_ConvertGenericStringToAnsiCch( strDestination, tstrSource, cbDestChar / sizeof(CHAR) );

$L187631:
  00030	5f		 pop	 edi
  00031	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00036	5e		 pop	 esi

; 1066 : }

  00037	c3		 ret	 0
?DXUtil_ConvertGenericStringToAnsiCb@@YAJPADPBDH@Z ENDP	; DXUtil_ConvertGenericStringToAnsiCb
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertGenericStringToWideCb@@YAJPAGPBDH@Z ; DXUtil_ConvertGenericStringToWideCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertGenericStringToWideCb@@YAJPAGPBDH@Z
_TEXT	SEGMENT
_wstrDestination$ = 8					; size = 4
_tstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertGenericStringToWideCb@@YAJPAGPBDH@Z PROC NEAR ; DXUtil_ConvertGenericStringToWideCb, COMDAT

; 1070 :     return DXUtil_ConvertGenericStringToWideCch( wstrDestination, tstrSource, cbDestChar / sizeof(WCHAR) );

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR _cbDestChar$[esp-4]
  00004	8b 54 24 04	 mov	 edx, DWORD PTR _wstrDestination$[esp-4]
  00008	d1 e8		 shr	 eax, 1
  0000a	85 d2		 test	 edx, edx
  0000c	74 1e		 je	 SHORT $L187639
  0000e	8b 4c 24 08	 mov	 ecx, DWORD PTR _tstrSource$[esp-4]
  00012	85 c9		 test	 ecx, ecx
  00014	74 16		 je	 SHORT $L187639
  00016	83 f8 01	 cmp	 eax, 1
  00019	7c 11		 jl	 SHORT $L187639
  0001b	89 44 24 0c	 mov	 DWORD PTR _cbDestChar$[esp-4], eax
  0001f	89 4c 24 08	 mov	 DWORD PTR _tstrSource$[esp-4], ecx
  00023	89 54 24 04	 mov	 DWORD PTR _wstrDestination$[esp-4], edx
  00027	e9 00 00 00 00	 jmp	 ?DXUtil_ConvertAnsiStringToWideCch@@YAJPAGPBDH@Z ; DXUtil_ConvertAnsiStringToWideCch
$L187639:
  0002c	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H

; 1071 : }

  00031	c3		 ret	 0
?DXUtil_ConvertGenericStringToWideCb@@YAJPAGPBDH@Z ENDP	; DXUtil_ConvertGenericStringToWideCb
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z ; DXUtil_ConvertAnsiStringToGenericCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_strSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z PROC NEAR ; DXUtil_ConvertAnsiStringToGenericCb, COMDAT

; 1074 : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 1075 :     return DXUtil_ConvertAnsiStringToGenericCch( tstrDestination, strSource, cbDestChar / sizeof(TCHAR) );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _tstrDestination$[esp+4]
  00006	85 ff		 test	 edi, edi
  00008	74 26		 je	 SHORT $L187648
  0000a	8b 44 24 10	 mov	 eax, DWORD PTR _strSource$[esp+4]
  0000e	85 c0		 test	 eax, eax
  00010	74 1e		 je	 SHORT $L187648
  00012	8b 74 24 14	 mov	 esi, DWORD PTR _cbDestChar$[esp+4]
  00016	83 fe 01	 cmp	 esi, 1
  00019	7c 15		 jl	 SHORT $L187648
  0001b	56		 push	 esi
  0001c	50		 push	 eax
  0001d	57		 push	 edi
  0001e	e8 00 00 00 00	 call	 _strncpy
  00023	83 c4 0c	 add	 esp, 12			; 0000000cH
  00026	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0002b	5f		 pop	 edi
  0002c	33 c0		 xor	 eax, eax
  0002e	5e		 pop	 esi

; 1076 : }

  0002f	c3		 ret	 0

; 1075 :     return DXUtil_ConvertAnsiStringToGenericCch( tstrDestination, strSource, cbDestChar / sizeof(TCHAR) );

$L187648:
  00030	5f		 pop	 edi
  00031	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  00036	5e		 pop	 esi

; 1076 : }

  00037	c3		 ret	 0
?DXUtil_ConvertAnsiStringToGenericCb@@YAJPADPBDH@Z ENDP	; DXUtil_ConvertAnsiStringToGenericCb
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertWideStringToGenericCb@@YAJPADPBGH@Z ; DXUtil_ConvertWideStringToGenericCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertWideStringToGenericCb@@YAJPADPBGH@Z
_TEXT	SEGMENT
_tstrDestination$ = 8					; size = 4
_wstrSource$ = 12					; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertWideStringToGenericCb@@YAJPADPBGH@Z PROC NEAR ; DXUtil_ConvertWideStringToGenericCb, COMDAT

; 1080 :     return DXUtil_ConvertWideStringToGenericCch( tstrDestination, wstrSource, cbDestChar / sizeof(TCHAR) );

  00000	8b 54 24 04	 mov	 edx, DWORD PTR _tstrDestination$[esp-4]
  00004	85 d2		 test	 edx, edx
  00006	74 22		 je	 SHORT $L187656
  00008	8b 44 24 08	 mov	 eax, DWORD PTR _wstrSource$[esp-4]
  0000c	85 c0		 test	 eax, eax
  0000e	74 1a		 je	 SHORT $L187656
  00010	8b 4c 24 0c	 mov	 ecx, DWORD PTR _cbDestChar$[esp-4]
  00014	83 f9 01	 cmp	 ecx, 1
  00017	7c 11		 jl	 SHORT $L187656
  00019	89 4c 24 0c	 mov	 DWORD PTR _cbDestChar$[esp-4], ecx
  0001d	89 44 24 08	 mov	 DWORD PTR _wstrSource$[esp-4], eax
  00021	89 54 24 04	 mov	 DWORD PTR _tstrDestination$[esp-4], edx
  00025	e9 00 00 00 00	 jmp	 ?DXUtil_ConvertWideStringToAnsiCch@@YAJPADPBGH@Z ; DXUtil_ConvertWideStringToAnsiCch
$L187656:
  0002a	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H

; 1081 : }

  0002f	c3		 ret	 0
?DXUtil_ConvertWideStringToGenericCb@@YAJPADPBGH@Z ENDP	; DXUtil_ConvertWideStringToGenericCb
_TEXT	ENDS
PUBLIC	?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z ; DXUtil_ConvertGUIDToStringCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z
_TEXT	SEGMENT
_pGuidSrc$ = 8						; size = 4
_strDest$ = 12						; size = 4
_cbDestChar$ = 16					; size = 4
?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z PROC NEAR ; DXUtil_ConvertGUIDToStringCb, COMDAT

; 1090 :     return DXUtil_ConvertGUIDToStringCch( pGuidSrc, strDest, cbDestChar / sizeof(TCHAR) );

  00000	e9 00 00 00 00	 jmp	 ?DXUtil_ConvertGUIDToStringCch@@YAJPBU_GUID@@PADH@Z ; DXUtil_ConvertGUIDToStringCch
?DXUtil_ConvertGUIDToStringCb@@YAJPBU_GUID@@PADH@Z ENDP	; DXUtil_ConvertGUIDToStringCb
_TEXT	ENDS
PUBLIC	?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z		; DXUtil_GetDXSDKMediaPathCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z
_TEXT	SEGMENT
_szDest$ = 8						; size = 4
_cbDest$ = 12						; size = 4
?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z PROC NEAR	; DXUtil_GetDXSDKMediaPathCb, COMDAT

; 1096 :     return DXUtil_GetDXSDKMediaPathCch( szDest, cbDest / sizeof(TCHAR) );

  00000	e9 00 00 00 00	 jmp	 ?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z ; DXUtil_GetDXSDKMediaPathCch
?DXUtil_GetDXSDKMediaPathCb@@YAJPADH@Z ENDP		; DXUtil_GetDXSDKMediaPathCb
_TEXT	ENDS
PUBLIC	?DXUtil_FindMediaFileCch@@YAJPADH0@Z		; DXUtil_FindMediaFileCch
EXTRN	__imp__CloseHandle@4:NEAR
EXTRN	__imp__GetFullPathNameA@16:NEAR
EXTRN	__imp__CreateFileA@28:NEAR
EXTRN	__imp__lstrcpynA@12:NEAR
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_FindMediaFileCch@@YAJPADH0@Z
_TEXT	SEGMENT
_strShortNameTmp$ = -276				; size = 4
tv198 = -272						; size = 4
$T187674 = -268						; size = 4
_strShortName$ = -264					; size = 260
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_strDestPath$ = 8					; size = 4
_cchDest$ = 12						; size = 4
_strFilename$ = 16					; size = 4
?DXUtil_FindMediaFileCch@@YAJPADH0@Z PROC NEAR		; DXUtil_FindMediaFileCch, COMDAT

; 79   : {

  00000	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	55		 push	 ebp
  0000e	8b ac 24 24 01
	00 00		 mov	 ebp, DWORD PTR _strFilename$[esp+276]

; 80   :     HRESULT hr;
; 81   :     HANDLE file;
; 82   :     TCHAR* strShortNameTmp = NULL;
; 83   :     TCHAR strShortName[MAX_PATH];
; 84   :     int cchPath;
; 85   : 
; 86   :     if( NULL==strFilename || NULL==strDestPath || cchDest < 1 )

  00015	85 ed		 test	 ebp, ebp
  00017	56		 push	 esi
  00018	8b b4 24 20 01
	00 00		 mov	 esi, DWORD PTR _strDestPath$[esp+280]
  0001f	89 84 24 18 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+284], eax
  00026	57		 push	 edi

; 124  :         lstrcat( strDestPath, strShortName );

  00027	89 6c 24 14	 mov	 DWORD PTR $T187674[esp+288], ebp
  0002b	c7 44 24 0c 00
	00 00 00	 mov	 DWORD PTR _strShortNameTmp$[esp+288], 0
  00033	0f 84 61 01 00
	00		 je	 $L186744

; 80   :     HRESULT hr;
; 81   :     HANDLE file;
; 82   :     TCHAR* strShortNameTmp = NULL;
; 83   :     TCHAR strShortName[MAX_PATH];
; 84   :     int cchPath;
; 85   : 
; 86   :     if( NULL==strFilename || NULL==strDestPath || cchDest < 1 )

  00039	85 f6		 test	 esi, esi
  0003b	0f 84 59 01 00
	00		 je	 $L186744
  00041	8b bc 24 28 01
	00 00		 mov	 edi, DWORD PTR _cchDest$[esp+284]
  00048	83 ff 01	 cmp	 edi, 1
  0004b	0f 8c 49 01 00
	00		 jl	 $L186744
  00051	53		 push	 ebx

; 87   :         return E_INVALIDARG;
; 88   : 
; 89   :     lstrcpy( strDestPath, TEXT("") );

  00052	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__lstrcpyA@8
  00058	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0005d	56		 push	 esi
  0005e	ff d3		 call	 ebx

; 90   :     lstrcpy( strShortName, TEXT("") );

  00060	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00065	8d 44 24 20	 lea	 eax, DWORD PTR _strShortName$[esp+296]
  00069	50		 push	 eax
  0006a	ff d3		 call	 ebx

; 91   : 
; 92   :     // Build full path name from strFileName (strShortName will be just the leaf filename)
; 93   :     cchPath = GetFullPathName(strFilename, cchDest, strDestPath, &strShortNameTmp);

  0006c	8d 4c 24 10	 lea	 ecx, DWORD PTR _strShortNameTmp$[esp+292]
  00070	51		 push	 ecx
  00071	56		 push	 esi
  00072	57		 push	 edi
  00073	55		 push	 ebp
  00074	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetFullPathNameA@16

; 94   :     if ((cchPath == 0) || (cchDest <= cchPath))

  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 0e 01 00
	00		 je	 $L186747
  00082	3b f8		 cmp	 edi, eax
  00084	0f 8e 06 01 00
	00		 jle	 $L186747

; 96   :     if( strShortNameTmp )

  0008a	8b 44 24 10	 mov	 eax, DWORD PTR _strShortNameTmp$[esp+292]
  0008e	85 c0		 test	 eax, eax
  00090	74 11		 je	 SHORT $L186749

; 97   :         lstrcpyn( strShortName, strShortNameTmp, MAX_PATH );

  00092	68 04 01 00 00	 push	 260			; 00000104H
  00097	50		 push	 eax
  00098	8d 54 24 24	 lea	 edx, DWORD PTR _strShortName$[esp+300]
  0009c	52		 push	 edx
  0009d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpynA@12
$L186749:

; 98   : 
; 99   :     // first try to find the filename given a full path
; 100  :     file = CreateFile( strDestPath, GENERIC_READ, FILE_SHARE_READ, NULL, 
; 101  :                        OPEN_EXISTING, 0, NULL );

  000a3	8b 2d 00 00 00
	00		 mov	 ebp, DWORD PTR __imp__CreateFileA@28
  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	6a 03		 push	 3
  000af	6a 00		 push	 0
  000b1	6a 01		 push	 1
  000b3	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000b8	56		 push	 esi
  000b9	ff d5		 call	 ebp

; 102  :     if( INVALID_HANDLE_VALUE != file )

  000bb	83 f8 ff	 cmp	 eax, -1
  000be	74 22		 je	 SHORT $L186752
$L187677:

; 103  :     {
; 104  :         CloseHandle( file );

  000c0	50		 push	 eax
$L187678:

; 115  :         CloseHandle( file );

  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CloseHandle@4

; 116  :         return S_OK;

  000c7	33 c0		 xor	 eax, eax
$L187676:
  000c9	5b		 pop	 ebx
  000ca	5f		 pop	 edi
  000cb	5e		 pop	 esi
  000cc	5d		 pop	 ebp

; 140  : }

  000cd	8b 8c 24 10 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+276]
  000d4	33 cc		 xor	 ecx, esp
  000d6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000db	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  000e1	c3		 ret	 0
$L186752:

; 105  :         return S_OK;
; 106  :     }
; 107  :     
; 108  :     // next try to find the filename in the current working directory (path stripped)
; 109  :     file = CreateFile( strShortName, GENERIC_READ, FILE_SHARE_READ, NULL, 
; 110  :                        OPEN_EXISTING, 0, NULL );

  000e2	6a 00		 push	 0
  000e4	6a 00		 push	 0
  000e6	6a 03		 push	 3
  000e8	6a 00		 push	 0
  000ea	6a 01		 push	 1
  000ec	68 00 00 00 80	 push	 -2147483648		; 80000000H
  000f1	8d 44 24 34	 lea	 eax, DWORD PTR _strShortName$[esp+316]
  000f5	50		 push	 eax
  000f6	ff d5		 call	 ebp
  000f8	8b d8		 mov	 ebx, eax

; 111  :     if( INVALID_HANDLE_VALUE != file )

  000fa	83 fb ff	 cmp	 ebx, -1

; 112  :     {
; 113  :         _tcsncpy( strDestPath, strShortName, cchDest );

  000fd	57		 push	 edi
  000fe	74 16		 je	 SHORT $L186756
  00100	8d 4c 24 20	 lea	 ecx, DWORD PTR _strShortName$[esp+296]
  00104	51		 push	 ecx
  00105	56		 push	 esi
  00106	e8 00 00 00 00	 call	 __mbsnbcpy
  0010b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 114  :         strDestPath[cchDest-1] = 0; // _tcsncpy doesn't NULL term if it runs out of space

  0010e	c6 44 3e ff 00	 mov	 BYTE PTR [esi+edi-1], 0

; 115  :         CloseHandle( file );

  00113	53		 push	 ebx

; 116  :         return S_OK;

  00114	eb ab		 jmp	 SHORT $L187678
$L186756:

; 117  :     }
; 118  :     
; 119  :     // last, check if the file exists in the media directory
; 120  :     if( FAILED( hr = DXUtil_GetDXSDKMediaPathCch( strDestPath, cchDest ) ) )

  00116	56		 push	 esi
  00117	e8 00 00 00 00	 call	 ?DXUtil_GetDXSDKMediaPathCch@@YAJPADH@Z ; DXUtil_GetDXSDKMediaPathCch
  0011c	83 c4 08	 add	 esp, 8
  0011f	85 c0		 test	 eax, eax

; 121  :         return hr;

  00121	7c a6		 jl	 SHORT $L187676

; 122  : 
; 123  :     if( lstrlen(strDestPath) + lstrlen(strShortName) < cchDest )

  00123	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR __imp__lstrlenA@4
  00129	56		 push	 esi
  0012a	ff d3		 call	 ebx
  0012c	8d 54 24 1c	 lea	 edx, DWORD PTR _strShortName$[esp+292]
  00130	52		 push	 edx
  00131	89 44 24 18	 mov	 DWORD PTR tv198[esp+296], eax
  00135	ff d3		 call	 ebx
  00137	8b 4c 24 14	 mov	 ecx, DWORD PTR tv198[esp+292]
  0013b	03 c8		 add	 ecx, eax
  0013d	3b cf		 cmp	 ecx, edi
  0013f	7d 45		 jge	 SHORT $L186760

; 124  :         lstrcat( strDestPath, strShortName );

  00141	8d 44 24 1c	 lea	 eax, DWORD PTR _strShortName$[esp+292]
  00145	50		 push	 eax
  00146	56		 push	 esi
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcatA@8

; 127  : 
; 128  :     file = CreateFile( strDestPath, GENERIC_READ, FILE_SHARE_READ, NULL, 
; 129  :                        OPEN_EXISTING, 0, NULL );

  0014d	6a 00		 push	 0
  0014f	6a 00		 push	 0
  00151	6a 03		 push	 3
  00153	6a 00		 push	 0
  00155	6a 01		 push	 1
  00157	68 00 00 00 80	 push	 -2147483648		; 80000000H
  0015c	56		 push	 esi
  0015d	ff d5		 call	 ebp

; 130  :     if( INVALID_HANDLE_VALUE != file )

  0015f	83 f8 ff	 cmp	 eax, -1

; 131  :     {
; 132  :         CloseHandle( file );
; 133  :         return S_OK;

  00162	0f 85 58 ff ff
	ff		 jne	 $L187677

; 134  :     }
; 135  : 
; 136  :     // On failure, just return the file as the path
; 137  :     _tcsncpy( strDestPath, strFilename, cchDest );

  00168	8b 4c 24 18	 mov	 ecx, DWORD PTR $T187674[esp+292]
  0016c	57		 push	 edi
  0016d	51		 push	 ecx
  0016e	56		 push	 esi
  0016f	e8 00 00 00 00	 call	 __mbsnbcpy
  00174	83 c4 0c	 add	 esp, 12			; 0000000cH

; 138  :     strDestPath[cchDest-1] = 0; // _tcsncpy doesn't NULL term if it runs out of space

  00177	c6 44 3e ff 00	 mov	 BYTE PTR [esi+edi-1], 0

; 139  :     return HRESULT_FROM_WIN32( ERROR_FILE_NOT_FOUND );

  0017c	b8 02 00 07 80	 mov	 eax, -2147024894	; 80070002H
  00181	e9 43 ff ff ff	 jmp	 $L187676
$L186760:

; 125  :     else
; 126  :         return E_INVALIDARG;

  00186	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  0018b	e9 39 ff ff ff	 jmp	 $L187676
$L186747:

; 95   :         return E_FAIL;

  00190	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  00195	e9 2f ff ff ff	 jmp	 $L187676
$L186744:

; 140  : }

  0019a	8b 8c 24 1c 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+288]
  001a1	5f		 pop	 edi
  001a2	5e		 pop	 esi
  001a3	5d		 pop	 ebp
  001a4	33 cc		 xor	 ecx, esp
  001a6	b8 57 00 07 80	 mov	 eax, -2147024809	; 80070057H
  001ab	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001b0	81 c4 14 01 00
	00		 add	 esp, 276		; 00000114H
  001b6	c3		 ret	 0
?DXUtil_FindMediaFileCch@@YAJPADH0@Z ENDP		; DXUtil_FindMediaFileCch
_TEXT	ENDS
PUBLIC	?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PAD1K1@Z ; DXUtil_ReadStringRegKeyCch
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PAD1K1@Z
_TEXT	SEGMENT
_dwType$ = -4						; size = 4
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_strDest$ = 16						; size = 4
_cbDest$ = 20						; size = 4
_cchDest$ = 20						; size = 4
_strDefault$ = 24					; size = 4
?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PAD1K1@Z PROC NEAR ; DXUtil_ReadStringRegKeyCch, COMDAT

; 154  : {

  00000	51		 push	 ecx

; 155  :     DWORD dwType;
; 156  :     DWORD cbDest = cchDest * sizeof(TCHAR);
; 157  : 
; 158  :     if( ERROR_SUCCESS != RegQueryValueEx( hKey, strRegName, 0, &dwType, 
; 159  :                                           (BYTE*)strDest, &cbDest ) )

  00001	8b 54 24 0c	 mov	 edx, DWORD PTR _strRegName$[esp]
  00005	56		 push	 esi
  00006	8b 74 24 18	 mov	 esi, DWORD PTR _cchDest$[esp+4]
  0000a	57		 push	 edi
  0000b	8b 7c 24 18	 mov	 edi, DWORD PTR _strDest$[esp+8]
  0000f	8d 44 24 1c	 lea	 eax, DWORD PTR _cbDest$[esp+8]
  00013	50		 push	 eax
  00014	8b 44 24 14	 mov	 eax, DWORD PTR _hKey$[esp+12]
  00018	57		 push	 edi
  00019	8d 4c 24 10	 lea	 ecx, DWORD PTR _dwType$[esp+20]
  0001d	51		 push	 ecx
  0001e	6a 00		 push	 0
  00020	52		 push	 edx
  00021	50		 push	 eax
  00022	89 74 24 34	 mov	 DWORD PTR _cbDest$[esp+32], esi
  00026	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegQueryValueExA@24
  0002c	85 c0		 test	 eax, eax
  0002e	74 26		 je	 SHORT $L186781

; 160  :     {
; 161  :         _tcsncpy( strDest, strDefault, cchDest );

  00030	8b 4c 24 20	 mov	 ecx, DWORD PTR _strDefault$[esp+8]
  00034	56		 push	 esi
  00035	51		 push	 ecx
  00036	57		 push	 edi
  00037	e8 00 00 00 00	 call	 __mbsnbcpy

; 162  :         strDest[cchDest-1] = 0;
; 163  : 
; 164  :         if( dwType != REG_SZ )

  0003c	8b 44 24 14	 mov	 eax, DWORD PTR _dwType$[esp+24]
  00040	83 c4 0c	 add	 esp, 12			; 0000000cH
  00043	48		 dec	 eax
  00044	f7 d8		 neg	 eax
  00046	c6 44 37 ff 00	 mov	 BYTE PTR [edi+esi-1], 0
  0004b	1b c0		 sbb	 eax, eax
  0004d	5f		 pop	 edi
  0004e	25 05 40 00 80	 and	 eax, -2147467259	; 80004005H
  00053	5e		 pop	 esi

; 171  : }

  00054	59		 pop	 ecx
  00055	c3		 ret	 0
$L186781:
  00056	5f		 pop	 edi

; 165  :             return E_FAIL;
; 166  : 
; 167  :         return S_OK;
; 168  :     }
; 169  : 
; 170  :     return E_FAIL;

  00057	b8 05 40 00 80	 mov	 eax, -2147467259	; 80004005H
  0005c	5e		 pop	 esi

; 171  : }

  0005d	59		 pop	 ecx
  0005e	c3		 ret	 0
?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PAD1K1@Z ENDP ; DXUtil_ReadStringRegKeyCch
_TEXT	ENDS
PUBLIC	?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PAD1K1@Z ; DXUtil_ReadStringRegKeyCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PAD1K1@Z
_TEXT	SEGMENT
_hKey$ = 8						; size = 4
_strRegName$ = 12					; size = 4
_strDest$ = 16						; size = 4
_cbDest$ = 20						; size = 4
_strDefault$ = 24					; size = 4
?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PAD1K1@Z PROC NEAR ; DXUtil_ReadStringRegKeyCb, COMDAT

; 1085 :     return DXUtil_ReadStringRegKeyCch( hKey, strRegName, strDest, cbDest / sizeof(TCHAR), strDefault );

  00000	e9 00 00 00 00	 jmp	 ?DXUtil_ReadStringRegKeyCch@@YAJPAUHKEY__@@PAD1K1@Z ; DXUtil_ReadStringRegKeyCch
?DXUtil_ReadStringRegKeyCb@@YAJPAUHKEY__@@PAD1K1@Z ENDP	; DXUtil_ReadStringRegKeyCb
_TEXT	ENDS
PUBLIC	?DXUtil_FindMediaFileCb@@YAJPADH0@Z		; DXUtil_FindMediaFileCb
; Function compile flags: /Ogty
;	COMDAT ?DXUtil_FindMediaFileCb@@YAJPADH0@Z
_TEXT	SEGMENT
_szDestPath$ = 8					; size = 4
_cbDest$ = 12						; size = 4
_strFilename$ = 16					; size = 4
?DXUtil_FindMediaFileCb@@YAJPADH0@Z PROC NEAR		; DXUtil_FindMediaFileCb, COMDAT

; 1101 :     return DXUtil_FindMediaFileCch( szDestPath, cbDest / sizeof(TCHAR), strFilename );

  00000	e9 00 00 00 00	 jmp	 ?DXUtil_FindMediaFileCch@@YAJPADH0@Z ; DXUtil_FindMediaFileCch
?DXUtil_FindMediaFileCb@@YAJPADH0@Z ENDP		; DXUtil_FindMediaFileCb
_TEXT	ENDS
END
