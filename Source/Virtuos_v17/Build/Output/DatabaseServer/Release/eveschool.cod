; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_Common\eveschool.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_0DB@BEDINLHB@RANKING?4RANKING_DBF?4dbo?4RANKING_@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CN@HNMEKJGP@CDbManager?3?3UpdateGuildRanking?$LP?$KB@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08LJMBJH@m_dwLogo?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_09NKFNPOPN@m_szGuild?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_08HDDJDJAG@m_szName?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_06LJIKPPDH@m_nWin?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_07IGCLHJHO@m_nLose?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0N@BBOGLCAO@m_nSurrender?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0L@EKKIFFNL@m_AvgLevel?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0M@EMHJODPK@m_nWinPoint?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0BG@CJGBCKAI@MAKE_RANKING_STR?5?8?$CFd?8?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0CG@IPKIBOKB@CDbManager?3?3RankingDBUpdate?5?$CI?$CFs?$CJ@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0_GUILDQUEST@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SelectMemberClear@__GuildCombatMember@CGuildCombat@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0__GCGETPOINT@CGuildCombat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0__GCPLAYERPOINT@CGuildCombat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CGuildCombat@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCGuildCombat@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CGuildCombat@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GuildCombatClear@CGuildCombat@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GuildCombatGameClear@CGuildCombat@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddvecGCGetPoint@CGuildCombat@@QAEXKKKKHHHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddvecGCPlayerPoint@CGuildCombat@@QAEXKHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E1
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E2
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCGuildMember@@@@QAEPAVCGuildMember@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCGuildMember@@@@QAEHPAVCGuildMember@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAVCGuildMember@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCGuildMember@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Alloc@?$MemPooler@VCGuild@@@@QAEPAVCGuild@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Free@?$MemPooler@VCGuild@@@@QAEHPAVCGuild@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$_Tree@V?$_Tmap_traits@KPAVCGuild@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKPAVCGuild@@@std@@@3@$0A@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??A?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAEAAPAU__JOINPLAYER@CGuildCombat@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$list@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCGuildMember@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Create@?$MemPooler@VCGuild@@@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Nextnode@?$list@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@KAAAPAU_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU34@IABU34@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCGETPOINT@CGuildCombat@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU34@IABU34@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QBEAAPAU__JOINPLAYER@CGuildCombat@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@IAEXPAPAU__JOINPLAYER@CGuildCombat@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@QAEXPAPAU__JOINPLAYER@CGuildCombat@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCGETPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEPAU__GCGETPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCPLAYERPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEPAU__GCPLAYERPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAE@PAPAU__JOINPLAYER@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QBEABQAU__JOINPLAYER@CGuildCombat@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@QAE@PAPAU__JOINPLAYER@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@@std@@YAXPAU_Node@?$_List_nod@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@YAXPAPAU__JOINPLAYER@CGuildCombat@@0AAV?$allocator@PAU__JOINPLAYER@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAU__GCGETPOINT@CGuildCombat@@@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU23@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U__GCGETPOINT@CGuildCombat@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@IPAU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAU__GCPLAYERPOINT@CGuildCombat@@@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU23@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@IPAU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCGETPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCPLAYERPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@U__JOINPLAYER@CGuildCombat@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAU__JOINPLAYER@CGuildCombat@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAU__JOINPLAYER@CGuildCombat@@V?$allocator@PAU__JOINPLAYER@CGuildCombat@@@std@@@std@@YAXPAPAU__JOINPLAYER@CGuildCombat@@0AAV?$allocator@PAU__JOINPLAYER@CGuildCombat@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@ABU34@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?construct@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@ABU34@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@U__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@ABU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__GCGETPOINT@CGuildCombat@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Construct@U__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@ABU12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert@?$list@PAXV?$allocator@PAX@std@@@std@@QAEXViterator@12@ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Mynode@const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QBEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@3@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buynode@?$list@PAXV?$allocator@PAX@std@@@std@@IAEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@0ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@YAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@0@IPAU120@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??3@YAXPAX0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@QAE@PAU012@0ABQAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@U_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@std@@@std@@QAEXPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Incsize@?$list@PAXV?$allocator@PAX@std@@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$list@PAXV?$allocator@PAX@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAX@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BB@MOGOBHAF@list?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?_Nextnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Prevnode@?$list@PAXV?$allocator@PAX@std@@@std@@KAAAPAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$list@PAXV?$allocator@PAX@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$list@PAXV?$allocator@PAX@std@@@std@@QAE@PAU_Node@?$_List_nod@PAXV?$allocator@PAX@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_09PKKCPLIP@bad?5alloc?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CGuildCombat@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@K@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Leave@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Enter@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTickCount@CTime@ATL@@SG?AV12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@_J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CTime@ATL@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMclCritSec@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMclCritSec@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCMclCritSec@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMclCritSec@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0D3DXVECTOR3@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??2@YAPAXIPAX@Z					; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
__P$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC NEAR				; operator new, COMDAT

; 109  :         {return (_P); }

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __P$[esp-4]
  00004	c3		 ret	 0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
PUBLIC	??0__GCGETPOINT@CGuildCombat@@QAE@XZ		; CGuildCombat::__GCGETPOINT::__GCGETPOINT
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\eveschool.h
;	COMDAT ??0__GCGETPOINT@CGuildCombat@@QAE@XZ
_TEXT	SEGMENT
??0__GCGETPOINT@CGuildCombat@@QAE@XZ PROC NEAR		; CGuildCombat::__GCGETPOINT::__GCGETPOINT, COMDAT
; _this$ = ecx

; 187  : 		__GCGETPOINT()

  00000	8b c1		 mov	 eax, ecx

; 188  : 		{
; 189  : 			uidGuildAttack = uidGuildDefence = uidPlayerAttack = uidPlayerDefence = nPoint = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00007	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000a	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00010	89 08		 mov	 DWORD PTR [eax], ecx

; 190  : 			bKillDiffernceGuild = bMaster = bDefender = bLastLife = FALSE;

  00012	89 48 20	 mov	 DWORD PTR [eax+32], ecx
  00015	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
  00018	89 48 18	 mov	 DWORD PTR [eax+24], ecx
  0001b	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 191  : 		}

  0001e	c3		 ret	 0
??0__GCGETPOINT@CGuildCombat@@QAE@XZ ENDP		; CGuildCombat::__GCGETPOINT::__GCGETPOINT
_TEXT	ENDS
PUBLIC	??0__GCPLAYERPOINT@CGuildCombat@@QAE@XZ		; CGuildCombat::__GCPLAYERPOINT::__GCPLAYERPOINT
; Function compile flags: /Ogty
;	COMDAT ??0__GCPLAYERPOINT@CGuildCombat@@QAE@XZ
_TEXT	SEGMENT
??0__GCPLAYERPOINT@CGuildCombat@@QAE@XZ PROC NEAR	; CGuildCombat::__GCPLAYERPOINT::__GCPLAYERPOINT, COMDAT
; _this$ = ecx

; 199  : 		__GCPLAYERPOINT()

  00000	8b c1		 mov	 eax, ecx

; 200  : 		{
; 201  : 			uidPlayer = nJob = nPoint = 0;

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00007	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000a	89 08		 mov	 DWORD PTR [eax], ecx

; 202  : 		}

  0000c	c3		 ret	 0
??0__GCPLAYERPOINT@CGuildCombat@@QAE@XZ ENDP		; CGuildCombat::__GCPLAYERPOINT::__GCPLAYERPOINT
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::capacity
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L192590

; 459  : 		}

  00007	c3		 ret	 0
$L192590:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 03	 sar	 edx, 3
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 459  : 		}

  0001e	c3		 ret	 0
?capacity@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L192594

; 517  : 		}

  00007	c3		 ret	 0
$L192594:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00008	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00012	f7 e9		 imul	 ecx
  00014	c1 fa 03	 sar	 edx, 3
  00017	8b c2		 mov	 eax, edx
  00019	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001c	03 c2		 add	 eax, edx

; 517  : 		}

  0001e	c3		 ret	 0
?size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@XZ ; std::allocator<CGuildCombat::__GCGETPOINT>::allocator<CGuildCombat::__GCGETPOINT>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@XZ PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::allocator<CGuildCombat::__GCGETPOINT>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@XZ ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::allocator<CGuildCombat::__GCGETPOINT>
_TEXT	ENDS
PUBLIC	?capacity@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::capacity
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?capacity@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L192600

; 459  : 		}

  00007	c3		 ret	 0
$L192600:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00008	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	f7 e9		 imul	 ecx
  00014	d1 fa		 sar	 edx, 1
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 459  : 		}

  0001d	c3		 ret	 0
?capacity@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::capacity
_TEXT	ENDS
PUBLIC	?size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::size
; Function compile flags: /Ogty
;	COMDAT ?size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	85 c0		 test	 eax, eax
  00005	75 01		 jne	 SHORT $L192604

; 517  : 		}

  00007	c3		 ret	 0
$L192604:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00008	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  0000b	2b c8		 sub	 ecx, eax
  0000d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00012	f7 e9		 imul	 ecx
  00014	d1 fa		 sar	 edx, 1
  00016	8b c2		 mov	 eax, edx
  00018	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0001b	03 c2		 add	 eax, edx

; 517  : 		}

  0001d	c3		 ret	 0
?size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::size
_TEXT	ENDS
PUBLIC	??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@XZ ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocator<CGuildCombat::__GCPLAYERPOINT>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@XZ PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocator<CGuildCombat::__GCPLAYERPOINT>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@XZ ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocator<CGuildCombat::__GCPLAYERPOINT>
_TEXT	ENDS
PUBLIC	??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z ; std::allocator<CGuildCombat::__GCGETPOINT>::allocator<CGuildCombat::__GCGETPOINT>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::allocator<CGuildCombat::__GCGETPOINT>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::allocator<CGuildCombat::__GCGETPOINT>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@I@Z ; std::allocator<CGuildCombat::__GCGETPOINT>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@I@Z PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@I@Z ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::deallocate
_TEXT	ENDS
PUBLIC	??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocator<CGuildCombat::__GCPLAYERPOINT>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocator<CGuildCombat::__GCPLAYERPOINT>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocator<CGuildCombat::__GCPLAYERPOINT>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@I@Z ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::deallocate
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@I@Z PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@I@Z ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::deallocate
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QBEIXZ ; std::allocator<CGuildCombat::__GCGETPOINT>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QBEIXZ PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QBEIXZ ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::max_size
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QBEIXZ ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QBEIXZ PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QBEIXZ ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::max_size
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8d 0c c9	 lea	 ecx, DWORD PTR [ecx+ecx*8]
  0000b	c1 e1 02	 shl	 ecx, 2
  0000e	03 d1		 add	 edx, ecx
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  00012	c2 04 00	 ret	 4
??Yiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::const_iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Gconst_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b ca		 sub	 ecx, edx
  0000a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0000f	f7 e9		 imul	 ecx
  00011	c1 fa 03	 sar	 edx, 3
  00014	8b c2		 mov	 eax, edx
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	03 c2		 add	 eax, edx

; 144  : 			}

  0001b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator+=
; Function compile flags: /Ogty
;	COMDAT ??Yiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8b 10		 mov	 edx, DWORD PTR [eax]
  00008	8d 0c 49	 lea	 ecx, DWORD PTR [ecx+ecx*2]
  0000b	c1 e1 02	 shl	 ecx, 2
  0000e	03 d1		 add	 edx, ecx
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  00012	c2 04 00	 ret	 4
??Yiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::const_iterator::const_iterator
; Function compile flags: /Ogty
;	COMDAT ??0const_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::const_iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Gconst_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8b 10		 mov	 edx, DWORD PTR [eax]
  00006	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00008	2b ca		 sub	 ecx, edx
  0000a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000f	f7 e9		 imul	 ecx
  00011	d1 fa		 sar	 edx, 1
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx

; 144  : 			}

  0001a	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z ; std::fill<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z PROC NEAR ; std::fill<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b c2		 cmp	 eax, edx
  0000a	74 1c		 je	 SHORT $L192046
  0000c	53		 push	 ebx
  0000d	8b 5c 24 10	 mov	 ebx, DWORD PTR __Val$[esp]
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192044:

; 1136 : 		*_First = _Val;

  00013	8b f8		 mov	 edi, eax
  00015	83 c0 24	 add	 eax, 36			; 00000024H
  00018	3b c2		 cmp	 eax, edx
  0001a	b9 09 00 00 00	 mov	 ecx, 9
  0001f	8b f3		 mov	 esi, ebx
  00021	f3 a5		 rep movsd
  00023	75 ee		 jne	 SHORT $L192044
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi
  00027	5b		 pop	 ebx
$L192046:

; 1137 : 	}

  00028	c3		 ret	 0
??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z ENDP ; std::fill<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT>
_TEXT	ENDS
PUBLIC	??$_Allocate@U__GCGETPOINT@CGuildCombat@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@IPAU12@@Z ; std::_Allocate<CGuildCombat::__GCGETPOINT>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@U__GCGETPOINT@CGuildCombat@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@IPAU12@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U__GCGETPOINT@CGuildCombat@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@IPAU12@@Z PROC NEAR ; std::_Allocate<CGuildCombat::__GCGETPOINT>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U__GCGETPOINT@CGuildCombat@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@IPAU12@@Z ENDP ; std::_Allocate<CGuildCombat::__GCGETPOINT>
_TEXT	ENDS
PUBLIC	??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z ; std::fill<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z PROC NEAR ; std::fill<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 25		 je	 SHORT $L192100
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192098:

; 1136 : 		*_First = _Val;

  00013	8b f2		 mov	 esi, edx
  00015	8b 1e		 mov	 ebx, DWORD PTR [esi]
  00017	8b f8		 mov	 edi, eax
  00019	89 1f		 mov	 DWORD PTR [edi], ebx
  0001b	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0001e	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00021	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00024	83 c0 0c	 add	 eax, 12			; 0000000cH
  00027	3b c1		 cmp	 eax, ecx
  00029	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002c	75 e5		 jne	 SHORT $L192098
  0002e	5f		 pop	 edi
  0002f	5e		 pop	 esi
  00030	5b		 pop	 ebx
$L192100:

; 1137 : 	}

  00031	c3		 ret	 0
??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z ENDP ; std::fill<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT>
_TEXT	ENDS
PUBLIC	??$_Allocate@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@IPAU12@@Z ; std::_Allocate<CGuildCombat::__GCPLAYERPOINT>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@IPAU12@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@IPAU12@@Z PROC NEAR ; std::_Allocate<CGuildCombat::__GCPLAYERPOINT>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 35   : 	}

  00013	c3		 ret	 0
??$_Allocate@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@IPAU12@@Z ENDP ; std::_Allocate<CGuildCombat::__GCPLAYERPOINT>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCGETPOINT@CGuildCombat@@0@Z ; std::_Ptr_cat<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCGETPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCGETPOINT@CGuildCombat@@0@Z PROC NEAR ; std::_Ptr_cat<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	51		 push	 ecx

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 214  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCGETPOINT@CGuildCombat@@0@Z ENDP ; std::_Ptr_cat<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCPLAYERPOINT@CGuildCombat@@0@Z ; std::_Ptr_cat<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>
; Function compile flags: /Ogty
;	COMDAT ??$_Ptr_cat@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCPLAYERPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCPLAYERPOINT@CGuildCombat@@0@Z PROC NEAR ; std::_Ptr_cat<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>, COMDAT

; 211  : 	{	// return pointer category from arbitrary arguments

  00000	51		 push	 ecx

; 212  : 	_Nonscalar_ptr_iterator_tag _Cat;
; 213  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 214  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAU__GCPLAYERPOINT@CGuildCombat@@0@Z ENDP ; std::_Ptr_cat<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_backward_opt@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>, COMDAT

; 1049 : 	while (_First != _Last)

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00004	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00008	53		 push	 ebx
  00009	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 19		 je	 SHORT $L192208
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192207:

; 1050 : 		*--_Dest = *--_Last;

  00013	83 ea 24	 sub	 edx, 36			; 00000024H
  00016	83 e8 24	 sub	 eax, 36			; 00000024H
  00019	3b d3		 cmp	 edx, ebx
  0001b	b9 09 00 00 00	 mov	 ecx, 9
  00020	8b f2		 mov	 esi, edx
  00022	8b f8		 mov	 edi, eax
  00024	f3 a5		 rep movsd
  00026	75 eb		 jne	 SHORT $L192207
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$L192208:
  0002a	5b		 pop	 ebx

; 1051 : 	return (_Dest);
; 1052 : 	}

  0002b	c3		 ret	 0
??$_Copy_backward_opt@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>
; Function compile flags: /Ogty
;	COMDAT ??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>, COMDAT

; 1049 : 	while (_First != _Last)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b d1		 cmp	 edx, ecx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 24		 je	 SHORT $L192256
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192255:

; 1050 : 		*--_Dest = *--_Last;

  00013	83 e9 0c	 sub	 ecx, 12			; 0000000cH
  00016	83 e8 0c	 sub	 eax, 12			; 0000000cH
  00019	3b ca		 cmp	 ecx, edx
  0001b	8b f1		 mov	 esi, ecx
  0001d	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001f	8b f8		 mov	 edi, eax
  00021	89 1f		 mov	 DWORD PTR [edi], ebx
  00023	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00026	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00029	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0002c	89 77 08	 mov	 DWORD PTR [edi+8], esi
  0002f	75 e2		 jne	 SHORT $L192255
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
$L192256:

; 1051 : 	return (_Dest);
; 1052 : 	}

  00034	c3		 ret	 0
??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>
_TEXT	ENDS
PUBLIC	??$_Construct@U__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@ABU12@@Z ; std::_Construct<CGuildCombat::__GCGETPOINT,CGuildCombat::__GCGETPOINT>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Construct@U__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@ABU12@@Z PROC NEAR ; std::_Construct<CGuildCombat::__GCGETPOINT,CGuildCombat::__GCGETPOINT>, COMDAT

; 41   : 	{	// construct object at _Ptr with value _Val

  00000	57		 push	 edi

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00001	8b 7c 24 08	 mov	 edi, DWORD PTR __Ptr$[esp]
  00005	85 ff		 test	 edi, edi
  00007	74 0d		 je	 SHORT $L192665
  00009	56		 push	 esi
  0000a	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp+4]
  0000e	b9 09 00 00 00	 mov	 ecx, 9
  00013	f3 a5		 rep movsd
  00015	5e		 pop	 esi
$L192665:
  00016	5f		 pop	 edi

; 43   : 	}

  00017	c3		 ret	 0
??$_Construct@U__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@ABU12@@Z ENDP ; std::_Construct<CGuildCombat::__GCGETPOINT,CGuildCombat::__GCGETPOINT>
_TEXT	ENDS
PUBLIC	??$_Destroy@U__GCGETPOINT@CGuildCombat@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@@Z ; std::_Destroy<CGuildCombat::__GCGETPOINT>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U__GCGETPOINT@CGuildCombat@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U__GCGETPOINT@CGuildCombat@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::_Destroy<CGuildCombat::__GCGETPOINT>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U__GCGETPOINT@CGuildCombat@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::_Destroy<CGuildCombat::__GCGETPOINT>
_TEXT	ENDS
PUBLIC	??$_Construct@U__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@ABU12@@Z ; std::_Construct<CGuildCombat::__GCPLAYERPOINT,CGuildCombat::__GCPLAYERPOINT>
; Function compile flags: /Ogty
;	COMDAT ??$_Construct@U__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@ABU12@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$_Construct@U__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@ABU12@@Z PROC NEAR ; std::_Construct<CGuildCombat::__GCPLAYERPOINT,CGuildCombat::__GCPLAYERPOINT>, COMDAT

; 42   : 	new ((void _FARQ *)_Ptr) _T1(_Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 14		 je	 SHORT $L192675
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00016	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00019	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L192675:

; 43   : 	}

  0001c	c3		 ret	 0
??$_Construct@U__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@ABU12@@Z ENDP ; std::_Construct<CGuildCombat::__GCPLAYERPOINT,CGuildCombat::__GCPLAYERPOINT>
_TEXT	ENDS
PUBLIC	??$_Destroy@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::_Destroy<CGuildCombat::__GCPLAYERPOINT>
; Function compile flags: /Ogty
;	COMDAT ??$_Destroy@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Destroy@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::_Destroy<CGuildCombat::__GCPLAYERPOINT>, COMDAT

; 49   : 	_DESTRUCTOR(_Ty, _Ptr);
; 50   : 	}

  00000	c3		 ret	 0
??$_Destroy@U__GCPLAYERPOINT@CGuildCombat@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::_Destroy<CGuildCombat::__GCPLAYERPOINT>
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L192686:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L192686
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L192696
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L192696:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L192704
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L192704:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L192714
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L192715
$L192714:
  00011	8b d0		 mov	 edx, eax
$L192715:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L185560
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L192722
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L192722:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L185560
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L185560:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCGETPOINT@CGuildCombat@@@1@@Z ; std::_Vector_val<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Vector_val<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0?$_Vector_val@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCGETPOINT@CGuildCombat@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCGETPOINT@CGuildCombat@@@1@@Z PROC NEAR ; std::_Vector_val<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Vector_val<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCGETPOINT@CGuildCombat@@@1@@Z ENDP ; std::_Vector_val<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Vector_val<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@1@@Z ; std::_Vector_val<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Vector_val<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Vector_val@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@1@@Z PROC NEAR ; std::_Vector_val<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Vector_val<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@1@@Z ENDP ; std::_Vector_val<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Vector_val<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	?max_size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 c7 71 1c 07	 mov	 eax, 119304647		; 071c71c7H

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEPAU__GCGETPOINT@CGuildCombat@@I@Z ; std::allocator<CGuildCombat::__GCGETPOINT>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEPAU__GCGETPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEPAU__GCGETPOINT@CGuildCombat@@I@Z PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEPAU__GCGETPOINT@CGuildCombat@@I@Z ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::allocate
_TEXT	ENDS
PUBLIC	?max_size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?max_size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 55 55 55 15	 mov	 eax, 357913941		; 15555555H

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEPAU__GCPLAYERPOINT@CGuildCombat@@I@Z ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEPAU__GCPLAYERPOINT@CGuildCombat@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEPAU__GCPLAYERPOINT@CGuildCombat@@I@Z PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00007	c1 e0 02	 shl	 eax, 2
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00010	83 c4 04	 add	 esp, 4

; 138  : 		}

  00013	c2 04 00	 ret	 4
?allocate@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEPAU__GCPLAYERPOINT@CGuildCombat@@I@Z ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::allocate
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 04 c0	 lea	 eax, DWORD PTR [eax+eax*8]
  00009	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  00012	c2 08 00	 ret	 8
??Hiterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	8b c8		 mov	 ecx, eax
  0000a	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0000f	f7 e9		 imul	 ecx
  00011	c1 fa 03	 sar	 edx, 3
  00014	8b c2		 mov	 eax, edx
  00016	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00019	03 c2		 add	 eax, edx

; 280  : 			}

  0001b	c2 04 00	 ret	 4
??Giterator@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@PAU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::iterator
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator+
; Function compile flags: /Ogty
;	COMDAT ??Hiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Off$[esp-4]
  00004	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00006	8d 04 40	 lea	 eax, DWORD PTR [eax+eax*2]
  00009	8d 14 81	 lea	 edx, DWORD PTR [ecx+eax*4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00010	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  00012	c2 08 00	 ret	 8
??Hiterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	8b c8		 mov	 ecx, eax
  0000a	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0000f	f7 e9		 imul	 ecx
  00011	d1 fa		 sar	 edx, 1
  00013	8b c2		 mov	 eax, edx
  00015	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00018	03 c2		 add	 eax, edx

; 280  : 			}

  0001a	c2 04 00	 ret	 4
??Giterator@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??$copy_backward@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00@Z ; std::copy_backward<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy_backward@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00@Z PROC NEAR ; std::copy_backward<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00004	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00008	53		 push	 ebx
  00009	8b 5c 24 08	 mov	 ebx, DWORD PTR __First$[esp]
  0000d	3b da		 cmp	 ebx, edx
  0000f	74 19		 je	 SHORT $L192813
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192812:
  00013	83 ea 24	 sub	 edx, 36			; 00000024H
  00016	83 e8 24	 sub	 eax, 36			; 00000024H
  00019	3b d3		 cmp	 edx, ebx
  0001b	b9 09 00 00 00	 mov	 ecx, 9
  00020	8b f2		 mov	 esi, edx
  00022	8b f8		 mov	 edi, eax
  00024	f3 a5		 rep movsd
  00026	75 eb		 jne	 SHORT $L192812
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
$L192813:
  0002a	5b		 pop	 ebx

; 1070 : 	}

  0002b	c3		 ret	 0
??$copy_backward@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00@Z ENDP ; std::copy_backward<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>
_TEXT	ENDS
PUBLIC	??$copy_backward@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00@Z ; std::copy_backward<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>
; Function compile flags: /Ogty
;	COMDAT ??$copy_backward@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00@Z
_TEXT	SEGMENT
__Cat$192826 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00@Z PROC NEAR ; std::copy_backward<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>, COMDAT

; 1067 : 	{	// copy [_First, _Last) backwards to [..., _Dest)

  00000	51		 push	 ecx

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$192826[esp+4]
  00004	8b 4c 24 10	 mov	 ecx, DWORD PTR __Dest$[esp]
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Last$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp+4]
  00011	51		 push	 ecx
  00012	52		 push	 edx
  00013	50		 push	 eax
  00014	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>

; 1070 : 	}

  00019	83 c4 14	 add	 esp, 20			; 00000014H
  0001c	c3		 ret	 0
??$copy_backward@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00@Z ENDP ; std::copy_backward<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@ABU34@@Z ; std::allocator<CGuildCombat::__GCGETPOINT>::construct
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?construct@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@ABU34@@Z PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::construct, COMDAT
; _this$ = ecx

; 146  : 		{	// construct object at _Ptr with value _Val

  00000	57		 push	 edi

; 147  : 		_Construct(_Ptr, _Val);

  00001	8b 7c 24 08	 mov	 edi, DWORD PTR __Ptr$[esp]
  00005	85 ff		 test	 edi, edi
  00007	74 0d		 je	 SHORT $L192838
  00009	56		 push	 esi
  0000a	8b 74 24 10	 mov	 esi, DWORD PTR __Val$[esp+4]
  0000e	b9 09 00 00 00	 mov	 ecx, 9
  00013	f3 a5		 rep movsd
  00015	5e		 pop	 esi
$L192838:
  00016	5f		 pop	 edi

; 148  : 		}

  00017	c2 08 00	 ret	 8
?construct@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@ABU34@@Z ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@@Z ; std::allocator<CGuildCombat::__GCGETPOINT>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::allocator<CGuildCombat::__GCGETPOINT>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@QAEXPAU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::allocator<CGuildCombat::__GCGETPOINT>::destroy
_TEXT	ENDS
PUBLIC	?construct@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@ABU34@@Z ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::construct
; Function compile flags: /Ogty
;	COMDAT ?construct@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@ABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Val$ = 12						; size = 4
?construct@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@ABU34@@Z PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::construct, COMDAT
; _this$ = ecx

; 147  : 		_Construct(_Ptr, _Val);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	74 14		 je	 SHORT $L192859
  00008	8b 4c 24 08	 mov	 ecx, DWORD PTR __Val$[esp-4]
  0000c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000e	89 10		 mov	 DWORD PTR [eax], edx
  00010	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00013	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00016	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00019	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$L192859:

; 148  : 		}

  0001c	c2 08 00	 ret	 8
?construct@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@ABU34@@Z ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::construct
_TEXT	ENDS
PUBLIC	?destroy@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::destroy
; Function compile flags: /Ogty
;	COMDAT ?destroy@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?destroy@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::destroy, COMDAT
; _this$ = ecx

; 152  : 		_Destroy(_Ptr);
; 153  : 		}

  00000	c2 04 00	 ret	 4
?destroy@?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@QAEXPAU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::allocator<CGuildCombat::__GCPLAYERPOINT>::destroy
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >
EXTRN	__CxxThrowException@8:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT

; 78   : 	_FwdIt _Next = _Dest;
; 79   : 
; 80   : 	_TRY_BEGIN
; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  00008	53		 push	 ebx
  00009	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Last$[esp]
  0000d	3b d3		 cmp	 edx, ebx
  0000f	74 1d		 je	 SHORT $L192291
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192289:

; 82   : 		_Al.construct(_Dest, *_First);

  00013	85 c0		 test	 eax, eax
  00015	74 0b		 je	 SHORT $L192290
  00017	b9 09 00 00 00	 mov	 ecx, 9
  0001c	8b f2		 mov	 esi, edx
  0001e	8b f8		 mov	 edi, eax
  00020	f3 a5		 rep movsd
$L192290:
  00022	83 c2 24	 add	 edx, 36			; 00000024H
  00025	83 c0 24	 add	 eax, 36			; 00000024H
  00028	3b d3		 cmp	 edx, ebx
  0002a	75 e7		 jne	 SHORT $L192289
  0002c	5f		 pop	 edi
  0002d	5e		 pop	 esi
$L192291:
  0002e	5b		 pop	 ebx

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)
; 85   : 		_Al.destroy(_Next);
; 86   : 	_RERAISE;
; 87   : 	_CATCH_END
; 88   : 	return (_Dest);
; 89   : 	}

  0002f	c3		 ret	 0
??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT

; 78   : 	_FwdIt _Next = _Dest;
; 79   : 
; 80   : 	_TRY_BEGIN
; 81   : 	for (; _First != _Last; ++_Dest, ++_First)

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	3b ca		 cmp	 ecx, edx
  0000a	8b 44 24 0c	 mov	 eax, DWORD PTR __Dest$[esp-4]
  0000e	74 28		 je	 SHORT $L192300
  00010	53		 push	 ebx
  00011	56		 push	 esi
  00012	57		 push	 edi
$L192298:

; 82   : 		_Al.construct(_Dest, *_First);

  00013	85 c0		 test	 eax, eax
  00015	74 14		 je	 SHORT $L192299
  00017	8b f1		 mov	 esi, ecx
  00019	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001b	8b f8		 mov	 edi, eax
  0001d	89 1f		 mov	 DWORD PTR [edi], ebx
  0001f	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00022	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00025	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  00028	89 77 08	 mov	 DWORD PTR [edi+8], esi
$L192299:
  0002b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0002e	83 c0 0c	 add	 eax, 12			; 0000000cH
  00031	3b ca		 cmp	 ecx, edx
  00033	75 de		 jne	 SHORT $L192298
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
$L192300:

; 83   : 	_CATCH_ALL
; 84   : 	for (; _Next != _Dest; ++_Next)
; 85   : 		_Al.destroy(_Next);
; 86   : 	_RERAISE;
; 87   : 	_CATCH_END
; 88   : 	return (_Dest);
; 89   : 	}

  00038	c3		 ret	 0
??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L192950
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L192950:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?end@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::end
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?end@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::end
_TEXT	ENDS
PUBLIC	?end@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::end
_TEXT	ENDS
PUBLIC	?begin@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::begin
_TEXT	ENDS
PUBLIC	?begin@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::begin
; Function compile flags: /Ogty
;	COMDAT ?begin@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::begin
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT

; 208  : 	_FwdIt _Next = _First;
; 209  : 
; 210  : 	_TRY_BEGIN
; 211  : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	76 25		 jbe	 SHORT $L192143
  00008	53		 push	 ebx
  00009	8b 5c 24 10	 mov	 ebx, DWORD PTR __Val$[esp]
  0000d	56		 push	 esi
  0000e	8b d0		 mov	 edx, eax
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp+4]
  00014	57		 push	 edi
$L192141:

; 212  : 		_Al.construct(_First, _Val);

  00015	85 c0		 test	 eax, eax
  00017	74 0b		 je	 SHORT $L192142
  00019	b9 09 00 00 00	 mov	 ecx, 9
  0001e	8b f3		 mov	 esi, ebx
  00020	8b f8		 mov	 edi, eax
  00022	f3 a5		 rep movsd
$L192142:
  00024	83 c0 24	 add	 eax, 36			; 00000024H
  00027	4a		 dec	 edx
  00028	75 eb		 jne	 SHORT $L192141
  0002a	5f		 pop	 edi
  0002b	5e		 pop	 esi
  0002c	5b		 pop	 ebx
$L192143:

; 213  : 	_CATCH_ALL
; 214  : 	for (; _Next != _First; ++_Next)
; 215  : 		_Al.destroy(_Next);
; 216  : 	_RERAISE;
; 217  : 	_CATCH_END
; 218  : 	}

  0002d	c3		 ret	 0
??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT

; 208  : 	_FwdIt _Next = _First;
; 209  : 
; 210  : 	_TRY_BEGIN
; 211  : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	85 c0		 test	 eax, eax
  00006	76 2e		 jbe	 SHORT $L192154
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	53		 push	 ebx
  0000d	56		 push	 esi
  0000e	8b c8		 mov	 ecx, eax
  00010	8b 44 24 0c	 mov	 eax, DWORD PTR __First$[esp+4]
  00014	57		 push	 edi
$L192152:

; 212  : 		_Al.construct(_First, _Val);

  00015	85 c0		 test	 eax, eax
  00017	74 14		 je	 SHORT $L192153
  00019	8b f2		 mov	 esi, edx
  0001b	8b 1e		 mov	 ebx, DWORD PTR [esi]
  0001d	8b f8		 mov	 edi, eax
  0001f	89 1f		 mov	 DWORD PTR [edi], ebx
  00021	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  00024	89 5f 04	 mov	 DWORD PTR [edi+4], ebx
  00027	8b 76 08	 mov	 esi, DWORD PTR [esi+8]
  0002a	89 77 08	 mov	 DWORD PTR [edi+8], esi
$L192153:
  0002d	83 c0 0c	 add	 eax, 12			; 0000000cH
  00030	49		 dec	 ecx
  00031	75 e2		 jne	 SHORT $L192152
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
$L192154:

; 213  : 	_CATCH_ALL
; 214  : 	for (; _Next != _First; ++_Next)
; 215  : 		_Al.destroy(_Next);
; 216  : 	_RERAISE;
; 217  : 	_CATCH_END
; 218  : 	}

  00036	c3		 ret	 0
??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT

; 225  : 	for (; _First != _Last; ++_First)
; 226  : 		_Al.destroy(_First);
; 227  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z ; std::_Uninitialized_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT
__Cat$193091 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$193091[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >

; 129  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z ENDP ; std::_Uninitialized_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT

; 225  : 	for (; _First != _Last; ++_First)
; 226  : 		_Al.destroy(_First);
; 227  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z ; std::_Uninitialized_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT
__Cat$193102 = -4					; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT

; 126  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

  00000	51		 push	 ecx

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$193102[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Dest$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Last$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 129  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z ENDP ; std::_Uninitialized_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L193110

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L193110

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L193107
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L193107:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L193110:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L184993

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L184993:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L184994

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L184994:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L193174

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L193139
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L193140
$L193139:
  00036	8b d3		 mov	 edx, ebx
$L193140:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L193146
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L193147
$L193146:
  00041	8b cb		 mov	 ecx, ebx
$L193147:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L193169

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L193169:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L193174:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T193378 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T193380 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L193180
$T193381 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L193178
$T193379 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T193380
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T193381
$T193372 DD	019930520H
	DD	04H
	DD	FLAT:$T193378
	DD	02H
	DD	FLAT:$T193379
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L185550

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L185552
$L185550:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L185552
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L185552

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L185552:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L185554
$L193178:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L193373
  00092	c3		 ret	 0
$L193373:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L185554:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L193298

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L193294
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L193295
$L193294:
  000ae	83 c6 04	 add	 esi, 4
$L193295:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L193298:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L193339
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L193339:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L193368
  000f2	8b c2		 mov	 eax, edx
$L193368:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L193180:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L193278
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L193278:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L193377:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T193372
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	??$_Uninitialized_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z ; std::_Uninitialized_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT
__Cat$193389 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT

; 255  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$193389[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Val$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >

; 258  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z ENDP ; std::_Uninitialized_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z ; std::_Uninitialized_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT
__Cat$193396 = -4					; size = 1
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT

; 255  : 	{	// copy _Count *_Val to raw _First, using _Al

  00000	51		 push	 ecx

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00001	8b 04 24	 mov	 eax, DWORD PTR __Cat$193396[esp+4]
  00004	8b 4c 24 14	 mov	 ecx, DWORD PTR __Al$[esp]
  00008	8b 54 24 10	 mov	 edx, DWORD PTR __Val$[esp]
  0000c	50		 push	 eax
  0000d	8b 44 24 10	 mov	 eax, DWORD PTR __Count$[esp+4]
  00011	51		 push	 ecx
  00012	8b 4c 24 10	 mov	 ecx, DWORD PTR __First$[esp+8]
  00016	52		 push	 edx
  00017	50		 push	 eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 258  : 	}

  0001e	83 c4 18	 add	 esp, 24			; 00000018H
  00021	c3		 ret	 0
??$_Uninitialized_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z ENDP ; std::_Uninitialized_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z ; std::_Destroy_range<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z PROC NEAR ; std::_Destroy_range<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@@Z ENDP ; std::_Destroy_range<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAU__GCGETPOINT@CGuildCombat@@@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU23@00@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ucopy<CGuildCombat::__GCGETPOINT *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAU__GCGETPOINT@CGuildCombat@@@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$193417 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAU__GCGETPOINT@CGuildCombat@@@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU23@00@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ucopy<CGuildCombat::__GCGETPOINT *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$193417[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 805  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAU__GCGETPOINT@CGuildCombat@@@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU23@00@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ucopy<CGuildCombat::__GCGETPOINT *>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z ; std::_Destroy_range<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z PROC NEAR ; std::_Destroy_range<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@@Z ENDP ; std::_Destroy_range<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAU__GCPLAYERPOINT@CGuildCombat@@@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU23@00@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ucopy<CGuildCombat::__GCPLAYERPOINT *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAU__GCPLAYERPOINT@CGuildCombat@@@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU23@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Cat$193440 = 16					; size = 1
__Ptr$ = 16						; size = 4
??$_Ucopy@PAU__GCPLAYERPOINT@CGuildCombat@@@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU23@00@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ucopy<CGuildCombat::__GCPLAYERPOINT *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$193440[esp-4]
  00004	8b 54 24 08	 mov	 edx, DWORD PTR __Last$[esp-4]
  00008	50		 push	 eax
  00009	8b 44 24 08	 mov	 eax, DWORD PTR __First$[esp]
  0000d	51		 push	 ecx
  0000e	8b 4c 24 14	 mov	 ecx, DWORD PTR __Ptr$[esp+4]
  00012	51		 push	 ecx
  00013	52		 push	 edx
  00014	50		 push	 eax
  00015	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
  0001a	83 c4 14	 add	 esp, 20			; 00000014H

; 805  : 		}

  0001d	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAU__GCPLAYERPOINT@CGuildCombat@@@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU23@00@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ucopy<CGuildCombat::__GCPLAYERPOINT *>
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L193485
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L193485:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L185002

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L185002:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L185003

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L185003:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L185005
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L185005
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L193499
  00047	8b de		 mov	 ebx, esi
$L193499:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L193568
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L193566
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L193566:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L193568:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L185005:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L193590

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L193586
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L193586:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L193590:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU34@IABU34@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ufill
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Ufill@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU34@IABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$193605 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU34@IABU34@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ufill, COMDAT
; _this$ = ecx

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$193605[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+12]
  00014	51		 push	 ecx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >

; 879  : 		return (_Ptr + _Count);

  0001c	8d 14 f6	 lea	 edx, DWORD PTR [esi+esi*8]
  0001f	83 c4 14	 add	 esp, 20			; 00000014H
  00022	8d 04 97	 lea	 eax, DWORD PTR [edi+edx*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU34@IABU34@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU34@IABU34@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ufill
; Function compile flags: /Ogty
;	COMDAT ?_Ufill@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU34@IABU34@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Cat$193620 = 16					; size = 1
__Val$ = 16						; size = 4
?_Ufill@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU34@IABU34@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ufill, COMDAT
; _this$ = ecx

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00000	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$193620[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000e	50		 push	 eax
  0000f	51		 push	 ecx
  00010	8b 4c 24 1c	 mov	 ecx, DWORD PTR __Val$[esp+12]
  00014	51		 push	 ecx
  00015	56		 push	 esi
  00016	57		 push	 edi
  00017	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 879  : 		return (_Ptr + _Count);

  0001c	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  0001f	83 c4 14	 add	 esp, 20			; 00000014H
  00022	8d 04 97	 lea	 eax, DWORD PTR [edi+edx*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU34@IABU34@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ufill
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCGETPOINT@CGuildCombat@@0@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCGETPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCGETPOINT@CGuildCombat@@0@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCGETPOINT@CGuildCombat@@0@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Destroy
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCPLAYERPOINT@CGuildCombat@@0@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCPLAYERPOINT@CGuildCombat@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCPLAYERPOINT@CGuildCombat@@0@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXPAU__GCPLAYERPOINT@CGuildCombat@@0@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Destroy
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L193693
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L193693:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L193719
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L193719:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L193725
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L193725:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L184271

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L184271:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L184273

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L184273:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L184274

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L184274:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L193875
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L193875:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L193876
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L193921:
  0006b	76 6d		 jbe	 SHORT $L193920

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L193886
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L193887

; 599  : 		else if (_Grow(_Num))

$L193876:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L193921
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L193868
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L193868:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L193886:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L193887:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L193892
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L193893
$L193892:
  000b7	8b f8		 mov	 edi, eax
$L193893:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L193915
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L193915:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L193920:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L193945
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L193946
$L193945:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L193946:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L184989
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L193949
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L193950
$L193949:
  00029	8b c8		 mov	 ecx, eax
$L193950:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L184989

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L193958
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L193958:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L184989:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L194099
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L194099:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L194100
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L194138:
  00077	76 68		 jbe	 SHORT $L194135

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L194109
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L194110

; 611  : 
; 612  : 		if (_Grow(_Num))

$L194100:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L194138
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L194092
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L194092:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L194109:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L194110:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L194131
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L194131:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L194135:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Tidy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L194142

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L194142:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXXZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Tidy
; Function compile flags: /Ogty
;	COMDAT ?_Tidy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L194149

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L194149:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXXZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Tidy
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L194224:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L194224
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::~vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::~vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L194234
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L194234:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::~vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L194247
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L194247:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXXZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::clear
_TEXT	ENDS
PUBLIC	??1?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::~vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??1?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::~vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L194260
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L194260:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::~vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L194273
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L194273:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXXZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::clear
_TEXT	ENDS
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T194379 DD	0ffffffffH
	DD	FLAT:$L194279
$T194377 DD	019930520H
	DD	01H
	DD	FLAT:$T194379
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L194279:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T194377
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L194387
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L194387:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L194480
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L194480:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L194567:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L194567
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?GuildCombatClear@CGuildCombat@@QAEXH@Z		; CGuildCombat::GuildCombatClear
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\eveschool.cpp
;	COMDAT ?GuildCombatClear@CGuildCombat@@QAEXH@Z
_TEXT	SEGMENT
_nState$ = 8						; size = 4
?GuildCombatClear@CGuildCombat@@QAEXH@Z PROC NEAR	; CGuildCombat::GuildCombatClear, COMDAT
; _this$ = ecx

; 330  : 	m_nState = CLOSE_STATE;
; 331  : 	m_nGCState = WAR_CLOSE_STATE;
; 332  : 
; 333  : 	if( nState == 99 || nState == 1 )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nState$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f1		 mov	 esi, ecx
  00008	33 ff		 xor	 edi, edi
  0000a	83 f8 63	 cmp	 eax, 99			; 00000063H
  0000d	c7 46 34 01 00
	00 00		 mov	 DWORD PTR [esi+52], 1
  00014	c7 46 38 69 00
	00 00		 mov	 DWORD PTR [esi+56], 105	; 00000069H
  0001b	74 05		 je	 SHORT $L190852
  0001d	83 f8 01	 cmp	 eax, 1
  00020	75 0c		 jne	 SHORT $L190851
$L190852:

; 334  : 	{
; 335  : 		m_nGuildCombatIndex = 0;

  00022	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 336  : 		m_uWinGuildId = 0;

  00025	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 337  : 		m_nWinGuildCount = 0;

  00028	89 7e 0c	 mov	 DWORD PTR [esi+12], edi

; 338  : 		m_uBestPlayer = 0;

  0002b	89 7e 10	 mov	 DWORD PTR [esi+16], edi
$L190851:

; 339  : 	}	
; 340  : 
; 341  : 	m_vecGCGetPoint.clear();

  0002e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00031	3b c7		 cmp	 eax, edi
  00033	74 09		 je	 SHORT $L194585
  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
$L194585:
  0003e	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00041	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00044	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi

; 342  : #ifdef __WORLDSERVER
; 343  : 
; 344  : #ifdef __S_BUG_GC
; 345  : 	for( int gcmi = 0 ; gcmi < (int)( m_vecGuildCombatMem.size() ) ; ++gcmi )
; 346  : 		safe_delete( m_vecGuildCombatMem[gcmi] );
; 347  : 	m_vecGuildCombatMem.clear();
; 348  : #else // __S_BUG_GC
; 349  : 	for( map<u_long, __GuildCombatMember*>::iterator i = m_GuildCombatMem.begin(); i != m_GuildCombatMem.end(); ++i )
; 350  : 		safe_delete( i->second );
; 351  : 	m_GuildCombatMem.clear();
; 352  : #endif // __S_BUG_GC
; 353  : 	vecRequestRanking.clear();
; 354  : 	m_dwTime = 0;
; 355  : 	m_nStopWar = 0;
; 356  : 	if( g_eLocal.GetState( EVE_GUILDCOMBAT ) )
; 357  : 		g_DPCoreClient.SendGuildCombatState( CLOSE_STATE );		
; 358  : 
; 359  : 	if( nState == 99 || nState == 3 )
; 360  : 	{
; 361  : 		m_nJoinPanya = 0;
; 362  : 		m_nGuildLevel = 0;
; 363  : 		m_nMaxJoinMember = 0;
; 364  : 		m_nMaxPlayerLife = 0;
; 365  : 		m_nMaxWarPlayer = 0;
; 366  : 		m_nMaxPlayerPercent = 0;
; 367  : 		m_nMaxGuildPercent = 0;
; 368  : 		m_nRequestCanclePercent = 0;
; 369  : 		m_nNotRequestPercent = 0;
; 370  : 		m_nItemPenya = 0;
; 371  : 	}
; 372  : #endif // __WORLDSERVER
; 373  : #ifdef __CLIENT
; 374  : 	m_bRequest = FALSE;
; 375  : #endif // __CLIENT
; 376  : }

  00049	c2 04 00	 ret	 4
?GuildCombatClear@CGuildCombat@@QAEXH@Z ENDP		; CGuildCombat::GuildCombatClear
_TEXT	ENDS
PUBLIC	?GuildCombatGameClear@CGuildCombat@@QAEXXZ	; CGuildCombat::GuildCombatGameClear
; Function compile flags: /Ogty
;	COMDAT ?GuildCombatGameClear@CGuildCombat@@QAEXXZ
_TEXT	SEGMENT
?GuildCombatGameClear@CGuildCombat@@QAEXXZ PROC NEAR	; CGuildCombat::GuildCombatGameClear, COMDAT
; _this$ = ecx

; 379  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 380  : 	GuildCombatClear( 2 );

  00003	c7 46 34 01 00
	00 00		 mov	 DWORD PTR [esi+52], 1
  0000a	c7 46 38 69 00
	00 00		 mov	 DWORD PTR [esi+56], 105	; 00000069H
  00011	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00014	85 c0		 test	 eax, eax
  00016	74 09		 je	 SHORT $L194617
  00018	50		 push	 eax
  00019	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001e	83 c4 04	 add	 esp, 4
$L194617:
  00021	c7 46 18 00 00
	00 00		 mov	 DWORD PTR [esi+24], 0
  00028	c7 46 1c 00 00
	00 00		 mov	 DWORD PTR [esi+28], 0
  0002f	c7 46 20 00 00
	00 00		 mov	 DWORD PTR [esi+32], 0
  00036	5e		 pop	 esi

; 381  : }

  00037	c3		 ret	 0
?GuildCombatGameClear@CGuildCombat@@QAEXXZ ENDP		; CGuildCombat::GuildCombatGameClear
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Xlen
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T194743 DD	0ffffffffH
	DD	FLAT:$L194628
$T194740 DD	019930520H
	DD	01H
	DD	FLAT:$T194743
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T194627 = -80						; size = 28
$T194626 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T194627[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T194627[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T194627[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T194627[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T194627[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T194626[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T194626[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T194626[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L194742:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L194628:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T194627[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T194740
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T194848 DD	0ffffffffH
	DD	FLAT:$L194748
$T194846 DD	019930520H
	DD	01H
	DD	FLAT:$T194848
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L194748:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T194846
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Xlen
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T194973 DD	0ffffffffH
	DD	FLAT:$L194858
$T194970 DD	019930520H
	DD	01H
	DD	FLAT:$T194973
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T194857 = -80						; size = 28
$T194856 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T194857[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T194857[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T194857[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T194857[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T194857[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T194856[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T194856[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T194856[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L194972:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L194858:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T194857[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T194970
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Xlen
PUBLIC	??1CGuildCombat@@UAE@XZ				; CGuildCombat::~CGuildCombat
PUBLIC	??_7CGuildCombat@@6B@				; CGuildCombat::`vftable'
PUBLIC	??_GCGuildCombat@@UAEPAXI@Z			; CGuildCombat::`scalar deleting destructor'
EXTRN	??_ECGuildCombat@@UAEPAXI@Z:NEAR		; CGuildCombat::`vector deleting destructor'
;	COMDAT ??_7CGuildCombat@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
CONST	SEGMENT
??_7CGuildCombat@@6B@ DD FLAT:??_ECGuildCombat@@UAEPAXI@Z ; CGuildCombat::`vftable'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\eveschool.cpp
CONST	ENDS
;	COMDAT ??1CGuildCombat@@UAE@XZ
_TEXT	SEGMENT
??1CGuildCombat@@UAE@XZ PROC NEAR			; CGuildCombat::~CGuildCombat, COMDAT
; _this$ = ecx

; 324  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 325  : 	GuildCombatClear( 99 );

  00004	33 ff		 xor	 edi, edi
  00006	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CGuildCombat@@6B@
  0000c	c7 46 34 01 00
	00 00		 mov	 DWORD PTR [esi+52], 1
  00013	c7 46 38 69 00
	00 00		 mov	 DWORD PTR [esi+56], 105	; 00000069H
  0001a	89 7e 04	 mov	 DWORD PTR [esi+4], edi
  0001d	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00020	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00023	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00026	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00029	3b c7		 cmp	 eax, edi
  0002b	74 09		 je	 SHORT $L195007
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 04	 add	 esp, 4
$L195007:
  00036	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00039	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0003c	89 7e 20	 mov	 DWORD PTR [esi+32], edi

; 326  : }

  0003f	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  00042	3b c7		 cmp	 eax, edi
  00044	74 09		 je	 SHORT $L195026
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0004c	83 c4 04	 add	 esp, 4
$L195026:
  0004f	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  00052	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  00055	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00058	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  0005b	3b c7		 cmp	 eax, edi
  0005d	74 09		 je	 SHORT $L195046
  0005f	50		 push	 eax
  00060	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00065	83 c4 04	 add	 esp, 4
$L195046:
  00068	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  0006b	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  0006e	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	c3		 ret	 0
??1CGuildCombat@@UAE@XZ ENDP				; CGuildCombat::~CGuildCombat
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Buy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Buy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L191419

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L191419:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d c7 71 1c 07	 cmp	 eax, 119304647		; 071c71c7H
  00021	76 07		 jbe	 SHORT $L191421

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Xlen
$L191421:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c c0	 lea	 edi, DWORD PTR [eax+eax*8]
  0002e	c1 e7 02	 shl	 edi, 2
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00037	03 f8		 add	 edi, eax
  00039	83 c4 04	 add	 esp, 4
  0003c	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0003f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00042	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00045	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00046	b0 01		 mov	 al, 1
  00048	5e		 pop	 esi

; 783  : 		}

  00049	c2 04 00	 ret	 4
$L195078:
?_Buy@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Buy
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Buy
; Function compile flags: /Ogty
;	COMDAT ?_Buy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L191460

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L191460:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d 55 55 55 15	 cmp	 eax, 357913941		; 15555555H
  00021	76 07		 jbe	 SHORT $L191462

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Xlen
$L191462:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 40	 lea	 edi, DWORD PTR [eax+eax*2]
  0002e	c1 e7 02	 shl	 edi, 2
  00031	57		 push	 edi
  00032	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00037	03 f8		 add	 edi, eax
  00039	83 c4 04	 add	 esp, 4
  0003c	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  0003f	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00042	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00045	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00046	b0 01		 mov	 al, 1
  00048	5e		 pop	 esi

; 783  : 		}

  00049	c2 04 00	 ret	 4
$L195105:
?_Buy@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
xdata$x	SEGMENT
$T195319 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T195321 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L195111
$T195322 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L195113
$T195320 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T195321
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T195322
$T195316 DD	019930520H
	DD	04H
	DD	FLAT:$T195319
	DD	02H
	DD	FLAT:$T195320
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Tmp$ = -52						; size = 36
__$EHRec$ = -16						; size = 16
tv427 = 8						; size = 4
tv414 = 8						; size = 4
__Cat$195288 = 8					; size = 1
__Cat$195312 = 8					; size = 1
__Cat$195226 = 8					; size = 1
__Cat$195248 = 8					; size = 1
__Cat$195203 = 8					; size = 1
__Where$ = 8						; size = 4
tv220 = 12						; size = 4
__Count$ = 12						; size = 4
tv398 = 16						; size = 4
__Newvec$191527 = 16					; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 28	 sub	 esp, 40			; 00000028H
  0001b	53		 push	 ebx
  0001c	56		 push	 esi

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  0001d	8b 75 10	 mov	 esi, DWORD PTR __Val$[ebp]
  00020	57		 push	 edi
  00021	8b d9		 mov	 ebx, ecx
  00023	b9 09 00 00 00	 mov	 ecx, 9
  00028	8d 7d cc	 lea	 edi, DWORD PTR __Tmp$[ebp]
  0002b	f3 a5		 rep movsd

; 811  : 		size_type _Capacity = capacity();

  0002d	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00030	85 ff		 test	 edi, edi
  00032	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00035	75 04		 jne	 SHORT $L195118
  00037	33 c9		 xor	 ecx, ecx
  00039	eb 16		 jmp	 SHORT $L195119
$L195118:
  0003b	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0003e	2b cf		 sub	 ecx, edi
  00040	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00045	f7 e9		 imul	 ecx
  00047	c1 fa 03	 sar	 edx, 3
  0004a	8b ca		 mov	 ecx, edx
  0004c	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0004f	03 ca		 add	 ecx, edx
$L195119:

; 812  : 
; 813  : 		if (_Count == 0)

  00051	8b 75 0c	 mov	 esi, DWORD PTR __Count$[ebp]
  00054	85 f6		 test	 esi, esi
  00056	0f 84 3e 02 00
	00		 je	 $L191547

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0005c	85 ff		 test	 edi, edi
  0005e	75 04		 jne	 SHORT $L195141
  00060	33 c0		 xor	 eax, eax
  00062	eb 16		 jmp	 SHORT $L195142
$L195141:
  00064	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00067	2b d7		 sub	 edx, edi
  00069	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0006e	f7 ea		 imul	 edx
  00070	c1 fa 03	 sar	 edx, 3
  00073	8b c2		 mov	 eax, edx
  00075	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00078	03 c2		 add	 eax, edx
$L195142:
  0007a	ba c7 71 1c 07	 mov	 edx, 119304647		; 071c71c7H
  0007f	2b d0		 sub	 edx, eax
  00081	3b d6		 cmp	 edx, esi
  00083	73 07		 jae	 SHORT $L191523

; 816  : 			_Xlen();	// result too long

  00085	8b cb		 mov	 ecx, ebx
  00087	e8 00 00 00 00	 call	 ?_Xlen@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Xlen
$L191523:

; 817  : 		else if (_Capacity < size() + _Count)

  0008c	85 ff		 test	 edi, edi
  0008e	75 04		 jne	 SHORT $L195148
  00090	33 c0		 xor	 eax, eax
  00092	eb 16		 jmp	 SHORT $L195149
$L195148:
  00094	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  00097	2b d7		 sub	 edx, edi
  00099	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0009e	f7 ea		 imul	 edx
  000a0	c1 fa 03	 sar	 edx, 3
  000a3	8b c2		 mov	 eax, edx
  000a5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000a8	03 c2		 add	 eax, edx
$L195149:
  000aa	03 c6		 add	 eax, esi
  000ac	3b c8		 cmp	 ecx, eax
  000ae	0f 83 10 01 00
	00		 jae	 $L191525

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000b4	8b c1		 mov	 eax, ecx
  000b6	d1 e8		 shr	 eax, 1
  000b8	ba c7 71 1c 07	 mov	 edx, 119304647		; 071c71c7H
  000bd	2b d0		 sub	 edx, eax
  000bf	3b d1		 cmp	 edx, ecx
  000c1	73 04		 jae	 SHORT $L195108
  000c3	33 c9		 xor	 ecx, ecx
  000c5	eb 02		 jmp	 SHORT $L195109
$L195108:
  000c7	03 c8		 add	 ecx, eax
$L195109:

; 821  : 			if (_Capacity < size() + _Count)

  000c9	85 ff		 test	 edi, edi
  000cb	75 04		 jne	 SHORT $L195171
  000cd	33 c0		 xor	 eax, eax
  000cf	eb 16		 jmp	 SHORT $L195172
$L195171:
  000d1	8b 53 08	 mov	 edx, DWORD PTR [ebx+8]
  000d4	2b d7		 sub	 edx, edi
  000d6	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  000db	f7 ea		 imul	 edx
  000dd	c1 fa 03	 sar	 edx, 3
  000e0	8b c2		 mov	 eax, edx
  000e2	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e5	03 c2		 add	 eax, edx
$L195172:
  000e7	03 c6		 add	 eax, esi
  000e9	3b c8		 cmp	 ecx, eax
  000eb	73 0b		 jae	 SHORT $L191526

; 822  : 				_Capacity = size() + _Count;

  000ed	8b cb		 mov	 ecx, ebx
  000ef	e8 00 00 00 00	 call	 ?size@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::size
  000f4	8b c8		 mov	 ecx, eax
  000f6	03 ce		 add	 ecx, esi
$L191526:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000f8	8d 3c c9	 lea	 edi, DWORD PTR [ecx+ecx*8]
  000fb	c1 e7 02	 shl	 edi, 2
  000fe	57		 push	 edi
  000ff	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  00104	8b 55 08	 mov	 edx, DWORD PTR __Cat$195203[ebp]
  00107	8b 4b 04	 mov	 ecx, DWORD PTR [ebx+4]
  0010a	52		 push	 edx
  0010b	53		 push	 ebx
  0010c	50		 push	 eax
  0010d	89 45 10	 mov	 DWORD PTR __Newvec$191527[ebp], eax
  00110	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00113	50		 push	 eax
  00114	51		 push	 ecx
  00115	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0011c	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  00121	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$195226[ebp]
  00124	83 c4 18	 add	 esp, 24			; 00000018H
  00127	51		 push	 ecx
  00128	53		 push	 ebx
  00129	8d 55 cc	 lea	 edx, DWORD PTR __Tmp$[ebp]
  0012c	52		 push	 edx
  0012d	56		 push	 esi
  0012e	50		 push	 eax
  0012f	89 45 0c	 mov	 DWORD PTR tv220[ebp], eax
  00132	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  00137	8b 55 08	 mov	 edx, DWORD PTR __Cat$195248[ebp]
  0013a	8b 4d 0c	 mov	 ecx, DWORD PTR tv220[ebp]
  0013d	83 c4 14	 add	 esp, 20			; 00000014H
  00140	52		 push	 edx
  00141	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  00144	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  00147	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  0014a	53		 push	 ebx
  0014b	50		 push	 eax
  0014c	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  0014f	51		 push	 ecx
  00150	50		 push	 eax
  00151	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >

; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  00156	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00159	83 c4 14	 add	 esp, 20			; 00000014H
  0015c	85 c0		 test	 eax, eax
  0015e	74 16		 je	 SHORT $L195260
$L195259:
  00160	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00163	2b c8		 sub	 ecx, eax
  00165	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0016a	f7 e9		 imul	 ecx
  0016c	c1 fa 03	 sar	 edx, 3
  0016f	8b c2		 mov	 eax, edx
  00171	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00174	03 c2		 add	 eax, edx
$L195260:
  00176	03 f0		 add	 esi, eax

; 838  : 			if (_Myfirst != 0)

  00178	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0017b	85 c0		 test	 eax, eax
  0017d	74 09		 je	 SHORT $L195263

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0017f	50		 push	 eax
  00180	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00185	83 c4 04	 add	 esp, 4
$L195263:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00188	8b 45 10	 mov	 eax, DWORD PTR __Newvec$191527[ebp]

; 844  : 			_Mylast = _Newvec + _Count;

  0018b	8d 0c f6	 lea	 ecx, DWORD PTR [esi+esi*8]
  0018e	03 f8		 add	 edi, eax
  00190	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00193	89 7b 0c	 mov	 DWORD PTR [ebx+12], edi
  00196	89 53 08	 mov	 DWORD PTR [ebx+8], edx

; 845  : 			_Myfirst = _Newvec;

  00199	89 43 04	 mov	 DWORD PTR [ebx+4], eax

; 873  : 			}
; 874  : 		}

  0019c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0019f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi
  001a8	5b		 pop	 ebx
  001a9	8b e5		 mov	 esp, ebp
  001ab	5d		 pop	 ebp
  001ac	c2 0c 00	 ret	 12			; 0000000cH
$L195111:

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  001af	8b 45 10	 mov	 eax, DWORD PTR __Newvec$191527[ebp]
  001b2	50		 push	 eax
  001b3	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001b8	83 c4 04	 add	 esp, 4
$L195113:

; 834  : 			_RERAISE;

  001bb	6a 00		 push	 0
  001bd	6a 00		 push	 0
  001bf	e8 00 00 00 00	 call	 __CxxThrowException@8
$L191525:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  001c4	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  001c7	8b 7d 08	 mov	 edi, DWORD PTR __Where$[ebp]
  001ca	8b d1		 mov	 edx, ecx
  001cc	2b d7		 sub	 edx, edi
  001ce	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  001d3	f7 ea		 imul	 edx
  001d5	c1 fa 03	 sar	 edx, 3
  001d8	8b c2		 mov	 eax, edx
  001da	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001dd	03 c2		 add	 eax, edx
  001df	3b c6		 cmp	 eax, esi
  001e1	89 4d 10	 mov	 DWORD PTR tv398[ebp], ecx
  001e4	73 79		 jae	 SHORT $L191538

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  001e6	8d 04 f6	 lea	 eax, DWORD PTR [esi+esi*8]
  001e9	c1 e0 02	 shl	 eax, 2
  001ec	89 45 08	 mov	 DWORD PTR tv414[ebp], eax
  001ef	8b 55 08	 mov	 edx, DWORD PTR __Cat$195288[ebp]
  001f2	52		 push	 edx
  001f3	53		 push	 ebx
  001f4	03 c7		 add	 eax, edi
  001f6	50		 push	 eax
  001f7	51		 push	 ecx
  001f8	57		 push	 edi
  001f9	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  001fe	8b 4b 08	 mov	 ecx, DWORD PTR [ebx+8]
  00201	83 c4 14	 add	 esp, 20			; 00000014H
  00204	8d 45 cc	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00207	50		 push	 eax
  00208	8b d1		 mov	 edx, ecx
  0020a	2b d7		 sub	 edx, edi
  0020c	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00211	f7 ea		 imul	 edx
  00213	c1 fa 03	 sar	 edx, 3
  00216	8b c2		 mov	 eax, edx
  00218	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0021b	03 c2		 add	 eax, edx
  0021d	2b f0		 sub	 esi, eax
  0021f	56		 push	 esi
  00220	51		 push	 ecx
  00221	8b cb		 mov	 ecx, ebx
  00223	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0022a	e8 00 00 00 00	 call	 ?_Ufill@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCGETPOINT@CGuildCombat@@PAU34@IABU34@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  0022f	8b 73 08	 mov	 esi, DWORD PTR [ebx+8]
  00232	8b 45 08	 mov	 eax, DWORD PTR tv414[ebp]
  00235	03 f0		 add	 esi, eax
  00237	89 73 08	 mov	 DWORD PTR [ebx+8], esi

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  0023a	8d 4d cc	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0023d	8b de		 mov	 ebx, esi
  0023f	51		 push	 ecx
  00240	2b d8		 sub	 ebx, eax
  00242	53		 push	 ebx
  00243	57		 push	 edi
  00244	e8 00 00 00 00	 call	 ??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z ; std::fill<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT>
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH

; 873  : 			}
; 874  : 		}

  0024c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0024f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	5b		 pop	 ebx
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 0c 00	 ret	 12			; 0000000cH
$L191538:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  0025f	8d 34 f6	 lea	 esi, DWORD PTR [esi+esi*8]
  00262	8b c1		 mov	 eax, ecx
  00264	c1 e6 02	 shl	 esi, 2
  00267	2b c6		 sub	 eax, esi
  00269	89 45 08	 mov	 DWORD PTR tv427[ebp], eax
  0026c	8b 55 08	 mov	 edx, DWORD PTR __Cat$195312[ebp]
  0026f	52		 push	 edx
  00270	53		 push	 ebx
  00271	51		 push	 ecx
  00272	51		 push	 ecx
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCGETPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *,std::allocator<CGuildCombat::__GCGETPOINT> >

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  00279	8b 4d 08	 mov	 ecx, DWORD PTR tv427[ebp]
  0027c	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0027f	8b 45 10	 mov	 eax, DWORD PTR tv398[ebp]
  00282	50		 push	 eax
  00283	51		 push	 ecx
  00284	57		 push	 edi
  00285	e8 00 00 00 00	 call	 ??$copy_backward@PAU__GCGETPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCGETPOINT@CGuildCombat@@PAU12@00@Z ; std::copy_backward<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  0028a	8d 55 cc	 lea	 edx, DWORD PTR __Tmp$[ebp]
  0028d	52		 push	 edx
  0028e	03 f7		 add	 esi, edi
  00290	56		 push	 esi
  00291	57		 push	 edi
  00292	e8 00 00 00 00	 call	 ??$fill@PAU__GCGETPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@0ABU12@@Z ; std::fill<CGuildCombat::__GCGETPOINT *,CGuildCombat::__GCGETPOINT>
  00297	83 c4 2c	 add	 esp, 44			; 0000002cH
$L191547:

; 873  : 			}
; 874  : 		}

  0029a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0029d	5f		 pop	 edi
  0029e	5e		 pop	 esi
  0029f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002a6	5b		 pop	 ebx
  002a7	8b e5		 mov	 esp, ebp
  002a9	5d		 pop	 ebp
  002aa	c2 0c 00	 ret	 12			; 0000000cH
$L195318:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T195316
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Insert_n
PUBLIC	?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Insert_n
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
xdata$x	SEGMENT
$T195551 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
$T195553 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L195329
$T195554 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L195331
$T195552 DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:$T195553
	DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T195554
$T195548 DD	019930520H
	DD	04H
	DD	FLAT:$T195551
	DD	02H
	DD	FLAT:$T195552
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	ENDS
;	COMDAT ?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Tmp$ = -28						; size = 12
__$EHRec$ = -16						; size = 16
tv427 = 8						; size = 4
tv414 = 8						; size = 4
__Cat$195543 = 8					; size = 1
__Cat$195530 = 8					; size = 1
__Cat$195506 = 8					; size = 1
__Cat$195467 = 8					; size = 1
__Cat$195443 = 8					; size = 1
__Cat$195421 = 8					; size = 1
__Where$ = 8						; size = 4
tv220 = 12						; size = 4
__Count$ = 12						; size = 4
tv398 = 16						; size = 4
__Newvec$191598 = 16					; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 10	 sub	 esp, 16			; 00000010H

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  0001b	8b 45 10	 mov	 eax, DWORD PTR __Val$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b f1		 mov	 esi, ecx
  00022	8b 08		 mov	 ecx, DWORD PTR [eax]
  00024	8b 50 04	 mov	 edx, DWORD PTR [eax+4]

; 811  : 		size_type _Capacity = capacity();

  00027	8b 5e 04	 mov	 ebx, DWORD PTR [esi+4]
  0002a	85 db		 test	 ebx, ebx
  0002c	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  0002f	57		 push	 edi
  00030	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00033	89 4d e4	 mov	 DWORD PTR __Tmp$[ebp], ecx
  00036	89 55 e8	 mov	 DWORD PTR __Tmp$[ebp+4], edx
  00039	89 45 ec	 mov	 DWORD PTR __Tmp$[ebp+8], eax
  0003c	75 04		 jne	 SHORT $L195336
  0003e	33 c9		 xor	 ecx, ecx
  00040	eb 15		 jmp	 SHORT $L195337
$L195336:
  00042	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00045	2b cb		 sub	 ecx, ebx
  00047	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0004c	f7 e9		 imul	 ecx
  0004e	d1 fa		 sar	 edx, 1
  00050	8b ca		 mov	 ecx, edx
  00052	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00055	03 ca		 add	 ecx, edx
$L195337:

; 812  : 
; 813  : 		if (_Count == 0)

  00057	8b 7d 0c	 mov	 edi, DWORD PTR __Count$[ebp]
  0005a	85 ff		 test	 edi, edi
  0005c	0f 84 3c 02 00
	00		 je	 $L191618

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  00062	85 db		 test	 ebx, ebx
  00064	75 04		 jne	 SHORT $L195359
  00066	33 c0		 xor	 eax, eax
  00068	eb 15		 jmp	 SHORT $L195360
$L195359:
  0006a	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0006d	2b d3		 sub	 edx, ebx
  0006f	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00074	f7 ea		 imul	 edx
  00076	d1 fa		 sar	 edx, 1
  00078	8b c2		 mov	 eax, edx
  0007a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0007d	03 c2		 add	 eax, edx
$L195360:
  0007f	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  00084	2b d0		 sub	 edx, eax
  00086	3b d7		 cmp	 edx, edi
  00088	73 07		 jae	 SHORT $L191594

; 816  : 			_Xlen();	// result too long

  0008a	8b ce		 mov	 ecx, esi
  0008c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IBEXXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Xlen
$L191594:

; 817  : 		else if (_Capacity < size() + _Count)

  00091	85 db		 test	 ebx, ebx
  00093	75 04		 jne	 SHORT $L195366
  00095	33 c0		 xor	 eax, eax
  00097	eb 15		 jmp	 SHORT $L195367
$L195366:
  00099	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0009c	2b d3		 sub	 edx, ebx
  0009e	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000a3	f7 ea		 imul	 edx
  000a5	d1 fa		 sar	 edx, 1
  000a7	8b c2		 mov	 eax, edx
  000a9	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000ac	03 c2		 add	 eax, edx
$L195367:
  000ae	03 c7		 add	 eax, edi
  000b0	3b c8		 cmp	 ecx, eax
  000b2	0f 83 0e 01 00
	00		 jae	 $L191596

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  000b8	8b c1		 mov	 eax, ecx
  000ba	d1 e8		 shr	 eax, 1
  000bc	ba 55 55 55 15	 mov	 edx, 357913941		; 15555555H
  000c1	2b d0		 sub	 edx, eax
  000c3	3b d1		 cmp	 edx, ecx
  000c5	73 04		 jae	 SHORT $L195326
  000c7	33 c9		 xor	 ecx, ecx
  000c9	eb 02		 jmp	 SHORT $L195327
$L195326:
  000cb	03 c8		 add	 ecx, eax
$L195327:

; 821  : 			if (_Capacity < size() + _Count)

  000cd	85 db		 test	 ebx, ebx
  000cf	75 04		 jne	 SHORT $L195389
  000d1	33 c0		 xor	 eax, eax
  000d3	eb 15		 jmp	 SHORT $L195390
$L195389:
  000d5	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  000d8	2b d3		 sub	 edx, ebx
  000da	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  000df	f7 ea		 imul	 edx
  000e1	d1 fa		 sar	 edx, 1
  000e3	8b c2		 mov	 eax, edx
  000e5	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  000e8	03 c2		 add	 eax, edx
$L195390:
  000ea	03 c7		 add	 eax, edi
  000ec	3b c8		 cmp	 ecx, eax
  000ee	73 0b		 jae	 SHORT $L191597

; 822  : 				_Capacity = size() + _Count;

  000f0	8b ce		 mov	 ecx, esi
  000f2	e8 00 00 00 00	 call	 ?size@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QBEIXZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::size
  000f7	8b c8		 mov	 ecx, eax
  000f9	03 cf		 add	 ecx, edi
$L191597:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000fb	8d 1c 49	 lea	 ebx, DWORD PTR [ecx+ecx*2]
  000fe	c1 e3 02	 shl	 ebx, 2
  00101	53		 push	 ebx
  00102	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  00107	8b 55 08	 mov	 edx, DWORD PTR __Cat$195421[ebp]
  0010a	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  0010d	52		 push	 edx
  0010e	56		 push	 esi
  0010f	50		 push	 eax
  00110	89 45 10	 mov	 DWORD PTR __Newvec$191598[ebp], eax
  00113	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00116	50		 push	 eax
  00117	51		 push	 ecx
  00118	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  0011f	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  00124	8b 4d 08	 mov	 ecx, DWORD PTR __Cat$195443[ebp]
  00127	83 c4 18	 add	 esp, 24			; 00000018H
  0012a	51		 push	 ecx
  0012b	56		 push	 esi
  0012c	8d 55 e4	 lea	 edx, DWORD PTR __Tmp$[ebp]
  0012f	52		 push	 edx
  00130	57		 push	 edi
  00131	50		 push	 eax
  00132	89 45 0c	 mov	 DWORD PTR tv220[ebp], eax
  00135	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  0013a	8b 55 08	 mov	 edx, DWORD PTR __Cat$195467[ebp]
  0013d	8b 4d 0c	 mov	 ecx, DWORD PTR tv220[ebp]
  00140	83 c4 14	 add	 esp, 20			; 00000014H
  00143	52		 push	 edx
  00144	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  00147	8d 04 81	 lea	 eax, DWORD PTR [ecx+eax*4]
  0014a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0014d	56		 push	 esi
  0014e	50		 push	 eax
  0014f	8b 45 08	 mov	 eax, DWORD PTR __Where$[ebp]
  00152	51		 push	 ecx
  00153	50		 push	 eax
  00154	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  00159	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0015c	83 c4 14	 add	 esp, 20			; 00000014H
  0015f	85 c0		 test	 eax, eax
  00161	74 15		 je	 SHORT $L195478
$L195477:
  00163	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00166	2b c8		 sub	 ecx, eax
  00168	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0016d	f7 e9		 imul	 ecx
  0016f	d1 fa		 sar	 edx, 1
  00171	8b c2		 mov	 eax, edx
  00173	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00176	03 c2		 add	 eax, edx
$L195478:
  00178	03 f8		 add	 edi, eax

; 838  : 			if (_Myfirst != 0)

  0017a	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0017d	85 c0		 test	 eax, eax
  0017f	74 09		 je	 SHORT $L195481

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  00181	50		 push	 eax
  00182	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00187	83 c4 04	 add	 esp, 4
$L195481:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  0018a	8b 45 10	 mov	 eax, DWORD PTR __Newvec$191598[ebp]

; 844  : 			_Mylast = _Newvec + _Count;

  0018d	8d 0c 7f	 lea	 ecx, DWORD PTR [edi+edi*2]
  00190	03 d8		 add	 ebx, eax
  00192	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00195	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  00198	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 845  : 			_Myfirst = _Newvec;

  0019b	89 46 04	 mov	 DWORD PTR [esi+4], eax

; 873  : 			}
; 874  : 		}

  0019e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  001a1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  001a8	5f		 pop	 edi
  001a9	5e		 pop	 esi
  001aa	5b		 pop	 ebx
  001ab	8b e5		 mov	 esp, ebp
  001ad	5d		 pop	 ebp
  001ae	c2 0c 00	 ret	 12			; 0000000cH
$L195329:

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);

  001b1	8b 45 10	 mov	 eax, DWORD PTR __Newvec$191598[ebp]
  001b4	50		 push	 eax
  001b5	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  001ba	83 c4 04	 add	 esp, 4
$L195331:

; 834  : 			_RERAISE;

  001bd	6a 00		 push	 0
  001bf	6a 00		 push	 0
  001c1	e8 00 00 00 00	 call	 __CxxThrowException@8
$L191596:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  001c6	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  001c9	8b 5d 08	 mov	 ebx, DWORD PTR __Where$[ebp]
  001cc	8b d1		 mov	 edx, ecx
  001ce	2b d3		 sub	 edx, ebx
  001d0	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  001d5	f7 ea		 imul	 edx
  001d7	d1 fa		 sar	 edx, 1
  001d9	8b c2		 mov	 eax, edx
  001db	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  001de	03 c2		 add	 eax, edx
  001e0	3b c7		 cmp	 eax, edi
  001e2	89 4d 10	 mov	 DWORD PTR tv398[ebp], ecx
  001e5	73 78		 jae	 SHORT $L191609

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  001e7	8d 04 7f	 lea	 eax, DWORD PTR [edi+edi*2]
  001ea	c1 e0 02	 shl	 eax, 2
  001ed	89 45 08	 mov	 DWORD PTR tv414[ebp], eax
  001f0	8b 55 08	 mov	 edx, DWORD PTR __Cat$195506[ebp]
  001f3	52		 push	 edx
  001f4	56		 push	 esi
  001f5	03 c3		 add	 eax, ebx
  001f7	50		 push	 eax
  001f8	51		 push	 ecx
  001f9	53		 push	 ebx
  001fa	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  001ff	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00202	83 c4 14	 add	 esp, 20			; 00000014H
  00205	8d 45 e4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00208	50		 push	 eax
  00209	8b d1		 mov	 edx, ecx
  0020b	2b d3		 sub	 edx, ebx
  0020d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00212	f7 ea		 imul	 edx
  00214	d1 fa		 sar	 edx, 1
  00216	8b c2		 mov	 eax, edx
  00218	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0021b	03 c2		 add	 eax, edx
  0021d	2b f8		 sub	 edi, eax
  0021f	57		 push	 edi
  00220	51		 push	 ecx
  00221	8b ce		 mov	 ecx, esi
  00223	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 2
  0022a	e8 00 00 00 00	 call	 ?_Ufill@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEPAU__GCPLAYERPOINT@CGuildCombat@@PAU34@IABU34@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  0022f	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  00232	8b 45 08	 mov	 eax, DWORD PTR tv414[ebp]
  00235	03 f8		 add	 edi, eax
  00237	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  0023a	8d 4d e4	 lea	 ecx, DWORD PTR __Tmp$[ebp]
  0023d	8b f7		 mov	 esi, edi
  0023f	51		 push	 ecx
  00240	2b f0		 sub	 esi, eax
  00242	56		 push	 esi
  00243	53		 push	 ebx
  00244	e8 00 00 00 00	 call	 ??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z ; std::fill<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT>
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH

; 873  : 			}
; 874  : 		}

  0024c	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0024f	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00256	5f		 pop	 edi
  00257	5e		 pop	 esi
  00258	5b		 pop	 ebx
  00259	8b e5		 mov	 esp, ebp
  0025b	5d		 pop	 ebp
  0025c	c2 0c 00	 ret	 12			; 0000000cH
$L191609:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  0025f	8d 3c 7f	 lea	 edi, DWORD PTR [edi+edi*2]
  00262	8b c1		 mov	 eax, ecx
  00264	c1 e7 02	 shl	 edi, 2
  00267	2b c7		 sub	 eax, edi
  00269	89 45 08	 mov	 DWORD PTR tv427[ebp], eax
  0026c	8b 55 08	 mov	 edx, DWORD PTR __Cat$195530[ebp]
  0026f	52		 push	 edx
  00270	56		 push	 esi
  00271	51		 push	 ecx
  00272	51		 push	 ecx
  00273	50		 push	 eax
  00274	e8 00 00 00 00	 call	 ??$_Uninit_copy@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *,std::allocator<CGuildCombat::__GCPLAYERPOINT> >

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  00279	8b 4d 10	 mov	 ecx, DWORD PTR tv398[ebp]
  0027c	8b 55 08	 mov	 edx, DWORD PTR tv427[ebp]
  0027f	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00282	8b 45 08	 mov	 eax, DWORD PTR __Cat$195543[ebp]
  00285	50		 push	 eax
  00286	51		 push	 ecx
  00287	52		 push	 edx
  00288	53		 push	 ebx
  00289	e8 00 00 00 00	 call	 ??$_Copy_backward_opt@PAU__GCPLAYERPOINT@CGuildCombat@@PAU12@@std@@YAPAU__GCPLAYERPOINT@CGuildCombat@@PAU12@00U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  0028e	8d 45 e4	 lea	 eax, DWORD PTR __Tmp$[ebp]
  00291	50		 push	 eax
  00292	03 fb		 add	 edi, ebx
  00294	57		 push	 edi
  00295	53		 push	 ebx
  00296	e8 00 00 00 00	 call	 ??$fill@PAU__GCPLAYERPOINT@CGuildCombat@@U12@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@0ABU12@@Z ; std::fill<CGuildCombat::__GCPLAYERPOINT *,CGuildCombat::__GCPLAYERPOINT>
  0029b	83 c4 30	 add	 esp, 48			; 00000030H
$L191618:

; 873  : 			}
; 874  : 		}

  0029e	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  002a1	5f		 pop	 edi
  002a2	5e		 pop	 esi
  002a3	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002aa	5b		 pop	 ebx
  002ab	8b e5		 mov	 esp, ebp
  002ad	5d		 pop	 ebp
  002ae	c2 0c 00	 ret	 12			; 0000000cH
$L195550:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T195548
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Insert_n
; Function compile flags: /Ogty
;	COMDAT ??_GCGuildCombat@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCGuildCombat@@UAEPAXI@Z PROC NEAR			; CGuildCombat::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CGuildCombat@@UAE@XZ	; CGuildCombat::~CGuildCombat
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L195558
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L195558:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCGuildCombat@@UAEPAXI@Z ENDP			; CGuildCombat::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
_TEXT	ENDS
PUBLIC	??0?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
_TEXT	ENDS
PUBLIC	?insert@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv90 = 12						; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::insert, COMDAT
; _this$ = ecx

; 620  : 		{	// insert _Val at _Where

  00000	53		 push	 ebx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Where$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000c	85 f6		 test	 esi, esi
  0000e	74 1c		 je	 SHORT $L195741
  00010	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00013	2b ce		 sub	 ecx, esi
  00015	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  0001a	f7 e9		 imul	 ecx
  0001c	c1 fa 03	 sar	 edx, 3
  0001f	8b c2		 mov	 eax, edx
  00021	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00024	03 c2		 add	 eax, edx
  00026	89 44 24 14	 mov	 DWORD PTR tv90[esp+8], eax
  0002a	75 04		 jne	 SHORT $L195680
$L195741:
  0002c	33 f6		 xor	 esi, esi
  0002e	eb 15		 jmp	 SHORT $L195681
$L195680:
  00030	8b cb		 mov	 ecx, ebx
  00032	2b ce		 sub	 ecx, esi
  00034	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00039	f7 e9		 imul	 ecx
  0003b	c1 fa 03	 sar	 edx, 3
  0003e	8b f2		 mov	 esi, edx
  00040	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00043	03 f2		 add	 esi, edx
$L195681:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00045	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00049	51		 push	 ecx
  0004a	6a 01		 push	 1
  0004c	53		 push	 ebx
  0004d	8b cf		 mov	 ecx, edi
  0004f	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00054	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00057	8d 14 f6	 lea	 edx, DWORD PTR [esi+esi*8]
  0005a	5f		 pop	 edi
  0005b	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0005e	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00062	5e		 pop	 esi
  00063	89 08		 mov	 DWORD PTR [eax], ecx
  00065	5b		 pop	 ebx

; 624  : 		}

  00066	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::insert
_TEXT	ENDS
PUBLIC	?insert@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
tv90 = 12						; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::insert, COMDAT
; _this$ = ecx

; 620  : 		{	// insert _Val at _Where

  00000	53		 push	 ebx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00001	8b 5c 24 0c	 mov	 ebx, DWORD PTR __Where$[esp]
  00005	56		 push	 esi
  00006	57		 push	 edi
  00007	8b f9		 mov	 edi, ecx
  00009	8b 77 04	 mov	 esi, DWORD PTR [edi+4]
  0000c	85 f6		 test	 esi, esi
  0000e	74 1b		 je	 SHORT $L195806
  00010	8b 4f 08	 mov	 ecx, DWORD PTR [edi+8]
  00013	2b ce		 sub	 ecx, esi
  00015	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  0001a	f7 e9		 imul	 ecx
  0001c	d1 fa		 sar	 edx, 1
  0001e	8b c2		 mov	 eax, edx
  00020	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  00023	03 c2		 add	 eax, edx
  00025	89 44 24 14	 mov	 DWORD PTR tv90[esp+8], eax
  00029	75 04		 jne	 SHORT $L195745
$L195806:
  0002b	33 f6		 xor	 esi, esi
  0002d	eb 14		 jmp	 SHORT $L195746
$L195745:
  0002f	8b cb		 mov	 ecx, ebx
  00031	2b ce		 sub	 ecx, esi
  00033	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00038	f7 e9		 imul	 ecx
  0003a	d1 fa		 sar	 edx, 1
  0003c	8b f2		 mov	 esi, edx
  0003e	c1 ee 1f	 shr	 esi, 31			; 0000001fH
  00041	03 f2		 add	 esi, edx
$L195746:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00043	8b 4c 24 18	 mov	 ecx, DWORD PTR __Val$[esp+8]
  00047	51		 push	 ecx
  00048	6a 01		 push	 1
  0004a	53		 push	 ebx
  0004b	8b cf		 mov	 ecx, edi
  0004d	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@IAEXViterator@12@IABU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00052	8b 47 04	 mov	 eax, DWORD PTR [edi+4]
  00055	8d 14 76	 lea	 edx, DWORD PTR [esi+esi*2]
  00058	5f		 pop	 edi
  00059	8d 0c 90	 lea	 ecx, DWORD PTR [eax+edx*4]
  0005c	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  00060	5e		 pop	 esi
  00061	89 08		 mov	 DWORD PTR [eax], ecx
  00063	5b		 pop	 ebx

; 624  : 		}

  00064	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::insert
_TEXT	ENDS
PUBLIC	??0CGuildCombat@@QAE@XZ				; CGuildCombat::CGuildCombat
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T196025 DD	0ffffffffH
	DD	FLAT:$L195809
$T196023 DD	019930520H
	DD	01H
	DD	FLAT:$T196025
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\eveschool.cpp
xdata$x	ENDS
;	COMDAT ??0CGuildCombat@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CGuildCombat@@QAE@XZ PROC NEAR			; CGuildCombat::CGuildCombat, COMDAT
; _this$ = ecx

; 280  : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0CGuildCombat@@QAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	57		 push	 edi
  0001a	33 ff		 xor	 edi, edi
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CGuildCombat@@6B@
  00022	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00025	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00028	89 7e 20	 mov	 DWORD PTR [esi+32], edi
  0002b	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0002e	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  00031	89 7e 30	 mov	 DWORD PTR [esi+48], edi

; 281  : 	m_nState = CLOSE_STATE;

  00034	c7 46 34 01 00
	00 00		 mov	 DWORD PTR [esi+52], 1

; 282  : 	m_nGCState = WAR_CLOSE_STATE;

  0003b	c7 46 38 69 00
	00 00		 mov	 DWORD PTR [esi+56], 105	; 00000069H

; 283  : 	m_nGuildCombatIndex = 0;

  00042	89 7e 04	 mov	 DWORD PTR [esi+4], edi

; 284  : 	m_uWinGuildId = 0;

  00045	89 7e 08	 mov	 DWORD PTR [esi+8], edi

; 285  : 	m_nWinGuildCount = 0;

  00048	89 7e 0c	 mov	 DWORD PTR [esi+12], edi

; 286  : 	m_uBestPlayer = 0;

  0004b	89 7e 10	 mov	 DWORD PTR [esi+16], edi

; 287  : 	m_vecGCGetPoint.clear();

  0004e	8b 46 18	 mov	 eax, DWORD PTR [esi+24]
  00051	3b c7		 cmp	 eax, edi
  00053	74 09		 je	 SHORT $L195996
  00055	50		 push	 eax
  00056	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0005b	83 c4 04	 add	 esp, 4
$L195996:
  0005e	89 7e 18	 mov	 DWORD PTR [esi+24], edi
  00061	89 7e 1c	 mov	 DWORD PTR [esi+28], edi
  00064	89 7e 20	 mov	 DWORD PTR [esi+32], edi

; 288  : 	m_vecGCPlayerPoint.clear();

  00067	8b 46 28	 mov	 eax, DWORD PTR [esi+40]
  0006a	3b c7		 cmp	 eax, edi
  0006c	74 09		 je	 SHORT $L196016
  0006e	50		 push	 eax
  0006f	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00074	83 c4 04	 add	 esp, 4
$L196016:

; 289  : #ifdef __WORLDSERVER
; 290  : #if __VER >= 8 // __GUILDCOMBAT_85
; 291  : 	vecGCSendItem.clear();
; 292  : #endif // __VER >= 8
; 293  : #ifdef __S_BUG_GC
; 294  : 	m_vecGuildCombatMem.clear();
; 295  : #else // __S_BUG_GC
; 296  : 	m_GuildCombatMem.clear();
; 297  : #endif // __S_BUG_GC
; 298  : 	vecRequestRanking.clear();
; 299  : 	m_dwTime = 0;
; 300  : 	m_nStopWar = 0;
; 301  : 	m_nJoinPanya = 0;
; 302  : 	m_nGuildLevel = 0;
; 303  : 	m_nMaxJoinMember = 0;
; 304  : 	m_nMaxPlayerLife = 0;
; 305  : 	m_nMaxWarPlayer = 0;
; 306  : 	m_nMaxPlayerPercent = 0;
; 307  : 	m_nMaxGuildPercent = 0;
; 308  : 	m_nRequestCanclePercent = 0;
; 309  : 	m_nNotRequestPercent = 0;
; 310  : 	m_nItemPenya = 0;
; 311  : 	m_bMutex     = FALSE;
; 312  : 	m_bMutexMsg  = FALSE;
; 313  : 
; 314  : 	memset( __AutoOpen, 0, sizeof(__AUTO_OPEN) * 7 );	
; 315  : 
; 316  : 	m_nDay	= 0;
; 317  : #endif // __WORLDSERVER
; 318  : #ifdef __CLIENT
; 319  : 	m_bRequest = FALSE;
; 320  : #endif // __CLIENT
; 321  : }

  00077	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  0007b	89 7e 28	 mov	 DWORD PTR [esi+40], edi
  0007e	89 7e 2c	 mov	 DWORD PTR [esi+44], edi
  00081	89 7e 30	 mov	 DWORD PTR [esi+48], edi
  00084	5f		 pop	 edi
  00085	8b c6		 mov	 eax, esi
  00087	5e		 pop	 esi
  00088	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L195809:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 14	 add	 ecx, 20			; 00000014H
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE@XZ ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::~vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
__ehhandler$??0CGuildCombat@@QAE@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T196023
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0CGuildCombat@@QAE@XZ ENDP				; CGuildCombat::CGuildCombat
PUBLIC	?push_back@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::push_back
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?push_back@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCGETPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Cat$196066 = 8					; size = 1
$T196031 = 8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCGETPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 580  : 		if (size() < capacity())

  00004	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00007	85 ff		 test	 edi, edi
  00009	75 04		 jne	 SHORT $L196036
  0000b	33 c9		 xor	 ecx, ecx
  0000d	eb 16		 jmp	 SHORT $L196037
$L196036:
  0000f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00012	2b cf		 sub	 ecx, edi
  00014	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00019	f7 e9		 imul	 ecx
  0001b	c1 fa 03	 sar	 edx, 3
  0001e	8b ca		 mov	 ecx, edx
  00020	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00023	03 ca		 add	 ecx, edx
$L196037:
  00025	85 ff		 test	 edi, edi
  00027	74 3e		 je	 SHORT $L191076
  00029	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002c	2b d7		 sub	 edx, edi
  0002e	b8 39 8e e3 38	 mov	 eax, 954437177		; 38e38e39H
  00033	f7 ea		 imul	 edx
  00035	c1 fa 03	 sar	 edx, 3
  00038	8b c2		 mov	 eax, edx
  0003a	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003d	03 c2		 add	 eax, edx
  0003f	3b c8		 cmp	 ecx, eax
  00041	73 24		 jae	 SHORT $L191076

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00043	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$196066[esp+4]
  00047	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp+4]
  0004b	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0004e	50		 push	 eax
  0004f	56		 push	 esi
  00050	51		 push	 ecx
  00051	6a 01		 push	 1
  00053	57		 push	 edi
  00054	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCGETPOINT@CGuildCombat@@IU12@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCGETPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCGETPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCGETPOINT *,unsigned int,CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >
  00059	83 c4 14	 add	 esp, 20			; 00000014H
  0005c	83 c7 24	 add	 edi, 36			; 00000024H
  0005f	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi

; 584  : 		}

  00064	c2 04 00	 ret	 4
$L191076:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00067	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp+4]
  0006b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006e	52		 push	 edx
  0006f	50		 push	 eax
  00070	8d 44 24 14	 lea	 eax, DWORD PTR $T196031[esp+12]
  00074	50		 push	 eax
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?insert@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::insert
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi

; 584  : 		}

  0007e	c2 04 00	 ret	 4
?push_back@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCGETPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::push_back
_TEXT	ENDS
PUBLIC	?push_back@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::push_back
; Function compile flags: /Ogty
;	COMDAT ?push_back@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCPLAYERPOINT@CGuildCombat@@@Z
_TEXT	SEGMENT
__Cat$196123 = 8					; size = 1
$T196088 = 8						; size = 4
__Val$ = 8						; size = 4
?push_back@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCPLAYERPOINT@CGuildCombat@@@Z PROC NEAR ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi

; 580  : 		if (size() < capacity())

  00004	8b 7e 04	 mov	 edi, DWORD PTR [esi+4]
  00007	85 ff		 test	 edi, edi
  00009	75 04		 jne	 SHORT $L196093
  0000b	33 c9		 xor	 ecx, ecx
  0000d	eb 15		 jmp	 SHORT $L196094
$L196093:
  0000f	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00012	2b cf		 sub	 ecx, edi
  00014	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00019	f7 e9		 imul	 ecx
  0001b	d1 fa		 sar	 edx, 1
  0001d	8b ca		 mov	 ecx, edx
  0001f	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  00022	03 ca		 add	 ecx, edx
$L196094:
  00024	85 ff		 test	 edi, edi
  00026	74 3d		 je	 SHORT $L191210
  00028	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0002b	2b d7		 sub	 edx, edi
  0002d	b8 ab aa aa 2a	 mov	 eax, 715827883		; 2aaaaaabH
  00032	f7 ea		 imul	 edx
  00034	d1 fa		 sar	 edx, 1
  00036	8b c2		 mov	 eax, edx
  00038	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0003b	03 c2		 add	 eax, edx
  0003d	3b c8		 cmp	 ecx, eax
  0003f	73 24		 jae	 SHORT $L191210

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00041	8b 44 24 0c	 mov	 eax, DWORD PTR __Cat$196123[esp+4]
  00045	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Val$[esp+4]
  00049	8b 7e 08	 mov	 edi, DWORD PTR [esi+8]
  0004c	50		 push	 eax
  0004d	56		 push	 esi
  0004e	51		 push	 ecx
  0004f	6a 01		 push	 1
  00051	57		 push	 edi
  00052	e8 00 00 00 00	 call	 ??$_Uninit_fill_n@PAU__GCPLAYERPOINT@CGuildCombat@@IU12@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@YAXPAU__GCPLAYERPOINT@CGuildCombat@@IABU12@AAV?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CGuildCombat::__GCPLAYERPOINT *,unsigned int,CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >
  00057	83 c4 14	 add	 esp, 20			; 00000014H
  0005a	83 c7 0c	 add	 edi, 12			; 0000000cH
  0005d	89 7e 08	 mov	 DWORD PTR [esi+8], edi
  00060	5f		 pop	 edi
  00061	5e		 pop	 esi

; 584  : 		}

  00062	c2 04 00	 ret	 4
$L191210:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00065	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp+4]
  00069	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006c	52		 push	 edx
  0006d	50		 push	 eax
  0006e	8d 44 24 14	 lea	 eax, DWORD PTR $T196088[esp+12]
  00072	50		 push	 eax
  00073	8b ce		 mov	 ecx, esi
  00075	e8 00 00 00 00	 call	 ?insert@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAE?AViterator@12@V312@ABU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::insert
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi

; 584  : 		}

  0007c	c2 04 00	 ret	 4
?push_back@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCPLAYERPOINT@CGuildCombat@@@Z ENDP ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::push_back
_TEXT	ENDS
PUBLIC	?AddvecGCGetPoint@CGuildCombat@@QAEXKKKKHHHHH@Z	; CGuildCombat::AddvecGCGetPoint
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\eveschool.cpp
;	COMDAT ?AddvecGCGetPoint@CGuildCombat@@QAEXKKKKHHHHH@Z
_TEXT	SEGMENT
_GCGetPoint$ = -36					; size = 36
_uidGuildAttack$ = 8					; size = 4
_uidGuildDefence$ = 12					; size = 4
_uidPlayerAttack$ = 16					; size = 4
_uidPlayerDefence$ = 20					; size = 4
_nPoint$ = 24						; size = 4
_bKillDiffernceGuild$ = 28				; size = 4
_bMaster$ = 32						; size = 4
_bDefender$ = 36					; size = 4
_bLastLife$ = 40					; size = 4
?AddvecGCGetPoint@CGuildCombat@@QAEXKKKKHHHHH@Z PROC NEAR ; CGuildCombat::AddvecGCGetPoint, COMDAT
; _this$ = ecx

; 385  : {

  00000	83 ec 24	 sub	 esp, 36			; 00000024H

; 386  : 	__GCGETPOINT GCGetPoint;
; 387  : 	GCGetPoint.uidGuildAttack = uidGuildAttack;
; 388  : 	GCGetPoint.uidGuildDefence = uidGuildDefence;

  00003	8b 54 24 2c	 mov	 edx, DWORD PTR _uidGuildDefence$[esp+32]
  00007	8b 44 24 28	 mov	 eax, DWORD PTR _uidGuildAttack$[esp+32]
  0000b	89 54 24 04	 mov	 DWORD PTR _GCGetPoint$[esp+40], edx

; 389  : 	GCGetPoint.uidPlayerAttack = uidPlayerAttack;
; 390  : 	GCGetPoint.uidPlayerDefence = uidPlayerDefence;

  0000f	8b 54 24 34	 mov	 edx, DWORD PTR _uidPlayerDefence$[esp+32]
  00013	89 04 24	 mov	 DWORD PTR _GCGetPoint$[esp+36], eax
  00016	8b 44 24 30	 mov	 eax, DWORD PTR _uidPlayerAttack$[esp+32]
  0001a	89 54 24 0c	 mov	 DWORD PTR _GCGetPoint$[esp+48], edx

; 391  : 	GCGetPoint.nPoint = nPoint;
; 392  : 	GCGetPoint.bKillDiffernceGuild = bKillDiffernceGuild;

  0001e	8b 54 24 3c	 mov	 edx, DWORD PTR _bKillDiffernceGuild$[esp+32]
  00022	89 44 24 08	 mov	 DWORD PTR _GCGetPoint$[esp+44], eax
  00026	8b 44 24 38	 mov	 eax, DWORD PTR _nPoint$[esp+32]
  0002a	89 54 24 14	 mov	 DWORD PTR _GCGetPoint$[esp+56], edx

; 393  : 	GCGetPoint.bMaster = bMaster;
; 394  : 	GCGetPoint.bDefender = bDefender;

  0002e	8b 54 24 44	 mov	 edx, DWORD PTR _bDefender$[esp+32]
  00032	89 44 24 10	 mov	 DWORD PTR _GCGetPoint$[esp+52], eax
  00036	8b 44 24 40	 mov	 eax, DWORD PTR _bMaster$[esp+32]
  0003a	89 54 24 1c	 mov	 DWORD PTR _GCGetPoint$[esp+64], edx
  0003e	89 44 24 18	 mov	 DWORD PTR _GCGetPoint$[esp+60], eax

; 395  : 	GCGetPoint.bLastLife = bLastLife;

  00042	8b 44 24 48	 mov	 eax, DWORD PTR _bLastLife$[esp+32]

; 396  : 	m_vecGCGetPoint.push_back( GCGetPoint );

  00046	8d 14 24	 lea	 edx, DWORD PTR _GCGetPoint$[esp+36]
  00049	52		 push	 edx
  0004a	83 c1 14	 add	 ecx, 20			; 00000014H
  0004d	89 44 24 24	 mov	 DWORD PTR _GCGetPoint$[esp+72], eax
  00051	e8 00 00 00 00	 call	 ?push_back@?$vector@U__GCGETPOINT@CGuildCombat@@V?$allocator@U__GCGETPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCGETPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCGETPOINT,std::allocator<CGuildCombat::__GCGETPOINT> >::push_back

; 397  : #ifdef __WORLDSERVER
; 398  : 	g_UserMng.AddGCLogRealTimeWorld( GCGetPoint );
; 399  : #endif // __WORLDSERVER
; 400  : }

  00056	83 c4 24	 add	 esp, 36			; 00000024H
  00059	c2 24 00	 ret	 36			; 00000024H
?AddvecGCGetPoint@CGuildCombat@@QAEXKKKKHHHHH@Z ENDP	; CGuildCombat::AddvecGCGetPoint
_TEXT	ENDS
PUBLIC	?AddvecGCPlayerPoint@CGuildCombat@@QAEXKHH@Z	; CGuildCombat::AddvecGCPlayerPoint
; Function compile flags: /Ogty
;	COMDAT ?AddvecGCPlayerPoint@CGuildCombat@@QAEXKHH@Z
_TEXT	SEGMENT
_GCPlayerPoint$ = -12					; size = 12
_uidPlayer$ = 8						; size = 4
_nJob$ = 12						; size = 4
_nPoint$ = 16						; size = 4
?AddvecGCPlayerPoint@CGuildCombat@@QAEXKHH@Z PROC NEAR	; CGuildCombat::AddvecGCPlayerPoint, COMDAT
; _this$ = ecx

; 403  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 404  : 	__GCPLAYERPOINT GCPlayerPoint;
; 405  : 	GCPlayerPoint.uidPlayer = uidPlayer;
; 406  : 	GCPlayerPoint.nJob = nJob;

  00003	8b 54 24 14	 mov	 edx, DWORD PTR _nJob$[esp+8]
  00007	8b 44 24 10	 mov	 eax, DWORD PTR _uidPlayer$[esp+8]
  0000b	89 54 24 04	 mov	 DWORD PTR _GCPlayerPoint$[esp+16], edx
  0000f	89 04 24	 mov	 DWORD PTR _GCPlayerPoint$[esp+12], eax

; 407  : 	GCPlayerPoint.nPoint = nPoint;

  00012	8b 44 24 18	 mov	 eax, DWORD PTR _nPoint$[esp+8]

; 408  : 	m_vecGCPlayerPoint.push_back( GCPlayerPoint );

  00016	8d 14 24	 lea	 edx, DWORD PTR _GCPlayerPoint$[esp+12]
  00019	52		 push	 edx
  0001a	83 c1 24	 add	 ecx, 36			; 00000024H
  0001d	89 44 24 0c	 mov	 DWORD PTR _GCPlayerPoint$[esp+24], eax
  00021	e8 00 00 00 00	 call	 ?push_back@?$vector@U__GCPLAYERPOINT@CGuildCombat@@V?$allocator@U__GCPLAYERPOINT@CGuildCombat@@@std@@@std@@QAEXABU__GCPLAYERPOINT@CGuildCombat@@@Z ; std::vector<CGuildCombat::__GCPLAYERPOINT,std::allocator<CGuildCombat::__GCPLAYERPOINT> >::push_back

; 409  : }

  00026	83 c4 0c	 add	 esp, 12			; 0000000cH
  00029	c2 0c 00	 ret	 12			; 0000000cH
?AddvecGCPlayerPoint@CGuildCombat@@QAEXKHH@Z ENDP	; CGuildCombat::AddvecGCPlayerPoint
_TEXT	ENDS
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S3	DD	FLAT:_$E1
; Function compile flags: /Ogty
CRT$XCU	ENDS
;	COMDAT _$E1
text$yc	SEGMENT
_$E1	PROC NEAR					; COMDAT

; 3673 : CGuildCombat	g_GuildCombatMng;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_GuildCombatMng@@3VCGuildCombat@@A
  00005	e8 00 00 00 00	 call	 ??0CGuildCombat@@QAE@XZ	; CGuildCombat::CGuildCombat
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:_$E2
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
_$E1	ENDP
; Function compile flags: /Ogty
text$yc	ENDS
;	COMDAT _$E2
text$yd	SEGMENT
_$E2	PROC NEAR					; COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_GuildCombatMng@@3VCGuildCombat@@A
  00005	e9 00 00 00 00	 jmp	 ??1CGuildCombat@@UAE@XZ	; CGuildCombat::~CGuildCombat
_$E2	ENDP
text$yd	ENDS
PUBLIC	?g_GuildCombatMng@@3VCGuildCombat@@A		; g_GuildCombatMng
_BSS	SEGMENT
?g_GuildCombatMng@@3VCGuildCombat@@A DB 03cH DUP (?)	; g_GuildCombatMng
_BSS	ENDS
END
