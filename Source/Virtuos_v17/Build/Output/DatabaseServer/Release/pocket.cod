; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_Common\pocket.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CPocket@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPocket@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPocket@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CPocket@@QAEXAAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CPocket@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CPocketController@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCPocketController@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CPocketController@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CPocketController@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Avail@CPocketController@@QAEXHJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@CPocketController@@QAEXAAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@CPocketController@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetPocket@CPocketController@@QAEPAVCPocket@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$CItemContainer@VCItemElem@@@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Serialize@?$CItemContainer@VCItemElem@@@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetOffset@CAr@@QAEKXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsEmpty@CItemBase@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7?$CItemContainer@VCItemElem@@@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_G?$CItemContainer@VCItemElem@@@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAE@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@E@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsAvailable@CPocketController@@QAEHHH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetExpired@CPocket@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetExpirationDate@CPocket@@QAEXJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPocketController@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?time_null@@YAJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetExpirationDate@CPocket@@QAEJXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsExpired@CPocket@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CPocket@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??1?$CItemContainer@VCItemElem@@@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?Clear@CPocketController@@QAEXXZ		; CPocketController::Clear
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\pocket.cpp
;	COMDAT ?Clear@CPocketController@@QAEXXZ
_TEXT	SEGMENT
?Clear@CPocketController@@QAEXXZ PROC NEAR		; CPocketController::Clear, COMDAT
; _this$ = ecx

; 71   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 72   : 	for( int i = 0; i < MAX_POCKET; i++ )

  00002	8d 71 04	 lea	 esi, DWORD PTR [ecx+4]
  00005	bf 03 00 00 00	 mov	 edi, 3
  0000a	8d 9b 00 00 00
	00		 npad	 6
$L186737:

; 73   : 		SAFE_DELETE( m_apPocket[i] );

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 0c		 je	 SHORT $L186738
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
  0001c	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], 0
$L186738:
  00022	83 c6 04	 add	 esi, 4
  00025	4f		 dec	 edi
  00026	75 e8		 jne	 SHORT $L186737
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi

; 74   : }

  0002a	c3		 ret	 0
?Clear@CPocketController@@QAEXXZ ENDP			; CPocketController::Clear
_TEXT	ENDS
PUBLIC	??_7?$CItemContainer@VCItemElem@@@@6B@		; CItemContainer<CItemElem>::`vftable'
PUBLIC	??_G?$CItemContainer@VCItemElem@@@@UAEPAXI@Z	; CItemContainer<CItemElem>::`scalar deleting destructor'
PUBLIC	??0?$CItemContainer@VCItemElem@@@@QAE@XZ	; CItemContainer<CItemElem>::CItemContainer<CItemElem>
EXTRN	??_E?$CItemContainer@VCItemElem@@@@UAEPAXI@Z:NEAR ; CItemContainer<CItemElem>::`vector deleting destructor'
;	COMDAT ??_7?$CItemContainer@VCItemElem@@@@6B@
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\objects\obj.h
CONST	SEGMENT
??_7?$CItemContainer@VCItemElem@@@@6B@ DD FLAT:??_E?$CItemContainer@VCItemElem@@@@UAEPAXI@Z ; CItemContainer<CItemElem>::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0?$CItemContainer@VCItemElem@@@@QAE@XZ
_TEXT	SEGMENT
??0?$CItemContainer@VCItemElem@@@@QAE@XZ PROC NEAR	; CItemContainer<CItemElem>::CItemContainer<CItemElem>, COMDAT
; _this$ = ecx

; 312  : {

  00000	8b c1		 mov	 eax, ecx

; 313  : 	m_apItem = NULL;

  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7?$CItemContainer@VCItemElem@@@@6B@
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 314  : 	m_apIndex = NULL;

  0000d	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 315  : }

  00010	c3		 ret	 0
??0?$CItemContainer@VCItemElem@@@@QAE@XZ ENDP		; CItemContainer<CItemElem>::CItemContainer<CItemElem>
_TEXT	ENDS
PUBLIC	?time_null@@YAJXZ				; time_null
EXTRN	_time:NEAR
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\cmnhdr.h
;	COMDAT ?time_null@@YAJXZ
_TEXT	SEGMENT
?time_null@@YAJXZ PROC NEAR				; time_null, COMDAT

; 702  : #if defined(__WORLDSERVER) || defined(__CLIENT)
; 703  : 	return	g_tCurrent;
; 704  : #else	//
; 705  : 	return time( NULL );

  00000	6a 00		 push	 0
  00002	e8 00 00 00 00	 call	 _time
  00007	83 c4 04	 add	 esp, 4

; 706  : #endif	//
; 707  : }

  0000a	c3		 ret	 0
?time_null@@YAJXZ ENDP					; time_null
_TEXT	ENDS
PUBLIC	?IsStoring@CAr@@QBEHXZ				; CAr::IsStoring
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\include\ar.h
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT
?IsStoring@CAr@@QBEHXZ PROC NEAR			; CAr::IsStoring, COMDAT
; _this$ = ecx

; 96   : 	{ return (m_nMode & CAr::load) == 0; }

  00000	33 c0		 xor	 eax, eax
  00002	8a 01		 mov	 al, BYTE PTR [ecx]
  00004	f7 d0		 not	 eax
  00006	83 e0 01	 and	 eax, 1
  00009	c3		 ret	 0
?IsStoring@CAr@@QBEHXZ ENDP				; CAr::IsStoring
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@E@Z				; CAr::operator<<
EXTRN	?CheckBuf@CAr@@QAEXI@Z:NEAR			; CAr::CheckBuf
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@E@Z
_TEXT	SEGMENT
_by$ = 8						; size = 1
??6CAr@@QAEAAV0@E@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 107  : 	{ CheckBuf( sizeof(BYTE) );

  00000	56		 push	 esi
  00001	6a 01		 push	 1
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 108  : 		*(UNALIGNED BYTE*)m_lpBufCur = by; m_lpBufCur += sizeof(BYTE); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8a 4c 24 08	 mov	 cl, BYTE PTR _by$[esp]
  00011	88 08		 mov	 BYTE PTR [eax], cl
  00013	ff 46 08	 inc	 DWORD PTR [esi+8]
  00016	8b c6		 mov	 eax, esi
  00018	5e		 pop	 esi
  00019	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@E@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@J@Z				; CAr::operator<<
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??6CAr@@QAEAAV0@J@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 113  : 	{ CheckBuf( sizeof(LONG) );

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 114  : 		*(UNALIGNED LONG*)m_lpBufCur = l; m_lpBufCur += sizeof(LONG); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _l$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@J@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAE@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAE@Z
_TEXT	SEGMENT
_by$ = 8						; size = 4
??5CAr@@QAEAAV0@AAE@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 142  : 	{	CAR_SAFE_READ( BYTE, by );	}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 01	 lea	 edx, DWORD PTR [ecx+1]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0e		 ja	 SHORT $L162848
  00011	8a 09		 mov	 cl, BYTE PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _by$[esp-4]
  00017	88 0a		 mov	 BYTE PTR [edx], cl
  00019	ff 40 08	 inc	 DWORD PTR [eax+8]
  0001c	c2 04 00	 ret	 4
$L162848:
  0001f	8b 4c 24 04	 mov	 ecx, DWORD PTR _by$[esp-4]
  00023	c6 01 00	 mov	 BYTE PTR [ecx], 0
  00026	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00029	89 50 08	 mov	 DWORD PTR [eax+8], edx
  0002c	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAE@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAJ@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??5CAr@@QAEAAV0@AAJ@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 152  : 	{	CAR_SAFE_READ( LONG, l );	}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L162898
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _l$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L162898:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _l$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAJ@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	?GetOffset@CAr@@QAEKXZ				; CAr::GetOffset
; Function compile flags: /Ogty
;	COMDAT ?GetOffset@CAr@@QAEKXZ
_TEXT	SEGMENT
?GetOffset@CAr@@QAEKXZ PROC NEAR			; CAr::GetOffset, COMDAT
; _this$ = ecx

; 190  : 	ASSERT( IsStoring() );
; 191  : 	return( m_lpBufCur - m_lpBufStart );

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	2b 41 10	 sub	 eax, DWORD PTR [ecx+16]

; 192  : }

  00006	c3		 ret	 0
?GetOffset@CAr@@QAEKXZ ENDP				; CAr::GetOffset
_TEXT	ENDS
PUBLIC	?IsEmpty@CItemBase@@QAEHXZ			; CItemBase::IsEmpty
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\objects\obj.h
;	COMDAT ?IsEmpty@CItemBase@@QAEHXZ
_TEXT	SEGMENT
?IsEmpty@CItemBase@@QAEHXZ PROC NEAR			; CItemBase::IsEmpty, COMDAT
; _this$ = ecx

; 133  : 	BOOL	IsEmpty()	{	return m_dwItemId ? FALSE : TRUE;	}

  00000	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00003	33 c0		 xor	 eax, eax
  00005	85 d2		 test	 edx, edx
  00007	0f 94 c0	 sete	 al
  0000a	c3		 ret	 0
?IsEmpty@CItemBase@@QAEHXZ ENDP				; CItemBase::IsEmpty
_TEXT	ENDS
PUBLIC	?SetExpired@CPocket@@QAEXH@Z			; CPocket::SetExpired
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\pocket.h
;	COMDAT ?SetExpired@CPocket@@QAEXH@Z
_TEXT	SEGMENT
_bExpired$ = 8						; size = 4
?SetExpired@CPocket@@QAEXH@Z PROC NEAR			; CPocket::SetExpired, COMDAT
; _this$ = ecx

; 18   : 	void	SetExpired( BOOL bExpired )	{	m_bExpired	= bExpired;		}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _bExpired$[esp-4]
  00004	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00007	c2 04 00	 ret	 4
?SetExpired@CPocket@@QAEXH@Z ENDP			; CPocket::SetExpired
_TEXT	ENDS
PUBLIC	?IsExpired@CPocket@@QAEHXZ			; CPocket::IsExpired
; Function compile flags: /Ogty
;	COMDAT ?IsExpired@CPocket@@QAEHXZ
_TEXT	SEGMENT
?IsExpired@CPocket@@QAEHXZ PROC NEAR			; CPocket::IsExpired, COMDAT
; _this$ = ecx

; 19   : 	BOOL	IsExpired( void )	{	return m_bExpired;	}

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00003	c3		 ret	 0
?IsExpired@CPocket@@QAEHXZ ENDP				; CPocket::IsExpired
_TEXT	ENDS
PUBLIC	?SetExpirationDate@CPocket@@QAEXJ@Z		; CPocket::SetExpirationDate
; Function compile flags: /Ogty
;	COMDAT ?SetExpirationDate@CPocket@@QAEXJ@Z
_TEXT	SEGMENT
_tExpirationDate$ = 8					; size = 4
?SetExpirationDate@CPocket@@QAEXJ@Z PROC NEAR		; CPocket::SetExpirationDate, COMDAT
; _this$ = ecx

; 20   : 	void	SetExpirationDate( time_t tExpirationDate )	{	m_tExpirationDate	= tExpirationDate;		}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _tExpirationDate$[esp-4]
  00004	89 41 18	 mov	 DWORD PTR [ecx+24], eax
  00007	c2 04 00	 ret	 4
?SetExpirationDate@CPocket@@QAEXJ@Z ENDP		; CPocket::SetExpirationDate
_TEXT	ENDS
PUBLIC	?GetExpirationDate@CPocket@@QAEJXZ		; CPocket::GetExpirationDate
; Function compile flags: /Ogty
;	COMDAT ?GetExpirationDate@CPocket@@QAEJXZ
_TEXT	SEGMENT
?GetExpirationDate@CPocket@@QAEJXZ PROC NEAR		; CPocket::GetExpirationDate, COMDAT
; _this$ = ecx

; 21   : 	time_t	GetExpirationDate( void )	{	return m_tExpirationDate;	}

  00000	8b 41 18	 mov	 eax, DWORD PTR [ecx+24]
  00003	c3		 ret	 0
?GetExpirationDate@CPocket@@QAEJXZ ENDP			; CPocket::GetExpirationDate
_TEXT	ENDS
PUBLIC	?IsAvailable@CPocketController@@QAEHHH@Z	; CPocketController::IsAvailable
; Function compile flags: /Ogty
;	COMDAT ?IsAvailable@CPocketController@@QAEHHH@Z
_TEXT	SEGMENT
_nPocket$ = 8						; size = 4
_bExpiration$ = 12					; size = 4
?IsAvailable@CPocketController@@QAEHHH@Z PROC NEAR	; CPocketController::IsAvailable, COMDAT
; _this$ = ecx

; 70   : 		{	return( m_apPocket[nPocket] && ( !bExpiration || !m_apPocket[nPocket]->IsExpired() ) );		}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nPocket$[esp-4]
  00004	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]
  00008	85 c0		 test	 eax, eax
  0000a	74 17		 je	 SHORT $L187051
  0000c	8b 4c 24 08	 mov	 ecx, DWORD PTR _bExpiration$[esp-4]
  00010	85 c9		 test	 ecx, ecx
  00012	74 07		 je	 SHORT $L187050
  00014	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00017	85 c9		 test	 ecx, ecx
  00019	75 08		 jne	 SHORT $L187051
$L187050:
  0001b	b8 01 00 00 00	 mov	 eax, 1
  00020	c2 08 00	 ret	 8
$L187051:
  00023	33 c0		 xor	 eax, eax
  00025	c2 08 00	 ret	 8
?IsAvailable@CPocketController@@QAEHHH@Z ENDP		; CPocketController::IsAvailable
_TEXT	ENDS
PUBLIC	??1?$CItemContainer@VCItemElem@@@@UAE@XZ	; CItemContainer<CItemElem>::~CItemContainer<CItemElem>
EXTRN	??_V@YAXPAX@Z:NEAR				; operator delete[]
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\objects\obj.h
;	COMDAT ??1?$CItemContainer@VCItemElem@@@@UAE@XZ
_TEXT	SEGMENT
??1?$CItemContainer@VCItemElem@@@@UAE@XZ PROC NEAR	; CItemContainer<CItemElem>::~CItemContainer<CItemElem>, COMDAT
; _this$ = ecx

; 328  : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 329  : 	SAFE_DELETE_ARRAY( m_apItem );

  00003	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00006	85 c9		 test	 ecx, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CItemContainer@VCItemElem@@@@6B@
  0000e	74 22		 je	 SHORT $L186305
  00010	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00013	85 d2		 test	 edx, edx
  00015	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00018	74 08		 je	 SHORT $L187062
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	6a 03		 push	 3
  0001e	ff 10		 call	 DWORD PTR [eax]
  00020	eb 09		 jmp	 SHORT $L187063
$L187062:
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00028	83 c4 04	 add	 esp, 4
$L187063:
  0002b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$L186305:

; 330  : 	SAFE_DELETE_ARRAY( m_apIndex );

  00032	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00035	85 c0		 test	 eax, eax
  00037	74 10		 je	 SHORT $L186310
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003f	83 c4 04	 add	 esp, 4
  00042	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$L186310:
  00049	5e		 pop	 esi

; 331  : }

  0004a	c3		 ret	 0
??1?$CItemContainer@VCItemElem@@@@UAE@XZ ENDP		; CItemContainer<CItemElem>::~CItemContainer<CItemElem>
_TEXT	ENDS
PUBLIC	?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z ; CItemContainer<CItemElem>::SetItemContainer
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:NEAR			; `eh vector constructor iterator'
EXTRN	??_U@YAPAXI@Z:NEAR				; operator new[]
EXTRN	??0CItemElem@@QAE@XZ:NEAR			; CItemElem::CItemElem
EXTRN	??1CItemElem@@UAE@XZ:NEAR			; CItemElem::~CItemElem
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
xdata$x	SEGMENT
$T187092 DD	0ffffffffH
	DD	FLAT:$L187083
$T187087 DD	019930520H
	DD	01H
	DD	FLAT:$T187092
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_dwItemType$ = 8					; size = 4
$T187079 = 12						; size = 4
_dwItemMax$ = 12					; size = 4
_dwExtra$ = 16						; size = 4
?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z PROC NEAR ; CItemContainer<CItemElem>::SetItemContainer, COMDAT
; _this$ = ecx

; 356  : {

  00000	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z
  0000d	50		 push	 eax

; 357  : 	m_dwIndexNum	= dwItemMax;

  0000e	8b 44 24 14	 mov	 eax, DWORD PTR _dwItemMax$[esp+8]
  00012	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00019	53		 push	 ebx
  0001a	56		 push	 esi
  0001b	8b f1		 mov	 esi, ecx

; 358  : 	m_dwItemMax		= dwItemMax;
; 359  : 	if( dwExtra != 0xffffffff )

  0001d	8b 4c 24 20	 mov	 ecx, DWORD PTR _dwExtra$[esp+16]
  00021	83 f9 ff	 cmp	 ecx, -1
  00024	57		 push	 edi
  00025	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00028	89 46 10	 mov	 DWORD PTR [esi+16], eax
  0002b	74 05		 je	 SHORT $L186334

; 360  : 		m_dwItemMax		+= dwExtra;

  0002d	03 c1		 add	 eax, ecx
  0002f	89 46 10	 mov	 DWORD PTR [esi+16], eax
$L186334:

; 361  : 
; 362  : 	SAFE_DELETE_ARRAY( m_apItem );

  00032	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00035	85 c9		 test	 ecx, ecx
  00037	74 22		 je	 SHORT $L186335
  00039	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  0003c	85 d2		 test	 edx, edx
  0003e	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00041	74 08		 je	 SHORT $L187072
  00043	8b 01		 mov	 eax, DWORD PTR [ecx]
  00045	6a 03		 push	 3
  00047	ff 10		 call	 DWORD PTR [eax]
  00049	eb 09		 jmp	 SHORT $L187073
$L187072:
  0004b	50		 push	 eax
  0004c	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00051	83 c4 04	 add	 esp, 4
$L187073:
  00054	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$L186335:

; 363  : 	SAFE_DELETE_ARRAY( m_apIndex );

  0005b	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0005e	85 c0		 test	 eax, eax
  00060	74 10		 je	 SHORT $L186340
  00062	50		 push	 eax
  00063	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00068	83 c4 04	 add	 esp, 4
  0006b	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$L186340:

; 364  : 
; 365  : 	m_apItem	= new T[ m_dwItemMax ];

  00072	8b 7e 10	 mov	 edi, DWORD PTR [esi+16]
  00075	8d 0c bf	 lea	 ecx, DWORD PTR [edi+edi*4]
  00078	c1 e1 05	 shl	 ecx, 5
  0007b	83 c1 04	 add	 ecx, 4
  0007e	51		 push	 ecx
  0007f	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]
  00084	83 c4 04	 add	 esp, 4
  00087	89 44 24 20	 mov	 DWORD PTR $T187079[esp+20], eax
  0008b	85 c0		 test	 eax, eax
  0008d	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+32], 0
  00095	74 1d		 je	 SHORT $L187080
  00097	68 00 00 00 00	 push	 OFFSET FLAT:??1CItemElem@@UAE@XZ ; CItemElem::~CItemElem
  0009c	68 00 00 00 00	 push	 OFFSET FLAT:??0CItemElem@@QAE@XZ ; CItemElem::CItemElem
  000a1	57		 push	 edi
  000a2	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  000a5	68 a0 00 00 00	 push	 160			; 000000a0H
  000aa	53		 push	 ebx
  000ab	89 38		 mov	 DWORD PTR [eax], edi
  000ad	e8 00 00 00 00	 call	 ??_L@YGXPAXIHP6EX0@Z1@Z
  000b2	eb 02		 jmp	 SHORT $L187081
$L187080:
  000b4	33 db		 xor	 ebx, ebx
$L187081:

; 366  : 	m_apIndex	= new DWORD[ m_dwItemMax ];

  000b6	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  000b9	c1 e2 02	 shl	 edx, 2
  000bc	52		 push	 edx
  000bd	c7 44 24 18 ff
	ff ff ff	 mov	 DWORD PTR __$EHRec$[esp+36], -1
  000c5	89 5e 0c	 mov	 DWORD PTR [esi+12], ebx
  000c8	e8 00 00 00 00	 call	 ??_U@YAPAXI@Z		; operator new[]

; 367  : 	for( u_long i = 0; i < m_dwItemMax; i++ )

  000cd	8b 4e 10	 mov	 ecx, DWORD PTR [esi+16]
  000d0	89 46 04	 mov	 DWORD PTR [esi+4], eax
  000d3	83 c4 04	 add	 esp, 4
  000d6	33 c0		 xor	 eax, eax
  000d8	85 c9		 test	 ecx, ecx
  000da	76 37		 jbe	 SHORT $L186355

; 364  : 
; 365  : 	m_apItem	= new T[ m_dwItemMax ];

  000dc	33 c9		 xor	 ecx, ecx
  000de	8b ff		 npad	 2
$L186353:

; 368  : 	{
; 369  : 		m_apItem[i].m_dwObjId = i;

  000e0	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000e3	89 44 0a 04	 mov	 DWORD PTR [edx+ecx+4], eax

; 370  : 		if( i < m_dwIndexNum )

  000e7	3b 46 08	 cmp	 eax, DWORD PTR [esi+8]
  000ea	73 0f		 jae	 SHORT $L186356

; 371  : 		{
; 372  : 			m_apItem[i].m_dwObjIndex	= i;

  000ec	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000ef	89 44 0a 2c	 mov	 DWORD PTR [edx+ecx+44], eax

; 373  : 			m_apIndex[i]	= i;

  000f3	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000f6	89 04 82	 mov	 DWORD PTR [edx+eax*4], eax

; 374  : 		}
; 375  : 		else 

  000f9	eb 0a		 jmp	 SHORT $L186354
$L186356:

; 376  : 			m_apIndex[i]	= NULL_ID;

  000fb	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  000fe	c7 04 82 ff ff
	ff ff		 mov	 DWORD PTR [edx+eax*4], -1
$L186354:
  00105	8b 56 10	 mov	 edx, DWORD PTR [esi+16]
  00108	40		 inc	 eax
  00109	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  0010f	3b c2		 cmp	 eax, edx
  00111	72 cd		 jb	 SHORT $L186353
$L186355:

; 377  : 	}
; 378  : }

  00113	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00117	5f		 pop	 edi
  00118	5e		 pop	 esi
  00119	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00120	5b		 pop	 ebx
  00121	83 c4 0c	 add	 esp, 12			; 0000000cH
  00124	c2 0c 00	 ret	 12			; 0000000cH
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L187083:
  00000	8b 45 08	 mov	 eax, DWORD PTR $T187079[ebp-4]
  00003	50		 push	 eax
  00004	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00009	59		 pop	 ecx
  0000a	c3		 ret	 0
__ehhandler$?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T187087
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z ENDP ; CItemContainer<CItemElem>::SetItemContainer
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ??_G?$CItemContainer@VCItemElem@@@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_G?$CItemContainer@VCItemElem@@@@UAEPAXI@Z PROC NEAR	; CItemContainer<CItemElem>::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00006	85 c9		 test	 ecx, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CItemContainer@VCItemElem@@@@6B@
  0000e	74 22		 je	 SHORT $L187117
  00010	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00013	85 d2		 test	 edx, edx
  00015	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00018	74 08		 je	 SHORT $L187111
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	6a 03		 push	 3
  0001e	ff 10		 call	 DWORD PTR [eax]
  00020	eb 09		 jmp	 SHORT $L187112
$L187111:
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00028	83 c4 04	 add	 esp, 4
$L187112:
  0002b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$L187117:
  00032	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00035	85 c0		 test	 eax, eax
  00037	74 10		 je	 SHORT $L187118
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003f	83 c4 04	 add	 esp, 4
  00042	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$L187118:
  00049	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0004e	74 09		 je	 SHORT $L187119
  00050	56		 push	 esi
  00051	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00056	83 c4 04	 add	 esp, 4
$L187119:
  00059	8b c6		 mov	 eax, esi
  0005b	5e		 pop	 esi
  0005c	c2 04 00	 ret	 4
??_G?$CItemContainer@VCItemElem@@@@UAEPAXI@Z ENDP	; CItemContainer<CItemElem>::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CPocket@@QAE@XZ				; CPocket::CPocket
PUBLIC	??_7CPocket@@6B@				; CPocket::`vftable'
PUBLIC	??_GCPocket@@UAEPAXI@Z				; CPocket::`scalar deleting destructor'
EXTRN	??_ECPocket@@UAEPAXI@Z:NEAR			; CPocket::`vector deleting destructor'
;	COMDAT ??_7CPocket@@6B@
CONST	SEGMENT
??_7CPocket@@6B@ DD FLAT:??_ECPocket@@UAEPAXI@Z		; CPocket::`vftable'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\pocket.cpp
CONST	ENDS
;	COMDAT ??0CPocket@@QAE@XZ
_TEXT	SEGMENT
??0CPocket@@QAE@XZ PROC NEAR				; CPocket::CPocket, COMDAT
; _this$ = ecx

; 12   : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00007	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000a	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPocket@@6B@

; 13   : 	m_bExpired	= TRUE;

  00010	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1

; 14   : 	m_tExpirationDate	= 0;

  00017	89 48 18	 mov	 DWORD PTR [eax+24], ecx

; 15   : }

  0001a	c3		 ret	 0
??0CPocket@@QAE@XZ ENDP					; CPocket::CPocket
_TEXT	ENDS
PUBLIC	??1CPocket@@UAE@XZ				; CPocket::~CPocket
; Function compile flags: /Ogty
;	COMDAT ??1CPocket@@UAE@XZ
_TEXT	SEGMENT
??1CPocket@@UAE@XZ PROC NEAR				; CPocket::~CPocket, COMDAT
; _this$ = ecx

; 18   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 19   : }

  00003	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  00006	85 c9		 test	 ecx, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7?$CItemContainer@VCItemElem@@@@6B@
  0000e	74 22		 je	 SHORT $L187148
  00010	8b 51 fc	 mov	 edx, DWORD PTR [ecx-4]
  00013	85 d2		 test	 edx, edx
  00015	8d 41 fc	 lea	 eax, DWORD PTR [ecx-4]
  00018	74 08		 je	 SHORT $L187142
  0001a	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001c	6a 03		 push	 3
  0001e	ff 10		 call	 DWORD PTR [eax]
  00020	eb 09		 jmp	 SHORT $L187143
$L187142:
  00022	50		 push	 eax
  00023	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  00028	83 c4 04	 add	 esp, 4
$L187143:
  0002b	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
$L187148:
  00032	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00035	85 c0		 test	 eax, eax
  00037	74 10		 je	 SHORT $L187149
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 ??_V@YAXPAX@Z		; operator delete[]
  0003f	83 c4 04	 add	 esp, 4
  00042	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
$L187149:
  00049	5e		 pop	 esi
  0004a	c3		 ret	 0
??1CPocket@@UAE@XZ ENDP					; CPocket::~CPocket
_TEXT	ENDS
PUBLIC	??1CPocketController@@UAE@XZ			; CPocketController::~CPocketController
PUBLIC	??_7CPocketController@@6B@			; CPocketController::`vftable'
PUBLIC	??_GCPocketController@@UAEPAXI@Z		; CPocketController::`scalar deleting destructor'
EXTRN	??_ECPocketController@@UAEPAXI@Z:NEAR		; CPocketController::`vector deleting destructor'
;	COMDAT ??_7CPocketController@@6B@
CONST	SEGMENT
??_7CPocketController@@6B@ DD FLAT:??_ECPocketController@@UAEPAXI@Z ; CPocketController::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??1CPocketController@@UAE@XZ
_TEXT	SEGMENT
??1CPocketController@@UAE@XZ PROC NEAR			; CPocketController::~CPocketController, COMDAT
; _this$ = ecx

; 66   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CPocketController@@6B@

; 67   : 	Clear();

  00006	e9 00 00 00 00	 jmp	 ?Clear@CPocketController@@QAEXXZ ; CPocketController::Clear
??1CPocketController@@UAE@XZ ENDP			; CPocketController::~CPocketController
_TEXT	ENDS
PUBLIC	?Avail@CPocketController@@QAEXHJ@Z		; CPocketController::Avail
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
;	COMDAT ?Avail@CPocketController@@QAEXHJ@Z
_TEXT	SEGMENT
_nPocket$ = 8						; size = 4
_t$ = 12						; size = 4
?Avail@CPocketController@@QAEXHJ@Z PROC NEAR		; CPocketController::Avail, COMDAT
; _this$ = ecx

; 77   : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi
  00003	57		 push	 edi

; 78   : 	time_t tCurrent		= time_null();

  00004	33 ed		 xor	 ebp, ebp
  00006	55		 push	 ebp
  00007	8b f9		 mov	 edi, ecx
  00009	e8 00 00 00 00	 call	 _time

; 79   : 	if( m_apPocket[nPocket] )

  0000e	8b 74 24 18	 mov	 esi, DWORD PTR _nPocket$[esp+16]
  00012	8b d8		 mov	 ebx, eax
  00014	8b 44 b7 04	 mov	 eax, DWORD PTR [edi+esi*4+4]
  00018	83 c4 04	 add	 esp, 4
  0001b	3b c5		 cmp	 eax, ebp
  0001d	74 15		 je	 SHORT $L186750

; 80   : 	{
; 81   : 		if( m_apPocket[nPocket]->IsExpired() )

  0001f	39 68 14	 cmp	 DWORD PTR [eax+20], ebp

; 82   : 			m_apPocket[nPocket]->SetExpirationDate( tCurrent + t );

  00022	8b 4c 24 18	 mov	 ecx, DWORD PTR _t$[esp+12]
  00026	74 07		 je	 SHORT $L186751
  00028	03 d9		 add	 ebx, ecx
  0002a	89 58 18	 mov	 DWORD PTR [eax+24], ebx

; 83   : 		else

  0002d	eb 55		 jmp	 SHORT $L187187
$L186751:

; 84   : 			m_apPocket[nPocket]->SetExpirationDate( m_apPocket[nPocket]->GetExpirationDate() + t );

  0002f	01 48 18	 add	 DWORD PTR [eax+24], ecx

; 85   : 	}
; 86   : 	else

  00032	eb 50		 jmp	 SHORT $L187187
$L186750:

; 87   : 	{
; 88   : 		m_apPocket[nPocket]		= new CPocket;

  00034	6a 1c		 push	 28			; 0000001cH
  00036	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0003b	83 c4 04	 add	 esp, 4
  0003e	3b c5		 cmp	 eax, ebp
  00040	74 18		 je	 SHORT $L187156
  00042	89 68 0c	 mov	 DWORD PTR [eax+12], ebp
  00045	89 68 04	 mov	 DWORD PTR [eax+4], ebp
  00048	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CPocket@@6B@
  0004e	c7 40 14 01 00
	00 00		 mov	 DWORD PTR [eax+20], 1
  00055	89 68 18	 mov	 DWORD PTR [eax+24], ebp
  00058	eb 02		 jmp	 SHORT $L187157
$L187156:
  0005a	33 c0		 xor	 eax, eax
$L187157:

; 89   : 		m_apPocket[nPocket]->SetItemContainer( 0, nPocket == 0? POCKET_SLOT_SIZE_0: POCKET_SLOT_SIZE_1_2 );

  0005c	8b ce		 mov	 ecx, esi
  0005e	f7 d9		 neg	 ecx
  00060	1b c9		 sbb	 ecx, ecx
  00062	83 e1 12	 and	 ecx, 18			; 00000012H
  00065	6a ff		 push	 -1
  00067	83 c1 06	 add	 ecx, 6
  0006a	51		 push	 ecx
  0006b	55		 push	 ebp
  0006c	8b c8		 mov	 ecx, eax
  0006e	89 44 b7 04	 mov	 DWORD PTR [edi+esi*4+4], eax
  00072	e8 00 00 00 00	 call	 ?SetItemContainer@?$CItemContainer@VCItemElem@@@@QAEXKKK@Z ; CItemContainer<CItemElem>::SetItemContainer

; 90   : 		m_apPocket[nPocket]->SetExpirationDate( tCurrent + t );

  00077	8b 4c 24 18	 mov	 ecx, DWORD PTR _t$[esp+12]
  0007b	8b 54 b7 04	 mov	 edx, DWORD PTR [edi+esi*4+4]
  0007f	03 d9		 add	 ebx, ecx
  00081	89 5a 18	 mov	 DWORD PTR [edx+24], ebx
$L187187:

; 91   : 	}
; 92   : 	m_apPocket[nPocket]->SetExpired( FALSE );
; 93   : 
; 94   : 	if( t == 0 )

  00084	3b cd		 cmp	 ecx, ebp
  00086	8b 44 b7 04	 mov	 eax, DWORD PTR [edi+esi*4+4]
  0008a	89 68 14	 mov	 DWORD PTR [eax+20], ebp
  0008d	75 07		 jne	 SHORT $L187195

; 95   : 		m_apPocket[nPocket]->SetExpirationDate( 0 );

  0008f	8b 4c b7 04	 mov	 ecx, DWORD PTR [edi+esi*4+4]
  00093	89 69 18	 mov	 DWORD PTR [ecx+24], ebp
$L187195:
  00096	5f		 pop	 edi
  00097	5e		 pop	 esi
  00098	5d		 pop	 ebp
  00099	5b		 pop	 ebx

; 96   : }

  0009a	c2 08 00	 ret	 8
?Avail@CPocketController@@QAEXHJ@Z ENDP			; CPocketController::Avail
_TEXT	ENDS
PUBLIC	?GetPocket@CPocketController@@QAEPAVCPocket@@H@Z ; CPocketController::GetPocket
; Function compile flags: /Ogty
;	COMDAT ?GetPocket@CPocketController@@QAEPAVCPocket@@H@Z
_TEXT	SEGMENT
_nPocket$ = 8						; size = 4
?GetPocket@CPocketController@@QAEPAVCPocket@@H@Z PROC NEAR ; CPocketController::GetPocket, COMDAT
; _this$ = ecx

; 340  : 	if( IsAvailable( nPocket, FALSE ) )

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nPocket$[esp-4]
  00004	8b 44 81 04	 mov	 eax, DWORD PTR [ecx+eax*4+4]

; 341  : 		return m_apPocket[nPocket];
; 342  : 	return NULL;
; 343  : }

  00008	c2 04 00	 ret	 4
?GetPocket@CPocketController@@QAEPAVCPocket@@H@Z ENDP	; CPocketController::GetPocket
_TEXT	ENDS
PUBLIC	?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z ; CItemContainer<CItemElem>::Copy
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\objects\obj.h
;	COMDAT ?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z
_TEXT	SEGMENT
_rItemContainer$ = 8					; size = 4
?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z PROC NEAR ; CItemContainer<CItemElem>::Copy, COMDAT
; _this$ = ecx

; 789  : {

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 791  : 	memcpy( (void*)m_apIndex, (void*)rItemContainer.m_apIndex, sizeof(DWORD) * m_dwItemMax );

  00003	8b 4b 10	 mov	 ecx, DWORD PTR [ebx+16]
  00006	c1 e1 02	 shl	 ecx, 2
  00009	55		 push	 ebp
  0000a	8b 6c 24 0c	 mov	 ebp, DWORD PTR _rItemContainer$[esp+4]
  0000e	8b 45 08	 mov	 eax, DWORD PTR [ebp+8]
  00011	56		 push	 esi
  00012	8b d1		 mov	 edx, ecx
  00014	57		 push	 edi
  00015	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00018	89 43 08	 mov	 DWORD PTR [ebx+8], eax
  0001b	8b 75 04	 mov	 esi, DWORD PTR [ebp+4]
  0001e	c1 e9 02	 shr	 ecx, 2
  00021	f3 a5		 rep movsd
  00023	8b ca		 mov	 ecx, edx
  00025	83 e1 03	 and	 ecx, 3
  00028	f3 a4		 rep movsb

; 792  : 	for( u_long i = 0; i < m_dwItemMax; i++ )

  0002a	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  0002d	33 ff		 xor	 edi, edi
  0002f	85 c0		 test	 eax, eax
  00031	76 4f		 jbe	 SHORT $L186818

; 790  : 	m_dwIndexNum	= rItemContainer.m_dwIndexNum;

  00033	33 f6		 xor	 esi, esi
$L187223:

; 793  : 	{
; 794  : 		m_apItem[i].m_dwObjId	= rItemContainer.m_apItem[i].m_dwObjId;

  00035	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00038	8b 54 06 04	 mov	 edx, DWORD PTR [esi+eax+4]
  0003c	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0003f	89 54 31 04	 mov	 DWORD PTR [ecx+esi+4], edx

; 795  : 		m_apItem[i].m_dwObjIndex	= rItemContainer.m_apItem[i].m_dwObjIndex;

  00043	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00046	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  00049	8b 54 06 2c	 mov	 edx, DWORD PTR [esi+eax+44]
  0004d	89 54 31 2c	 mov	 DWORD PTR [ecx+esi+44], edx

; 796  : 		if( rItemContainer.m_apItem[i].IsEmpty() == FALSE )

  00051	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00054	8b 4c 06 08	 mov	 ecx, DWORD PTR [esi+eax+8]
  00058	85 c9		 test	 ecx, ecx

; 797  : 			m_apItem[i]		= rItemContainer.m_apItem[i];

  0005a	8b 4b 0c	 mov	 ecx, DWORD PTR [ebx+12]
  0005d	74 0d		 je	 SHORT $L186819
  0005f	8b 14 31	 mov	 edx, DWORD PTR [ecx+esi]
  00062	03 ce		 add	 ecx, esi
  00064	03 c6		 add	 eax, esi
  00066	50		 push	 eax
  00067	ff 52 10	 call	 DWORD PTR [edx+16]

; 798  : 		else

  0006a	eb 08		 jmp	 SHORT $L186817
$L186819:

; 799  : 			m_apItem[i].Empty();

  0006c	8b 14 31	 mov	 edx, DWORD PTR [ecx+esi]
  0006f	03 ce		 add	 ecx, esi
  00071	ff 52 04	 call	 DWORD PTR [edx+4]
$L186817:
  00074	8b 43 10	 mov	 eax, DWORD PTR [ebx+16]
  00077	47		 inc	 edi
  00078	81 c6 a0 00 00
	00		 add	 esi, 160		; 000000a0H
  0007e	3b f8		 cmp	 edi, eax
  00080	72 b3		 jb	 SHORT $L187223
$L186818:
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5d		 pop	 ebp
  00085	5b		 pop	 ebx

; 800  : 	}
; 801  : }

  00086	c2 04 00	 ret	 4
?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z ENDP	; CItemContainer<CItemElem>::Copy
_TEXT	ENDS
PUBLIC	?Serialize@?$CItemContainer@VCItemElem@@@@QAEXAAVCAr@@@Z ; CItemContainer<CItemElem>::Serialize
EXTRN	?Read@CAr@@QAEXPAXI@Z:NEAR			; CAr::Read
EXTRN	?Write@CAr@@QAEXPBXI@Z:NEAR			; CAr::Write
EXTRN	?GetBuffer@CAr@@QAEPAEPAH@Z:NEAR		; CAr::GetBuffer
; Function compile flags: /Ogty
;	COMDAT ?Serialize@?$CItemContainer@VCItemElem@@@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT
_ch$186831 = -522					; size = 1
_chSize$ = -521						; size = 1
_uOffset$186830 = -520					; size = 4
_nBufSize$186837 = -516					; size = 4
_adwObjIndex$ = -512					; size = 512
_ar$ = 8						; size = 4
?Serialize@?$CItemContainer@VCItemElem@@@@QAEXAAVCAr@@@Z PROC NEAR ; CItemContainer<CItemElem>::Serialize, COMDAT
; _this$ = ecx

; 804  : {

  00000	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	56		 push	 esi

; 805  : //	for( int i = 0; i < m_dwItemMax; i++ )	// 462
; 806  : //		m_apItem[i].Serialize( ar );
; 807  : 	DWORD	adwObjIndex[128];
; 808  : 
; 809  : 	unsigned char chSize	= 0;
; 810  : 	
; 811  : 	if( ar.IsStoring() )

  00009	8b b4 24 1c 02
	00 00		 mov	 esi, DWORD PTR _ar$[esp+532]
  00010	33 c0		 xor	 eax, eax
  00012	8a 06		 mov	 al, BYTE PTR [esi]
  00014	57		 push	 edi
  00015	8b f9		 mov	 edi, ecx
  00017	c6 44 24 13 00	 mov	 BYTE PTR _chSize$[esp+540], 0
  0001c	f7 d0		 not	 eax
  0001e	a8 01		 test	 al, 1
  00020	0f 84 c6 00 00
	00		 je	 $L186828

; 812  : 	{
; 813  : 		
; 814  : 		ar.Write( m_apIndex, sizeof(DWORD) * m_dwItemMax );

  00026	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00029	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0002c	c1 e1 02	 shl	 ecx, 2
  0002f	51		 push	 ecx
  00030	52		 push	 edx
  00031	8b ce		 mov	 ecx, esi
  00033	e8 00 00 00 00	 call	 ?Write@CAr@@QAEXPBXI@Z	; CAr::Write

; 815  : 		u_long uOffset	= ar.GetOffset();

  00038	8b 5e 08	 mov	 ebx, DWORD PTR [esi+8]
  0003b	2b 5e 10	 sub	 ebx, DWORD PTR [esi+16]

; 816  : 		ar << chSize;

  0003e	6a 01		 push	 1
  00040	8b ce		 mov	 ecx, esi
  00042	89 5c 24 18	 mov	 DWORD PTR _uOffset$186830[esp+544], ebx
  00046	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0004b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0004e	c6 00 00	 mov	 BYTE PTR [eax], 0
  00051	ff 46 08	 inc	 DWORD PTR [esi+8]

; 817  : 
; 818  : 		for( u_char ch = 0; ch < m_dwItemMax; ch++ )	// 0-504

  00054	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00057	85 c0		 test	 eax, eax
  00059	c6 44 24 12 00	 mov	 BYTE PTR _ch$186831[esp+540], 0
  0005e	76 59		 jbe	 SHORT $L186834
  00060	33 db		 xor	 ebx, ebx
$L187261:

; 819  : 		{	
; 820  : 			if( m_apItem[ch].IsEmpty() == FALSE )

  00062	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  00065	8d 2c 9b	 lea	 ebp, DWORD PTR [ebx+ebx*4]
  00068	c1 e5 05	 shl	 ebp, 5
  0006b	8b 44 29 08	 mov	 eax, DWORD PTR [ecx+ebp+8]
  0006f	85 c0		 test	 eax, eax
  00071	74 25		 je	 SHORT $L186835

; 821  : 			{
; 822  : 				ar << ch;

  00073	6a 01		 push	 1
  00075	8b ce		 mov	 ecx, esi
  00077	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0007c	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0007f	8a 44 24 12	 mov	 al, BYTE PTR _ch$186831[esp+540]
  00083	88 02		 mov	 BYTE PTR [edx], al
  00085	ff 46 08	 inc	 DWORD PTR [esi+8]

; 823  : 				m_apItem[ch].Serialize( ar );

  00088	8b 4f 0c	 mov	 ecx, DWORD PTR [edi+12]
  0008b	8b 14 29	 mov	 edx, DWORD PTR [ecx+ebp]
  0008e	03 cd		 add	 ecx, ebp
  00090	56		 push	 esi
  00091	ff 52 0c	 call	 DWORD PTR [edx+12]

; 824  : 				chSize++;

  00094	fe 44 24 13	 inc	 BYTE PTR _chSize$[esp+540]
$L186835:

; 825  : 			}
; 826  : 			adwObjIndex[ch]		= m_apItem[ch].m_dwObjIndex;

  00098	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  0009b	8b 4c 28 2c	 mov	 ecx, DWORD PTR [eax+ebp+44]
  0009f	8a 44 24 12	 mov	 al, BYTE PTR _ch$186831[esp+540]
  000a3	fe c0		 inc	 al
  000a5	89 4c 9c 1c	 mov	 DWORD PTR _adwObjIndex$[esp+ebx*4+540], ecx
  000a9	0f b6 d8	 movzx	 ebx, al
  000ac	88 44 24 12	 mov	 BYTE PTR _ch$186831[esp+540], al
  000b0	3b 5f 10	 cmp	 ebx, DWORD PTR [edi+16]
  000b3	72 ad		 jb	 SHORT $L187261

; 817  : 
; 818  : 		for( u_char ch = 0; ch < m_dwItemMax; ch++ )	// 0-504

  000b5	8b 5c 24 14	 mov	 ebx, DWORD PTR _uOffset$186830[esp+540]
$L186834:

; 827  : 		}
; 828  : 
; 829  : 		ar.Write( adwObjIndex, sizeof(DWORD) * m_dwItemMax );

  000b9	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  000bc	c1 e2 02	 shl	 edx, 2
  000bf	52		 push	 edx
  000c0	8d 44 24 20	 lea	 eax, DWORD PTR _adwObjIndex$[esp+544]
  000c4	50		 push	 eax
  000c5	8b ce		 mov	 ecx, esi
  000c7	e8 00 00 00 00	 call	 ?Write@CAr@@QAEXPBXI@Z	; CAr::Write

; 830  : 
; 831  : 		int nBufSize;
; 832  : 		LPBYTE lpBuf	= ar.GetBuffer( &nBufSize );

  000cc	8d 4c 24 18	 lea	 ecx, DWORD PTR _nBufSize$186837[esp+540]
  000d0	51		 push	 ecx
  000d1	8b ce		 mov	 ecx, esi
  000d3	e8 00 00 00 00	 call	 ?GetBuffer@CAr@@QAEPAEPAH@Z ; CAr::GetBuffer

; 833  : 		*( lpBuf + uOffset )	= chSize;

  000d8	8a 54 24 13	 mov	 dl, BYTE PTR _chSize$[esp+540]
  000dc	5f		 pop	 edi
  000dd	5e		 pop	 esi
  000de	5d		 pop	 ebp
  000df	88 14 18	 mov	 BYTE PTR [eax+ebx], dl
  000e2	5b		 pop	 ebx

; 855  : 		}
; 856  : 	}
; 857  : }

  000e3	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  000e9	c2 04 00	 ret	 4
$L186828:

; 834  : 	}
; 835  : 	else
; 836  : 	{
; 837  : 		ar.Read( m_apIndex, sizeof(DWORD) * m_dwItemMax );

  000ec	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  000ef	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  000f2	c1 e0 02	 shl	 eax, 2
  000f5	50		 push	 eax
  000f6	51		 push	 ecx
  000f7	8b ce		 mov	 ecx, esi
  000f9	e8 00 00 00 00	 call	 ?Read@CAr@@QAEXPAXI@Z	; CAr::Read

; 838  : 		// Clear
; 839  : 		for( u_int i = 0; i < m_dwItemMax; i++ )

  000fe	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  00101	33 db		 xor	 ebx, ebx
  00103	85 c0		 test	 eax, eax
  00105	76 23		 jbe	 SHORT $L186844

; 834  : 	}
; 835  : 	else
; 836  : 	{
; 837  : 		ar.Read( m_apIndex, sizeof(DWORD) * m_dwItemMax );

  00107	33 ed		 xor	 ebp, ebp
  00109	8d a4 24 00 00
	00 00		 npad	 7
$L186842:

; 840  : 			m_apItem[i].Empty();

  00110	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  00113	8b 04 2a	 mov	 eax, DWORD PTR [edx+ebp]
  00116	8d 0c 2a	 lea	 ecx, DWORD PTR [edx+ebp]
  00119	ff 50 04	 call	 DWORD PTR [eax+4]
  0011c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0011f	43		 inc	 ebx
  00120	81 c5 a0 00 00
	00		 add	 ebp, 160		; 000000a0H
  00126	3b d8		 cmp	 ebx, eax
  00128	72 e6		 jb	 SHORT $L186842
$L186844:

; 841  : 
; 842  : 		ar >> chSize;

  0012a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0012d	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00130	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00133	3b ca		 cmp	 ecx, edx
  00135	77 07		 ja	 SHORT $L187244
  00137	8a 00		 mov	 al, BYTE PTR [eax]
  00139	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0013c	eb 05		 jmp	 SHORT $L187245
$L187244:
  0013e	32 c0		 xor	 al, al
  00140	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L187245:

; 852  : 		for( i = 0; i < m_dwItemMax; i++ )

  00143	0f b6 c0	 movzx	 eax, al
  00146	85 c0		 test	 eax, eax
  00148	76 37		 jbe	 SHORT $L186848

; 843  : 
; 844  : 		unsigned char ch;
; 845  : 		for( i = 0; i < chSize; i++ )

  0014a	8b d8		 mov	 ebx, eax
  0014c	8d 64 24 00	 npad	 4
$L186846:

; 846  : 		{
; 847  : 			ar >> ch;

  00150	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00153	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00156	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00159	3b ca		 cmp	 ecx, edx
  0015b	77 07		 ja	 SHORT $L187249
  0015d	8a 00		 mov	 al, BYTE PTR [eax]
  0015f	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00162	eb 05		 jmp	 SHORT $L187250
$L187249:
  00164	32 c0		 xor	 al, al
  00166	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L187250:

; 848  : 			m_apItem[ch].Serialize( ar );

  00169	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  0016c	0f b6 c0	 movzx	 eax, al
  0016f	8d 0c 80	 lea	 ecx, DWORD PTR [eax+eax*4]
  00172	c1 e1 05	 shl	 ecx, 5
  00175	8b 04 11	 mov	 eax, DWORD PTR [ecx+edx]
  00178	03 ca		 add	 ecx, edx
  0017a	56		 push	 esi
  0017b	ff 50 0c	 call	 DWORD PTR [eax+12]
  0017e	4b		 dec	 ebx
  0017f	75 cf		 jne	 SHORT $L186846
$L186848:

; 849  : 		}
; 850  : 
; 851  : 		ar.Read( adwObjIndex, sizeof(DWORD) * m_dwItemMax );

  00181	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00184	c1 e1 02	 shl	 ecx, 2
  00187	51		 push	 ecx
  00188	8d 54 24 20	 lea	 edx, DWORD PTR _adwObjIndex$[esp+544]
  0018c	52		 push	 edx
  0018d	8b ce		 mov	 ecx, esi
  0018f	e8 00 00 00 00	 call	 ?Read@CAr@@QAEXPAXI@Z	; CAr::Read

; 852  : 		for( i = 0; i < m_dwItemMax; i++ )

  00194	8b 4f 10	 mov	 ecx, DWORD PTR [edi+16]
  00197	33 c0		 xor	 eax, eax
  00199	85 c9		 test	 ecx, ecx
  0019b	76 1c		 jbe	 SHORT $L186852

; 849  : 		}
; 850  : 
; 851  : 		ar.Read( adwObjIndex, sizeof(DWORD) * m_dwItemMax );

  0019d	33 c9		 xor	 ecx, ecx
  0019f	90		 npad	 1
$L186850:

; 853  : 		{
; 854  : 			m_apItem[i].m_dwObjIndex	= adwObjIndex[i];

  001a0	8b 57 0c	 mov	 edx, DWORD PTR [edi+12]
  001a3	8b 74 84 1c	 mov	 esi, DWORD PTR _adwObjIndex$[esp+eax*4+540]
  001a7	89 74 11 2c	 mov	 DWORD PTR [ecx+edx+44], esi
  001ab	8b 57 10	 mov	 edx, DWORD PTR [edi+16]
  001ae	40		 inc	 eax
  001af	81 c1 a0 00 00
	00		 add	 ecx, 160		; 000000a0H
  001b5	3b c2		 cmp	 eax, edx
  001b7	72 e7		 jb	 SHORT $L186850
$L186852:
  001b9	5f		 pop	 edi
  001ba	5e		 pop	 esi
  001bb	5d		 pop	 ebp
  001bc	5b		 pop	 ebx

; 855  : 		}
; 856  : 	}
; 857  : }

  001bd	81 c4 0c 02 00
	00		 add	 esp, 524		; 0000020cH
  001c3	c2 04 00	 ret	 4
?Serialize@?$CItemContainer@VCItemElem@@@@QAEXAAVCAr@@@Z ENDP ; CItemContainer<CItemElem>::Serialize
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@H@Z				; CAr::operator<<
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\include\ar.h
;	COMDAT ??6CAr@@QAEAAV0@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??6CAr@@QAEAAV0@H@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 99   : 	{ return CAr::operator<<((LONG)i); }

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _i$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@H@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAH@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??5CAr@@QAEAAV0@AAH@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 126  : 	{ return CAr::operator>>((LONG&)i); }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L187271
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _i$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L187271:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _i$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAH@Z ENDP				; CAr::operator>>
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCPocket@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPocket@@UAEPAXI@Z PROC NEAR			; CPocket::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CPocket@@UAE@XZ	; CPocket::~CPocket
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L187276
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L187276:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCPocket@@UAEPAXI@Z ENDP				; CPocket::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Copy@CPocket@@QAEXAAV1@@Z			; CPocket::Copy
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\pocket.cpp
;	COMDAT ?Copy@CPocket@@QAEXAAV1@@Z
_TEXT	SEGMENT
_rPocket$ = 8						; size = 4
?Copy@CPocket@@QAEXAAV1@@Z PROC NEAR			; CPocket::Copy, COMDAT
; _this$ = ecx

; 22   : {

  00000	56		 push	 esi
  00001	57		 push	 edi

; 23   : 	CItemContainer<CItemElem>::Copy( rPocket );

  00002	8b 7c 24 0c	 mov	 edi, DWORD PTR _rPocket$[esp+4]
  00006	57		 push	 edi
  00007	8b f1		 mov	 esi, ecx
  00009	e8 00 00 00 00	 call	 ?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z ; CItemContainer<CItemElem>::Copy

; 24   : 	m_bExpired	= rPocket.IsExpired();

  0000e	8b 47 14	 mov	 eax, DWORD PTR [edi+20]
  00011	89 46 14	 mov	 DWORD PTR [esi+20], eax

; 25   : 	m_tExpirationDate	= rPocket.GetExpirationDate();

  00014	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00017	5f		 pop	 edi
  00018	89 4e 18	 mov	 DWORD PTR [esi+24], ecx
  0001b	5e		 pop	 esi

; 26   : }

  0001c	c2 04 00	 ret	 4
?Copy@CPocket@@QAEXAAV1@@Z ENDP				; CPocket::Copy
_TEXT	ENDS
PUBLIC	?Serialize@CPocket@@QAEXAAVCAr@@@Z		; CPocket::Serialize
; Function compile flags: /Ogty
;	COMDAT ?Serialize@CPocket@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
?Serialize@CPocket@@QAEXAAVCAr@@@Z PROC NEAR		; CPocket::Serialize, COMDAT
; _this$ = ecx

; 29   : {

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 30   : 	CItemContainer<CItemElem>::Serialize( ar );

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR _ar$[esp+4]
  00006	57		 push	 edi
  00007	56		 push	 esi
  00008	8b f9		 mov	 edi, ecx
  0000a	e8 00 00 00 00	 call	 ?Serialize@?$CItemContainer@VCItemElem@@@@QAEXAAVCAr@@@Z ; CItemContainer<CItemElem>::Serialize

; 31   : 	if( ar.IsStoring() )

  0000f	33 c0		 xor	 eax, eax
  00011	8a 06		 mov	 al, BYTE PTR [esi]

; 32   : 	{
; 33   : 		ar << m_bExpired << m_tExpirationDate;

  00013	bd 04 00 00 00	 mov	 ebp, 4
  00018	f7 d0		 not	 eax
  0001a	a8 01		 test	 al, 1
  0001c	74 5d		 je	 SHORT $L186716
  0001e	53		 push	 ebx
  0001f	8b 5f 14	 mov	 ebx, DWORD PTR [edi+20]
  00022	55		 push	 ebp
  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0002a	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0002d	89 19		 mov	 DWORD PTR [ecx], ebx
  0002f	01 6e 08	 add	 DWORD PTR [esi+8], ebp
  00032	8b 5f 18	 mov	 ebx, DWORD PTR [edi+24]
  00035	55		 push	 ebp
  00036	8b ce		 mov	 ecx, esi
  00038	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0003d	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00040	89 1a		 mov	 DWORD PTR [edx], ebx
  00042	01 6e 08	 add	 DWORD PTR [esi+8], ebp

; 34   : 		if( m_tExpirationDate )

  00045	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  00048	85 c0		 test	 eax, eax
  0004a	5b		 pop	 ebx
  0004b	0f 84 8a 00 00
	00		 je	 $L187334

; 35   : 		{
; 36   : 			time_t	t	= m_tExpirationDate - time_null();

  00051	6a 00		 push	 0
  00053	e8 00 00 00 00	 call	 _time
  00058	8b 7f 18	 mov	 edi, DWORD PTR [edi+24]
  0005b	83 c4 04	 add	 esp, 4

; 37   : 			ar << t;

  0005e	55		 push	 ebp
  0005f	8b ce		 mov	 ecx, esi
  00061	2b f8		 sub	 edi, eax
  00063	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00068	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0006b	89 38		 mov	 DWORD PTR [eax], edi
  0006d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00070	03 c5		 add	 eax, ebp
$L187338:
  00072	5f		 pop	 edi
  00073	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00076	5e		 pop	 esi
  00077	5d		 pop	 ebp

; 47   : #ifdef __CLIENT
; 48   : 			m_tExpirationDate	= time_null() + t;
; 49   : #endif	// __CLIENT
; 50   : 		}
; 51   : 	}
; 52   : }

  00078	c2 04 00	 ret	 4
$L186716:

; 38   : 		}
; 39   : 	}
; 40   : 	else
; 41   : 	{
; 42   : 		ar >> m_bExpired >> m_tExpirationDate;

  0007b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0007e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00081	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  00084	3b ca		 cmp	 ecx, edx
  00086	77 0c		 ja	 SHORT $L187321
  00088	8b 10		 mov	 edx, DWORD PTR [eax]
  0008a	89 57 14	 mov	 DWORD PTR [edi+20], edx
  0008d	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00090	03 c5		 add	 eax, ebp
  00092	eb 0a		 jmp	 SHORT $L187336
$L187321:
  00094	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0009b	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$L187336:
  0009e	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  000a1	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  000a4	3b ca		 cmp	 ecx, edx
  000a6	89 46 08	 mov	 DWORD PTR [esi+8], eax
  000a9	77 0c		 ja	 SHORT $L187327
  000ab	8b 10		 mov	 edx, DWORD PTR [eax]
  000ad	89 57 18	 mov	 DWORD PTR [edi+24], edx
  000b0	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000b3	03 c5		 add	 eax, ebp
  000b5	eb 0a		 jmp	 SHORT $L187337
$L187327:
  000b7	c7 47 18 00 00
	00 00		 mov	 DWORD PTR [edi+24], 0
  000be	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
$L187337:
  000c1	89 46 08	 mov	 DWORD PTR [esi+8], eax

; 43   : 		if( m_tExpirationDate )

  000c4	8b 47 18	 mov	 eax, DWORD PTR [edi+24]
  000c7	85 c0		 test	 eax, eax
  000c9	74 10		 je	 SHORT $L187334

; 44   : 		{
; 45   : 			time_t	t;
; 46   : 			ar >> t;

  000cb	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000ce	8b 4e 0c	 mov	 ecx, DWORD PTR [esi+12]
  000d1	83 c0 04	 add	 eax, 4
  000d4	3b c1		 cmp	 eax, ecx
  000d6	76 9a		 jbe	 SHORT $L187338
  000d8	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
$L187334:
  000db	5f		 pop	 edi
  000dc	5e		 pop	 esi
  000dd	5d		 pop	 ebp

; 47   : #ifdef __CLIENT
; 48   : 			m_tExpirationDate	= time_null() + t;
; 49   : #endif	// __CLIENT
; 50   : 		}
; 51   : 	}
; 52   : }

  000de	c2 04 00	 ret	 4
?Serialize@CPocket@@QAEXAAVCAr@@@Z ENDP			; CPocket::Serialize
_TEXT	ENDS
PUBLIC	??0CPocketController@@QAE@XZ			; CPocketController::CPocketController
; Function compile flags: /Ogty
;	COMDAT ??0CPocketController@@QAE@XZ
_TEXT	SEGMENT
??0CPocketController@@QAE@XZ PROC NEAR			; CPocketController::CPocketController, COMDAT
; _this$ = ecx

; 55   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CPocketController@@6B@

; 56   : #ifdef __WORLDSERVER
; 57   : 	m_pMover	= NULL;
; 58   : #endif	// __WORLDSERVER
; 59   : 	memset( m_apPocket, 0, sizeof(m_apPocket) );

  00009	33 c0		 xor	 eax, eax
  0000b	8d 4e 04	 lea	 ecx, DWORD PTR [esi+4]
  0000e	89 01		 mov	 DWORD PTR [ecx], eax
  00010	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 60   : #ifndef __OPT_MEM_0811
; 61   : 	Avail( 0 );

  00013	50		 push	 eax
  00014	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00017	50		 push	 eax
  00018	8b ce		 mov	 ecx, esi
  0001a	e8 00 00 00 00	 call	 ?Avail@CPocketController@@QAEXHJ@Z ; CPocketController::Avail

; 62   : #endif	// __OPT_MEM_0811
; 63   : }

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c3		 ret	 0
??0CPocketController@@QAE@XZ ENDP			; CPocketController::CPocketController
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCPocketController@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCPocketController@@UAEPAXI@Z PROC NEAR		; CPocketController::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CPocketController@@6B@
  00009	e8 00 00 00 00	 call	 ?Clear@CPocketController@@QAEXXZ ; CPocketController::Clear
  0000e	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00013	74 09		 je	 SHORT $L187346
  00015	56		 push	 esi
  00016	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0001b	83 c4 04	 add	 esp, 4
$L187346:
  0001e	8b c6		 mov	 eax, esi
  00020	5e		 pop	 esi
  00021	c2 04 00	 ret	 4
??_GCPocketController@@UAEPAXI@Z ENDP			; CPocketController::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?Copy@CPocketController@@QAEXAAV1@@Z		; CPocketController::Copy
; Function compile flags: /Ogty
;	COMDAT ?Copy@CPocketController@@QAEXAAV1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
tv250 = 8						; size = 4
_rPocketController$ = 8					; size = 4
?Copy@CPocketController@@QAEXAAV1@@Z PROC NEAR		; CPocketController::Copy, COMDAT
; _this$ = ecx

; 296  : {

  00000	51		 push	 ecx
  00001	53		 push	 ebx
  00002	55		 push	 ebp
  00003	56		 push	 esi
  00004	8b f1		 mov	 esi, ecx
  00006	57		 push	 edi
  00007	89 74 24 10	 mov	 DWORD PTR _this$[esp+20], esi

; 297  : 	Clear();

  0000b	e8 00 00 00 00	 call	 ?Clear@CPocketController@@QAEXXZ ; CPocketController::Clear
  00010	8b 44 24 18	 mov	 eax, DWORD PTR _rPocketController$[esp+16]

; 298  : 	for( int i = 0; i < MAX_POCKET; i++ )

  00014	8b fe		 mov	 edi, esi
  00016	33 ed		 xor	 ebp, ebp
  00018	2b f8		 sub	 edi, eax
  0001a	8d 58 04	 lea	 ebx, DWORD PTR [eax+4]
  0001d	89 7c 24 18	 mov	 DWORD PTR tv250[esp+16], edi
$L187384:

; 299  : 	{
; 300  : 		if( rPocketController.IsAvailable( i, FALSE ) )

  00021	83 3b 00	 cmp	 DWORD PTR [ebx], 0
  00024	74 2b		 je	 SHORT $L186765

; 301  : 		{
; 302  : 			Avail( i );

  00026	6a 00		 push	 0
  00028	55		 push	 ebp
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?Avail@CPocketController@@QAEXHJ@Z ; CPocketController::Avail

; 303  : 			m_apPocket[i]->Copy( *rPocketController.m_apPocket[i] );

  00030	8b 33		 mov	 esi, DWORD PTR [ebx]
  00032	8b 3c 1f	 mov	 edi, DWORD PTR [edi+ebx]
  00035	56		 push	 esi
  00036	8b cf		 mov	 ecx, edi
  00038	e8 00 00 00 00	 call	 ?Copy@?$CItemContainer@VCItemElem@@@@QAEXAAV1@@Z ; CItemContainer<CItemElem>::Copy
  0003d	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00040	89 47 14	 mov	 DWORD PTR [edi+20], eax
  00043	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00046	8b 74 24 10	 mov	 esi, DWORD PTR _this$[esp+20]
  0004a	89 4f 18	 mov	 DWORD PTR [edi+24], ecx
  0004d	8b 7c 24 18	 mov	 edi, DWORD PTR tv250[esp+16]
$L186765:
  00051	45		 inc	 ebp
  00052	83 c3 04	 add	 ebx, 4
  00055	83 fd 03	 cmp	 ebp, 3
  00058	7c c7		 jl	 SHORT $L187384
  0005a	5f		 pop	 edi
  0005b	5e		 pop	 esi
  0005c	5d		 pop	 ebp
  0005d	5b		 pop	 ebx

; 304  : 		}
; 305  : 	}
; 306  : }

  0005e	59		 pop	 ecx
  0005f	c2 04 00	 ret	 4
?Copy@CPocketController@@QAEXAAV1@@Z ENDP		; CPocketController::Copy
_TEXT	ENDS
PUBLIC	?Serialize@CPocketController@@QAEXAAVCAr@@@Z	; CPocketController::Serialize
; Function compile flags: /Ogty
;	COMDAT ?Serialize@CPocketController@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT
_ar$ = 8						; size = 4
?Serialize@CPocketController@@QAEXAAVCAr@@@Z PROC NEAR	; CPocketController::Serialize, COMDAT
; _this$ = ecx

; 309  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 310  : 	if( ar.IsStoring() )

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _ar$[esp+8]
  00007	33 c0		 xor	 eax, eax
  00009	8a 06		 mov	 al, BYTE PTR [esi]
  0000b	57		 push	 edi
  0000c	8b e9		 mov	 ebp, ecx
  0000e	f7 d0		 not	 eax
  00010	a8 01		 test	 al, 1
  00012	74 48		 je	 SHORT $L186772

; 311  : 	{
; 312  : 		for( int i = 0; i < MAX_POCKET; i++ )

  00014	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00017	bb 03 00 00 00	 mov	 ebx, 3
  0001c	8d 64 24 00	 npad	 4
$L186774:

; 313  : 		{
; 314  : 			if( IsAvailable( i, FALSE ) )

  00020	83 3f 00	 cmp	 DWORD PTR [edi], 0

; 315  : 			{
; 316  : 				ar << (BYTE)1;

  00023	8b ce		 mov	 ecx, esi
  00025	6a 01		 push	 1
  00027	74 18		 je	 SHORT $L186777
  00029	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0002e	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00031	c6 01 01	 mov	 BYTE PTR [ecx], 1
  00034	ff 46 08	 inc	 DWORD PTR [esi+8]

; 317  : 				m_apPocket[i]->Serialize( ar );

  00037	8b 0f		 mov	 ecx, DWORD PTR [edi]
  00039	56		 push	 esi
  0003a	e8 00 00 00 00	 call	 ?Serialize@CPocket@@QAEXAAVCAr@@@Z ; CPocket::Serialize

; 318  : 			}
; 319  : 			else

  0003f	eb 0e		 jmp	 SHORT $L186775
$L186777:

; 320  : 				ar << (BYTE)0;

  00041	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00046	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  00049	c6 02 00	 mov	 BYTE PTR [edx], 0
  0004c	ff 46 08	 inc	 DWORD PTR [esi+8]
$L186775:
  0004f	83 c7 04	 add	 edi, 4
  00052	4b		 dec	 ebx
  00053	75 cb		 jne	 SHORT $L186774
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5d		 pop	 ebp
  00058	5b		 pop	 ebx

; 334  : 		}
; 335  : 	}
; 336  : }

  00059	c2 04 00	 ret	 4
$L186772:

; 321  : 		}
; 322  : 	}
; 323  : 	else
; 324  : 	{
; 325  : 		Clear();

  0005c	8b cd		 mov	 ecx, ebp
  0005e	e8 00 00 00 00	 call	 ?Clear@CPocketController@@QAEXXZ ; CPocketController::Clear

; 326  : 		for( int i = 0; i < MAX_POCKET; i++ )

  00063	33 ff		 xor	 edi, edi
  00065	8d 5d 04	 lea	 ebx, DWORD PTR [ebp+4]
  00068	eb 06 8d 9b 00
	00 00 00	 npad	 8
$L186783:

; 327  : 		{
; 328  : 			BYTE bExists;
; 329  : 			ar >> bExists;

  00070	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00073	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  00076	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  00079	3b ca		 cmp	 ecx, edx
  0007b	77 2b		 ja	 SHORT $L187414
  0007d	8a 00		 mov	 al, BYTE PTR [eax]

; 330  : 			if( !bExists )

  0007f	84 c0		 test	 al, al
  00081	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00084	74 12		 je	 SHORT $L186784

; 331  : 				continue;
; 332  : 			Avail( i );

  00086	6a 00		 push	 0
  00088	57		 push	 edi
  00089	8b cd		 mov	 ecx, ebp
  0008b	e8 00 00 00 00	 call	 ?Avail@CPocketController@@QAEXHJ@Z ; CPocketController::Avail

; 333  : 			m_apPocket[i]->Serialize( ar );

  00090	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  00092	56		 push	 esi
  00093	e8 00 00 00 00	 call	 ?Serialize@CPocket@@QAEXAAVCAr@@@Z ; CPocket::Serialize
$L186784:
  00098	47		 inc	 edi
  00099	83 c3 04	 add	 ebx, 4
  0009c	83 ff 03	 cmp	 edi, 3
  0009f	7c cf		 jl	 SHORT $L186783
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5d		 pop	 ebp
  000a4	5b		 pop	 ebx

; 334  : 		}
; 335  : 	}
; 336  : }

  000a5	c2 04 00	 ret	 4
$L187414:

; 327  : 		{
; 328  : 			BYTE bExists;
; 329  : 			ar >> bExists;

  000a8	89 56 08	 mov	 DWORD PTR [esi+8], edx

; 330  : 			if( !bExists )

  000ab	eb eb		 jmp	 SHORT $L186784
?Serialize@CPocketController@@QAEXAAVCAr@@@Z ENDP	; CPocketController::Serialize
_TEXT	ENDS
END
