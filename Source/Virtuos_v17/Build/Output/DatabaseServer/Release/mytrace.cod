; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_Network\Misc\Src\mytrace.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
;	COMDAT ??_C@_06DJIHEMFI@status?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_C@_0KB@FMFNHDFD@________________________________@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
CRT$XCA	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCA	ENDS
CRT$XCU	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCU	ENDS
CRT$XCL	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCL	ENDS
CRT$XCC	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCC	ENDS
CRT$XCZ	SEGMENT DWORD USE32 PUBLIC 'DATA'
CRT$XCZ	ENDS
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??0CMyTrace@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCMyTrace@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CMyTrace@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?FindKey@CMyTrace@@AAEHK@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Add@CMyTrace@@QAAXKHPBDZZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddLine@CMyTrace@@QAEXD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Key@CMyTrace@@SAKPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Paint@CMyTrace@@QAEXPAUHDC__@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?TextOutA@CMyTrace@@AAEXPAUHDC__@@HHPBDH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetText@CMyTrace@@QAEXKPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT _$E2
text$yc	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yc	ENDS
;	COMDAT _$E3
text$yd	SEGMENT PARA USE32 PUBLIC 'CODE'
text$yd	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?nYStatusBar@?1??Paint@CMyTrace@@QAEXPAUHDC__@@@Z@4HA
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?Leave@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Enter@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?uKeyStatusBar@?1??Add@CMyTrace@@QAAXKHPBDZZ@4KA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ?$S1@?1??Add@CMyTrace@@QAAXKHPBDZZ@4IA
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
;	COMDAT ??1CMclCritSec@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMclCritSec@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_GCMclCritSec@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CMclCritSec@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CMyTrace@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?FindKey@CMyTrace@@AAEHK@Z			; CMyTrace::FindKey
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\src\mytrace.cpp
;	COMDAT ?FindKey@CMyTrace@@AAEHK@Z
_TEXT	SEGMENT
_uKey$ = 8						; size = 4
?FindKey@CMyTrace@@AAEHK@Z PROC NEAR			; CMyTrace::FindKey, COMDAT
; _this$ = ecx

; 19   : 	if( m_uHead <= m_uTail ) {

  00000	66 8b 81 16 11
	00 00		 mov	 ax, WORD PTR [ecx+4374]
  00007	56		 push	 esi
  00008	66 8b b1 18 11
	00 00		 mov	 si, WORD PTR [ecx+4376]
  0000f	66 3b c6	 cmp	 ax, si
  00012	57		 push	 edi

; 20   : 		for( int i =m_uHead; i < m_uTail; i++ ) {

  00013	0f b7 c0	 movzx	 eax, ax
  00016	77 2f		 ja	 SHORT $L186781

; 33   : 				return i;
; 34   : 		}
; 35   : 	}
; 36   : 	return -1;

  00018	0f b7 d6	 movzx	 edx, si
  0001b	3b c2		 cmp	 eax, edx
  0001d	7d 70		 jge	 SHORT $L186795
  0001f	8b f0		 mov	 esi, eax
  00021	69 f6 a8 00 00
	00		 imul	 esi, 168		; 000000a8H
  00027	8d 4c 0e 04	 lea	 ecx, DWORD PTR [esi+ecx+4]
  0002b	8b 74 24 0c	 mov	 esi, DWORD PTR _uKey$[esp+4]
  0002f	90		 npad	 1
$L186783:
  00030	39 31		 cmp	 DWORD PTR [ecx], esi
  00032	74 5e		 je	 SHORT $L186780
  00034	40		 inc	 eax
  00035	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0003b	3b c2		 cmp	 eax, edx
  0003d	7c f1		 jl	 SHORT $L186783
  0003f	5f		 pop	 edi
  00040	5e		 pop	 esi
  00041	83 c8 ff	 or	 eax, -1

; 37   : }

  00044	c2 04 00	 ret	 4
$L186781:

; 21   : 			if( m_mts[i].uKey == uKey )
; 22   : 				return i;
; 23   : 		}
; 24   : 	}
; 25   : 	else
; 26   : 	{
; 27   : 		for( int i = m_uHead; i < MAX_LOG; i++ ) {

  00047	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0004a	8b 7c 24 0c	 mov	 edi, DWORD PTR _uKey$[esp+4]
  0004e	7d 20		 jge	 SHORT $L186791
  00050	8b d0		 mov	 edx, eax
  00052	69 d2 a8 00 00
	00		 imul	 edx, 168		; 000000a8H
  00058	8d 54 0a 04	 lea	 edx, DWORD PTR [edx+ecx+4]
  0005c	8d 64 24 00	 npad	 4
$L186789:

; 28   : 			if( m_mts[i].uKey == uKey )

  00060	39 3a		 cmp	 DWORD PTR [edx], edi
  00062	74 2e		 je	 SHORT $L186780
  00064	40		 inc	 eax
  00065	81 c2 a8 00 00
	00		 add	 edx, 168		; 000000a8H
  0006b	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  0006e	7c f0		 jl	 SHORT $L186789
$L186791:

; 33   : 				return i;
; 34   : 		}
; 35   : 	}
; 36   : 	return -1;

  00070	0f b7 d6	 movzx	 edx, si
  00073	33 c0		 xor	 eax, eax
  00075	85 d2		 test	 edx, edx
  00077	7e 16		 jle	 SHORT $L186795

; 29   : 				return i;
; 30   : 		}
; 31   : 		for( i = 0; i < m_uTail; i++ ) {

  00079	83 c1 04	 add	 ecx, 4
  0007c	8d 64 24 00	 npad	 4
$L186793:

; 32   : 			if( m_mts[i].uKey == uKey )

  00080	39 39		 cmp	 DWORD PTR [ecx], edi
  00082	74 0e		 je	 SHORT $L186780
  00084	40		 inc	 eax
  00085	81 c1 a8 00 00
	00		 add	 ecx, 168		; 000000a8H
  0008b	3b c2		 cmp	 eax, edx
  0008d	7c f1		 jl	 SHORT $L186793
$L186795:

; 33   : 				return i;
; 34   : 		}
; 35   : 	}
; 36   : 	return -1;

  0008f	83 c8 ff	 or	 eax, -1
$L186780:
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi

; 37   : }

  00094	c2 04 00	 ret	 4
?FindKey@CMyTrace@@AAEHK@Z ENDP				; CMyTrace::FindKey
_TEXT	ENDS
PUBLIC	?Key@CMyTrace@@SAKPBD@Z				; CMyTrace::Key
EXTRN	_strlwr:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Key@CMyTrace@@SAKPBD@Z
_TEXT	SEGMENT
_szLwr$ = -260						; size = 256
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_szKey$ = 8						; size = 4
?Key@CMyTrace@@SAKPBD@Z PROC NEAR			; CMyTrace::Key, COMDAT

; 95   : {

  00000	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0000b	33 c4		 xor	 eax, esp
  0000d	89 84 24 00 01
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+260], eax

; 96   : 	char szLwr[256];
; 97   : 	strcpy( szLwr, szKey );

  00014	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR _szKey$[esp+256]
  0001b	8d 14 24	 lea	 edx, DWORD PTR _szLwr$[esp+260]
  0001e	2b d0		 sub	 edx, eax
$L187083:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00025	40		 inc	 eax
  00026	84 c9		 test	 cl, cl
  00028	75 f6		 jne	 SHORT $L187083

; 98   : 	strlwr( szLwr );

  0002a	8d 04 24	 lea	 eax, DWORD PTR _szLwr$[esp+260]
  0002d	56		 push	 esi
  0002e	50		 push	 eax
  0002f	e8 00 00 00 00	 call	 _strlwr

; 99   : 
; 100  : 	u_long uKey		= 0, num;
; 101  : 
; 102  : 	for( int i	= strlen( szLwr ), j = 0; i > 0 && j < 4; j++, i-- )

  00034	8d 4c 24 08	 lea	 ecx, DWORD PTR _szLwr$[esp+268]
  00038	83 c4 04	 add	 esp, 4
  0003b	33 c0		 xor	 eax, eax
  0003d	8d 71 01	 lea	 esi, DWORD PTR [ecx+1]
$L187087:
  00040	8a 11		 mov	 dl, BYTE PTR [ecx]
  00042	41		 inc	 ecx
  00043	84 d2		 test	 dl, dl
  00045	75 f9		 jne	 SHORT $L187087
  00047	2b ce		 sub	 ecx, esi
  00049	33 d2		 xor	 edx, edx
  0004b	85 c9		 test	 ecx, ecx
  0004d	7e 16		 jle	 SHORT $L186842
  0004f	90		 npad	 1
$L186840:
  00050	83 fa 04	 cmp	 edx, 4
  00053	7d 10		 jge	 SHORT $L186842

; 103  : 	{
; 104  : 		uKey	= uKey << 8;
; 105  : 		num		= szLwr[i-1];
; 106  : 		uKey |= num;

  00055	0f be 74 0c 03	 movsx	 esi, BYTE PTR _szLwr$[esp+ecx+263]
  0005a	c1 e0 08	 shl	 eax, 8
  0005d	0b c6		 or	 eax, esi
  0005f	42		 inc	 edx
  00060	49		 dec	 ecx
  00061	85 c9		 test	 ecx, ecx
  00063	7f eb		 jg	 SHORT $L186840
$L186842:

; 107  : 	}
; 108  : 	return uKey;
; 109  : }

  00065	8b 8c 24 04 01
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+264]
  0006c	5e		 pop	 esi
  0006d	33 cc		 xor	 ecx, esp
  0006f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00074	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  0007a	c3		 ret	 0
?Key@CMyTrace@@SAKPBD@Z ENDP				; CMyTrace::Key
_TEXT	ENDS
PUBLIC	?TextOutA@CMyTrace@@AAEXPAUHDC__@@HHPBDH@Z	; CMyTrace::TextOutA
EXTRN	__imp__TextOutA@20:NEAR
EXTRN	__imp__SetBkMode@8:NEAR
EXTRN	__imp__SetTextColor@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?TextOutA@CMyTrace@@AAEXPAUHDC__@@HHPBDH@Z
_TEXT	SEGMENT
_hDC$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_lpString$ = 20						; size = 4
_fInverse$ = 24						; size = 4
?TextOutA@CMyTrace@@AAEXPAUHDC__@@HHPBDH@Z PROC NEAR	; CMyTrace::TextOutA, COMDAT
; _this$ = ecx

; 149  : {

  00000	53		 push	 ebx

; 150  : 	SetBkMode( hDC, fInverse? OPAQUE : TRANSPARENT );

  00001	8b 5c 24 18	 mov	 ebx, DWORD PTR _fInverse$[esp]
  00005	33 c0		 xor	 eax, eax
  00007	85 db		 test	 ebx, ebx
  00009	0f 95 c0	 setne	 al
  0000c	56		 push	 esi
  0000d	8b 74 24 0c	 mov	 esi, DWORD PTR _hDC$[esp+4]
  00011	57		 push	 edi
  00012	8b f9		 mov	 edi, ecx
  00014	40		 inc	 eax
  00015	50		 push	 eax
  00016	56		 push	 esi
  00017	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8

; 151  : 	SetTextColor( hDC, fInverse? m_crBk : m_cr );

  0001d	85 db		 test	 ebx, ebx
  0001f	74 08		 je	 SHORT $L187095
  00021	8b 87 28 11 00
	00		 mov	 eax, DWORD PTR [edi+4392]
  00027	eb 06		 jmp	 SHORT $L187096
$L187095:
  00029	8b 87 24 11 00
	00		 mov	 eax, DWORD PTR [edi+4388]
$L187096:
  0002f	50		 push	 eax
  00030	56		 push	 esi
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8

; 152  : 
; 153  : 	int cbString	= strlen( lpString );

  00037	8b 54 24 1c	 mov	 edx, DWORD PTR _lpString$[esp+8]
  0003b	8b c2		 mov	 eax, edx
  0003d	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$L187097:
  00040	8a 08		 mov	 cl, BYTE PTR [eax]
  00042	40		 inc	 eax
  00043	84 c9		 test	 cl, cl
  00045	75 f9		 jne	 SHORT $L187097

; 154  : 	::TextOut( hDC, x, y, lpString, cbString );

  00047	8b 4c 24 18	 mov	 ecx, DWORD PTR _y$[esp+8]
  0004b	2b c7		 sub	 eax, edi
  0004d	50		 push	 eax
  0004e	52		 push	 edx
  0004f	8b 54 24 1c	 mov	 edx, DWORD PTR _x$[esp+16]
  00053	51		 push	 ecx
  00054	52		 push	 edx
  00055	56		 push	 esi
  00056	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  0005c	5f		 pop	 edi
  0005d	5e		 pop	 esi
  0005e	5b		 pop	 ebx

; 155  : }

  0005f	c2 14 00	 ret	 20			; 00000014H
?TextOutA@CMyTrace@@AAEXPAUHDC__@@HHPBDH@Z ENDP		; CMyTrace::TextOutA
_TEXT	ENDS
PUBLIC	?GetText@CMyTrace@@QAEXKPAD@Z			; CMyTrace::GetText
; Function compile flags: /Ogty
;	COMDAT ?GetText@CMyTrace@@QAEXKPAD@Z
_TEXT	SEGMENT
_uKey$ = 8						; size = 4
_lpszText$ = 12						; size = 4
?GetText@CMyTrace@@QAEXKPAD@Z PROC NEAR			; CMyTrace::GetText, COMDAT
; _this$ = ecx

; 159  : 	int nIndex	= FindKey( uKey );

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _uKey$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ?FindKey@CMyTrace@@AAEHK@Z ; CMyTrace::FindKey

; 160  : 	if( nIndex < 0 ) {

  0000d	85 c0		 test	 eax, eax
  0000f	7c 1a		 jl	 SHORT $L186883

; 161  : 
; 162  : 	}
; 163  : 	else {
; 164  : 		strcpy( lpszText, m_mts[nIndex].szText );

  00011	8b 54 24 0c	 mov	 edx, DWORD PTR _lpszText$[esp]
  00015	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H
  0001b	8d 44 30 0c	 lea	 eax, DWORD PTR [eax+esi+12]
  0001f	2b d0		 sub	 edx, eax
$L187100:
  00021	8a 08		 mov	 cl, BYTE PTR [eax]
  00023	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  00026	40		 inc	 eax
  00027	84 c9		 test	 cl, cl
  00029	75 f6		 jne	 SHORT $L187100
$L186883:
  0002b	5e		 pop	 esi

; 165  : 	}
; 166  : }

  0002c	c2 08 00	 ret	 8
?GetText@CMyTrace@@QAEXKPAD@Z ENDP			; CMyTrace::GetText
_TEXT	ENDS
PUBLIC	??0CMclCritSec@@QAE@XZ				; CMclCritSec::CMclCritSec
PUBLIC	??_7CMclCritSec@@6B@				; CMclCritSec::`vftable'
PUBLIC	??_GCMclCritSec@@UAEPAXI@Z			; CMclCritSec::`scalar deleting destructor'
EXTRN	??_ECMclCritSec@@UAEPAXI@Z:NEAR			; CMclCritSec::`vector deleting destructor'
EXTRN	__imp__InitializeCriticalSection@4:NEAR
;	COMDAT ??_7CMclCritSec@@6B@
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\mcl\include\cmclcritsec.h
CONST	SEGMENT
??_7CMclCritSec@@6B@ DD FLAT:??_ECMclCritSec@@UAEPAXI@Z	; CMclCritSec::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CMclCritSec@@QAE@XZ
_TEXT	SEGMENT
??0CMclCritSec@@QAE@XZ PROC NEAR			; CMclCritSec::CMclCritSec, COMDAT
; _this$ = ecx

; 19   :     CMclCritSec(void)

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 20   :     {
; 21   : 		::InitializeCriticalSection( &m_CritSec );

  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMclCritSec@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 22   : 	}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c3		 ret	 0
??0CMclCritSec@@QAE@XZ ENDP				; CMclCritSec::CMclCritSec
_TEXT	ENDS
PUBLIC	??1CMclCritSec@@UAE@XZ				; CMclCritSec::~CMclCritSec
EXTRN	__imp__DeleteCriticalSection@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ??1CMclCritSec@@UAE@XZ
_TEXT	SEGMENT
??1CMclCritSec@@UAE@XZ PROC NEAR			; CMclCritSec::~CMclCritSec, COMDAT
; _this$ = ecx

; 26   : 	{

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CMclCritSec@@6B@

; 27   : 		::DeleteCriticalSection( &m_CritSec );

  00006	83 c1 04	 add	 ecx, 4
  00009	51		 push	 ecx
  0000a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4

; 28   : 	}

  00010	c3		 ret	 0
??1CMclCritSec@@UAE@XZ ENDP				; CMclCritSec::~CMclCritSec
_TEXT	ENDS
PUBLIC	?Enter@CMclCritSec@@QAEXXZ			; CMclCritSec::Enter
EXTRN	__imp__EnterCriticalSection@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Enter@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT
?Enter@CMclCritSec@@QAEXXZ PROC NEAR			; CMclCritSec::Enter, COMDAT
; _this$ = ecx

; 33   : 		::EnterCriticalSection( &m_CritSec );

  00000	83 c1 04	 add	 ecx, 4
  00003	51		 push	 ecx
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 34   : 	}

  0000a	c3		 ret	 0
?Enter@CMclCritSec@@QAEXXZ ENDP				; CMclCritSec::Enter
_TEXT	ENDS
PUBLIC	?Leave@CMclCritSec@@QAEXXZ			; CMclCritSec::Leave
EXTRN	__imp__LeaveCriticalSection@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Leave@CMclCritSec@@QAEXXZ
_TEXT	SEGMENT
?Leave@CMclCritSec@@QAEXXZ PROC NEAR			; CMclCritSec::Leave, COMDAT
; _this$ = ecx

; 39   : 		::LeaveCriticalSection( &m_CritSec );

  00000	83 c1 04	 add	 ecx, 4
  00003	51		 push	 ecx
  00004	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 40   : 	}

  0000a	c3		 ret	 0
?Leave@CMclCritSec@@QAEXXZ ENDP				; CMclCritSec::Leave
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ??_GCMclCritSec@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMclCritSec@@UAEPAXI@Z PROC NEAR			; CMclCritSec::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  00006	50		 push	 eax
  00007	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMclCritSec@@6B@
  0000d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00013	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  00018	74 09		 je	 SHORT $L187115
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00020	83 c4 04	 add	 esp, 4
$L187115:
  00023	8b c6		 mov	 eax, esi
  00025	5e		 pop	 esi
  00026	c2 04 00	 ret	 4
??_GCMclCritSec@@UAEPAXI@Z ENDP				; CMclCritSec::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMyTrace@@QAE@XZ				; CMyTrace::CMyTrace
PUBLIC	??_7CMyTrace@@6B@				; CMyTrace::`vftable'
PUBLIC	??_GCMyTrace@@UAEPAXI@Z				; CMyTrace::`scalar deleting destructor'
EXTRN	??_ECMyTrace@@UAEPAXI@Z:NEAR			; CMyTrace::`vector deleting destructor'
;	COMDAT ??_7CMyTrace@@6B@
CONST	SEGMENT
??_7CMyTrace@@6B@ DD FLAT:??_ECMyTrace@@UAEPAXI@Z	; CMyTrace::`vftable'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\src\mytrace.cpp
CONST	ENDS
;	COMDAT ??0CMyTrace@@QAE@XZ
_TEXT	SEGMENT
??0CMyTrace@@QAE@XZ PROC NEAR				; CMyTrace::CMyTrace, COMDAT
; _this$ = ecx

; 5    : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	57		 push	 edi
  00004	8d 86 d0 11 00
	00		 lea	 eax, DWORD PTR [esi+4560]
  0000a	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMyTrace@@6B@
  00010	50		 push	 eax
  00011	c7 86 cc 11 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4556], OFFSET FLAT:??_7CMclCritSec@@6B@
  0001b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InitializeCriticalSection@4

; 6    : 	m_hfont	= NULL;

  00021	33 c0		 xor	 eax, eax
  00023	89 86 1c 11 00
	00		 mov	 DWORD PTR [esi+4380], eax

; 7    : 	m_uHead		= m_uTail	= 0;

  00029	66 89 86 18 11
	00 00		 mov	 WORD PTR [esi+4376], ax
  00030	66 89 86 16 11
	00 00		 mov	 WORD PTR [esi+4374], ax

; 8    : 	memset( m_szStatusBar, 0, sizeof(m_szStatusBar) );

  00037	8d be 2c 11 00
	00		 lea	 edi, DWORD PTR [esi+4396]
  0003d	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00042	f3 ab		 rep stosd
  00044	5f		 pop	 edi

; 9    : }

  00045	8b c6		 mov	 eax, esi
  00047	5e		 pop	 esi
  00048	c3		 ret	 0
??0CMyTrace@@QAE@XZ ENDP				; CMyTrace::CMyTrace
_TEXT	ENDS
PUBLIC	??1CMyTrace@@UAE@XZ				; CMyTrace::~CMyTrace
EXTRN	__imp__DeleteObject@4:NEAR
; Function compile flags: /Ogty
;	COMDAT ??1CMyTrace@@UAE@XZ
_TEXT	SEGMENT
??1CMyTrace@@UAE@XZ PROC NEAR				; CMyTrace::~CMyTrace, COMDAT
; _this$ = ecx

; 12   : {

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 13   : 	if( m_hfont )

  00003	8b 86 1c 11 00
	00		 mov	 eax, DWORD PTR [esi+4380]
  00009	85 c0		 test	 eax, eax
  0000b	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CMyTrace@@6B@
  00011	74 07		 je	 SHORT $L186776

; 14   : 		::DeleteObject( m_hfont );

  00013	50		 push	 eax
  00014	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteObject@4
$L186776:

; 15   : }

  0001a	c7 86 cc 11 00
	00 00 00 00 00	 mov	 DWORD PTR [esi+4556], OFFSET FLAT:??_7CMclCritSec@@6B@
  00024	81 c6 d0 11 00
	00		 add	 esi, 4560		; 000011d0H
  0002a	56		 push	 esi
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__DeleteCriticalSection@4
  00031	5e		 pop	 esi
  00032	c3		 ret	 0
??1CMyTrace@@UAE@XZ ENDP				; CMyTrace::~CMyTrace
_TEXT	ENDS
PUBLIC	?Add@CMyTrace@@QAAXKHPBDZZ			; CMyTrace::Add
PUBLIC	??_C@_06DJIHEMFI@status?$AA@			; `string'
EXTRN	__vsnprintf:NEAR
EXTRN	__imp__InvalidateRect@12:NEAR
;	COMDAT ?uKeyStatusBar@?1??Add@CMyTrace@@QAAXKHPBDZZ@4KA
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\mcl\include\cmclcritsec.h
_BSS	SEGMENT
?uKeyStatusBar@?1??Add@CMyTrace@@QAAXKHPBDZZ@4KA DD 01H DUP (?) ; `CMyTrace::Add'::`2'::uKeyStatusBar
_BSS	ENDS
;	COMDAT ?$S1@?1??Add@CMyTrace@@QAAXKHPBDZZ@4IA
_BSS	SEGMENT
?$S1@?1??Add@CMyTrace@@QAAXKHPBDZZ@4IA DD 01H DUP (?)	; `CMyTrace::Add'::`2'::$S1
_BSS	ENDS
;	COMDAT ??_C@_06DJIHEMFI@status?$AA@
CONST	SEGMENT
??_C@_06DJIHEMFI@status?$AA@ DB 'status', 00H		; `string'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\src\mytrace.cpp
CONST	ENDS
;	COMDAT ?Add@CMyTrace@@QAAXKHPBDZZ
_TEXT	SEGMENT
_szBuffer$ = -520					; size = 512
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_this$ = 8						; size = 4
_uKey$ = 12						; size = 4
_fInverse$ = 16						; size = 4
_lpszFormat$ = 20					; size = 4
?Add@CMyTrace@@QAAXKHPBDZZ PROC NEAR			; CMyTrace::Add, COMDAT

; 40   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec 0c 02 00
	00		 sub	 esp, 524		; 0000020cH
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c5		 xor	 eax, ebp
  00013	53		 push	 ebx
  00014	89 84 24 0c 02
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+528], eax

; 41   : 	static u_long uKeyStatusBar		= CMyTrace::Key( "status" );

  0001b	f6 05 00 00 00
	00 01		 test	 BYTE PTR ?$S1@?1??Add@CMyTrace@@QAAXKHPBDZZ@4IA, 1
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	75 21		 jne	 SHORT $L186808
  00026	8b 35 00 00 00
	00		 mov	 esi, DWORD PTR ?$S1@?1??Add@CMyTrace@@QAAXKHPBDZZ@4IA
  0002c	83 ce 01	 or	 esi, 1
  0002f	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_06DJIHEMFI@status?$AA@
  00034	89 35 00 00 00
	00		 mov	 DWORD PTR ?$S1@?1??Add@CMyTrace@@QAAXKHPBDZZ@4IA, esi
  0003a	e8 00 00 00 00	 call	 ?Key@CMyTrace@@SAKPBD@Z	; CMyTrace::Key
  0003f	83 c4 04	 add	 esp, 4
  00042	a3 00 00 00 00	 mov	 DWORD PTR ?uKeyStatusBar@?1??Add@CMyTrace@@QAAXKHPBDZZ@4KA, eax
$L186808:

; 42   : 
; 43   : 	va_list args;
; 44   : 	va_start( args, lpszFormat );
; 45   : 	int nBuf;
; 46   : 	TCHAR szBuffer[512]	= { 0,};

  00047	33 c0		 xor	 eax, eax
  00049	c6 44 24 10 00	 mov	 BYTE PTR _szBuffer$[esp+536], 0
  0004e	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00053	8d 7c 24 11	 lea	 edi, DWORD PTR _szBuffer$[esp+537]
  00057	f3 ab		 rep stosd

; 47   : 	nBuf	= _vsntprintf( szBuffer, 512, lpszFormat, args );

  00059	8b 4d 14	 mov	 ecx, DWORD PTR _lpszFormat$[ebp]
  0005c	66 ab		 stosw
  0005e	aa		 stosb
  0005f	8d 45 18	 lea	 eax, DWORD PTR _lpszFormat$[ebp+4]
  00062	50		 push	 eax
  00063	51		 push	 ecx
  00064	8d 54 24 18	 lea	 edx, DWORD PTR _szBuffer$[esp+544]
  00068	68 00 02 00 00	 push	 512			; 00000200H
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 __vsnprintf

; 48   : 	va_end( args );
; 49   : 
; 50   : 	if( fInverse )

  00073	8b 5d 10	 mov	 ebx, DWORD PTR _fInverse$[ebp]
  00076	83 c4 10	 add	 esp, 16			; 00000010H
  00079	85 db		 test	 ebx, ebx
  0007b	74 38		 je	 SHORT $L186818

; 51   : 	{
; 52   : 		int cbString	= strlen( szBuffer );

  0007d	8d 44 24 10	 lea	 eax, DWORD PTR _szBuffer$[esp+536]
  00081	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L187146:
  00084	8a 08		 mov	 cl, BYTE PTR [eax]
  00086	40		 inc	 eax
  00087	84 c9		 test	 cl, cl
  00089	75 f9		 jne	 SHORT $L187146
  0008b	2b c2		 sub	 eax, edx
  0008d	8b d0		 mov	 edx, eax

; 53   : 		memset( &szBuffer[cbString], 0x20, 160 - cbString );

  0008f	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00094	2b ca		 sub	 ecx, edx
  00096	8d 7c 14 10	 lea	 edi, DWORD PTR _szBuffer$[esp+edx+536]
  0009a	8b d1		 mov	 edx, ecx
  0009c	c1 e9 02	 shr	 ecx, 2
  0009f	b8 20 20 20 20	 mov	 eax, 538976288		; 20202020H
  000a4	f3 ab		 rep stosd
  000a6	8b ca		 mov	 ecx, edx
  000a8	83 e1 03	 and	 ecx, 3
  000ab	f3 aa		 rep stosb

; 54   : 		szBuffer[159]	= '\0';

  000ad	c6 84 24 af 00
	00 00 00	 mov	 BYTE PTR _szBuffer$[esp+695], 0
$L186818:

; 55   : 	}
; 56   : 
; 57   : 	int nIndex;
; 58   : 	m_AddRemoveLock.Enter();

  000b5	8b 75 08	 mov	 esi, DWORD PTR _this$[ebp]
  000b8	8d 86 d0 11 00
	00		 lea	 eax, DWORD PTR [esi+4560]
  000be	50		 push	 eax
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 59   : 
; 60   : 	if( uKey == uKeyStatusBar ) {

  000c5	8b 7d 0c	 mov	 edi, DWORD PTR _uKey$[ebp]
  000c8	3b 3d 00 00 00
	00		 cmp	 edi, DWORD PTR ?uKeyStatusBar@?1??Add@CMyTrace@@QAAXKHPBDZZ@4KA
  000ce	75 1f		 jne	 SHORT $L186821

; 61   : 		strcpy( m_szStatusBar, szBuffer );

  000d0	8d 44 24 10	 lea	 eax, DWORD PTR _szBuffer$[esp+536]
  000d4	8d 96 2c 11 00
	00		 lea	 edx, DWORD PTR [esi+4396]
  000da	8b c8		 mov	 ecx, eax
  000dc	2b d1		 sub	 edx, ecx
  000de	8b ff		 npad	 2
$L187133:
  000e0	8a 08		 mov	 cl, BYTE PTR [eax]
  000e2	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  000e5	40		 inc	 eax
  000e6	84 c9		 test	 cl, cl
  000e8	75 f6		 jne	 SHORT $L187133

; 62   : 	}
; 63   : 	else {

  000ea	e9 ac 00 00 00	 jmp	 $L186825
$L186821:

; 64   : 		if( uKey == 0 || ( nIndex = FindKey( uKey ) ) < 0 ) {

  000ef	85 ff		 test	 edi, edi
  000f1	74 2f		 je	 SHORT $L186824
  000f3	57		 push	 edi
  000f4	8b ce		 mov	 ecx, esi
  000f6	e8 00 00 00 00	 call	 ?FindKey@CMyTrace@@AAEHK@Z ; CMyTrace::FindKey
  000fb	85 c0		 test	 eax, eax
  000fd	7c 23		 jl	 SHORT $L186824

; 73   : 			}
; 74   : 		}
; 75   : 		else {
; 76   : 			m_mts[nIndex].fInverse	= fInverse;

  000ff	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H
  00105	8d 0c 30	 lea	 ecx, DWORD PTR [eax+esi]

; 77   : 			strcpy( m_mts[nIndex].szText, szBuffer );

  00108	8d 44 24 10	 lea	 eax, DWORD PTR _szBuffer$[esp+536]
  0010c	8d 51 0c	 lea	 edx, DWORD PTR [ecx+12]
  0010f	89 59 08	 mov	 DWORD PTR [ecx+8], ebx
  00112	8b c8		 mov	 ecx, eax
  00114	2b d1		 sub	 edx, ecx
$L187135:
  00116	8a 08		 mov	 cl, BYTE PTR [eax]
  00118	88 0c 02	 mov	 BYTE PTR [edx+eax], cl
  0011b	40		 inc	 eax
  0011c	84 c9		 test	 cl, cl
  0011e	75 f6		 jne	 SHORT $L187135
  00120	eb 79		 jmp	 SHORT $L186825
$L186824:

; 65   : 			m_mts[m_uTail].uKey		= uKey;

  00122	0f b7 96 18 11
	00 00		 movzx	 edx, WORD PTR [esi+4376]
  00129	69 d2 a8 00 00
	00		 imul	 edx, 168		; 000000a8H
  0012f	89 7c 32 04	 mov	 DWORD PTR [edx+esi+4], edi

; 66   : 			m_mts[m_uTail].fInverse		= fInverse;

  00133	0f b7 86 18 11
	00 00		 movzx	 eax, WORD PTR [esi+4376]
  0013a	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H
  00140	89 5c 30 08	 mov	 DWORD PTR [eax+esi+8], ebx

; 67   : 
; 68   : 			strcpy( m_mts[m_uTail].szText, szBuffer );

  00144	0f b7 96 18 11
	00 00		 movzx	 edx, WORD PTR [esi+4376]
  0014b	69 d2 a8 00 00
	00		 imul	 edx, 168		; 000000a8H
  00151	8d 4c 24 10	 lea	 ecx, DWORD PTR _szBuffer$[esp+536]
  00155	8d 54 32 0c	 lea	 edx, DWORD PTR [edx+esi+12]
  00159	8d a4 24 00 00
	00 00		 npad	 7
$L187134:
  00160	8a 01		 mov	 al, BYTE PTR [ecx]
  00162	41		 inc	 ecx
  00163	88 02		 mov	 BYTE PTR [edx], al
  00165	42		 inc	 edx
  00166	84 c0		 test	 al, al
  00168	75 f6		 jne	 SHORT $L187134

; 69   : 
; 70   : 			m_uTail		= ( m_uTail + 1 ) % MAX_LOG;

  0016a	0f b7 86 18 11
	00 00		 movzx	 eax, WORD PTR [esi+4376]
  00171	40		 inc	 eax
  00172	99		 cdq
  00173	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00178	f7 f9		 idiv	 ecx

; 71   : 			if( m_uTail == m_uHead ) {

  0017a	66 8b 86 16 11
	00 00		 mov	 ax, WORD PTR [esi+4374]
  00181	66 3b d0	 cmp	 dx, ax
  00184	66 89 96 18 11
	00 00		 mov	 WORD PTR [esi+4376], dx
  0018b	75 0e		 jne	 SHORT $L186825

; 72   : 				m_uHead		= ( m_uHead + 1 ) % MAX_LOG;

  0018d	0f b7 c0	 movzx	 eax, ax
  00190	40		 inc	 eax
  00191	99		 cdq
  00192	f7 f9		 idiv	 ecx
  00194	66 89 96 16 11
	00 00		 mov	 WORD PTR [esi+4374], dx
$L186825:

; 78   : 		}
; 79   : 	}
; 80   : 
; 81   : 	m_AddRemoveLock.Leave();

  0019b	8d 86 d0 11 00
	00		 lea	 eax, DWORD PTR [esi+4560]
  001a1	50		 push	 eax
  001a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 82   : 
; 83   : 	InvalidateRect( m_hWnd, NULL, TRUE );

  001a8	8b 96 20 11 00
	00		 mov	 edx, DWORD PTR [esi+4384]
  001ae	6a 01		 push	 1
  001b0	6a 00		 push	 0
  001b2	52		 push	 edx
  001b3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__InvalidateRect@12

; 84   : }

  001b9	8b 8c 24 14 02
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+536]
  001c0	5f		 pop	 edi
  001c1	5e		 pop	 esi
  001c2	33 cd		 xor	 ecx, ebp
  001c4	5b		 pop	 ebx
  001c5	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ca	8b e5		 mov	 esp, ebp
  001cc	5d		 pop	 ebp
  001cd	c3		 ret	 0
?Add@CMyTrace@@QAAXKHPBDZZ ENDP				; CMyTrace::Add
_TEXT	ENDS
PUBLIC	?AddLine@CMyTrace@@QAEXD@Z			; CMyTrace::AddLine
; Function compile flags: /Ogty
;	COMDAT ?AddLine@CMyTrace@@QAEXD@Z
_TEXT	SEGMENT
_szLine$ = -168						; size = 160
__$ArrayPad$ = -4					; size = 4
__$ReturnAddr$ = 4					; size = 4
_ch$ = 8						; size = 1
?AddLine@CMyTrace@@QAEXD@Z PROC NEAR			; CMyTrace::AddLine, COMDAT
; _this$ = ecx

; 87   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	81 ec a8 00 00
	00		 sub	 esp, 168		; 000000a8H
  0000c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00011	33 c5		 xor	 eax, ebp
  00013	89 84 24 a4 00
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+168], eax

; 88   : 	char szLine[160];
; 89   : 	memset( szLine, ch, 159 );

  0001a	0f be 45 08	 movsx	 eax, BYTE PTR _ch$[ebp]
  0001e	8a d0		 mov	 dl, al
  00020	8a f2		 mov	 dh, dl
  00022	56		 push	 esi
  00023	57		 push	 edi
  00024	8b f1		 mov	 esi, ecx
  00026	b9 27 00 00 00	 mov	 ecx, 39			; 00000027H
  0002b	8d 7c 24 08	 lea	 edi, DWORD PTR _szLine$[esp+176]
  0002f	8b c2		 mov	 eax, edx
  00031	c1 e0 10	 shl	 eax, 16			; 00000010H
  00034	66 8b c2	 mov	 ax, dx
  00037	f3 ab		 rep stosd
  00039	66 ab		 stosw
  0003b	aa		 stosb

; 90   : 	szLine[159]		= '\0';
; 91   : 	Add( 0, FALSE, szLine );

  0003c	8d 44 24 08	 lea	 eax, DWORD PTR _szLine$[esp+176]
  00040	50		 push	 eax
  00041	6a 00		 push	 0
  00043	6a 00		 push	 0
  00045	56		 push	 esi
  00046	c6 84 24 b7 00
	00 00 00	 mov	 BYTE PTR _szLine$[esp+351], 0
  0004e	e8 00 00 00 00	 call	 ?Add@CMyTrace@@QAAXKHPBDZZ ; CMyTrace::Add

; 92   : }

  00053	8b 8c 24 bc 00
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+192]
  0005a	83 c4 10	 add	 esp, 16			; 00000010H
  0005d	5f		 pop	 edi
  0005e	33 cd		 xor	 ecx, ebp
  00060	5e		 pop	 esi
  00061	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c2 04 00	 ret	 4
?AddLine@CMyTrace@@QAEXD@Z ENDP				; CMyTrace::AddLine
_TEXT	ENDS
PUBLIC	?Paint@CMyTrace@@QAEXPAUHDC__@@@Z		; CMyTrace::Paint
PUBLIC	??_C@_0KB@FMFNHDFD@________________________________@ ; `string'
EXTRN	__imp__SelectObject@8:NEAR
EXTRN	__imp__SetBkColor@8:NEAR
;	COMDAT ?nYStatusBar@?1??Paint@CMyTrace@@QAEXPAUHDC__@@@Z@4HA
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\mcl\include\cmclcritsec.h
_DATA	SEGMENT
?nYStatusBar@?1??Paint@CMyTrace@@QAEXPAUHDC__@@@Z@4HA DD 0163H ; `CMyTrace::Paint'::`2'::nYStatusBar
_DATA	ENDS
;	COMDAT ??_C@_0KB@FMFNHDFD@________________________________@
CONST	SEGMENT
??_C@_0KB@FMFNHDFD@________________________________@ DB '________________'
	DB	'_____________________________________________________________'
	DB	'_____________________________________________________________'
	DB	'______________________', 00H		; `string'
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\src\mytrace.cpp
CONST	ENDS
;	COMDAT ?Paint@CMyTrace@@QAEXPAUHDC__@@@Z
_TEXT	SEGMENT
$T187184 = -12						; size = 4
$T187174 = -12						; size = 4
$T187164 = -12						; size = 4
tv294 = -8						; size = 4
_hfontOld$ = -4						; size = 4
tv173 = 8						; size = 4
_i$186858 = 8						; size = 4
_i$186853 = 8						; size = 4
_hDC$ = 8						; size = 4
?Paint@CMyTrace@@QAEXPAUHDC__@@@Z PROC NEAR		; CMyTrace::Paint, COMDAT
; _this$ = ecx

; 112  : {

  00000	83 ec 0c	 sub	 esp, 12			; 0000000cH
  00003	53		 push	 ebx
  00004	55		 push	 ebp
  00005	56		 push	 esi

; 113  : 	static int nYStatusBar	= 14 * ( MAX_LOG - 1 ) + 5;
; 114  : 
; 115  : 	HFONT hfontOld	= (HFONT)SelectObject( hDC, m_hfont );

  00006	8b 74 24 1c	 mov	 esi, DWORD PTR _hDC$[esp+20]
  0000a	57		 push	 edi
  0000b	8b f9		 mov	 edi, ecx
  0000d	8b 87 1c 11 00
	00		 mov	 eax, DWORD PTR [edi+4380]
  00013	50		 push	 eax
  00014	56		 push	 esi
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8

; 116  : 	SetBkColor( hDC, m_cr );

  0001b	8b 8f 24 11 00
	00		 mov	 ecx, DWORD PTR [edi+4388]
  00021	51		 push	 ecx
  00022	56		 push	 esi
  00023	89 44 24 20	 mov	 DWORD PTR _hfontOld$[esp+36], eax
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkColor@8

; 117  : 
; 118  : 	int cy	= 0;
; 119  : 
; 120  : 	m_AddRemoveLock.Enter();

  0002d	8d 87 d0 11 00
	00		 lea	 eax, DWORD PTR [edi+4560]
  00033	50		 push	 eax
  00034	33 db		 xor	 ebx, ebx
  00036	89 44 24 18	 mov	 DWORD PTR tv294[esp+32], eax
  0003a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__EnterCriticalSection@4

; 121  : 
; 122  : 	if( m_uHead <= m_uTail ) {

  00040	66 8b 87 16 11
	00 00		 mov	 ax, WORD PTR [edi+4374]
  00047	66 8b 8f 18 11
	00 00		 mov	 cx, WORD PTR [edi+4376]
  0004e	66 3b c1	 cmp	 ax, cx

; 123  : 		for( int i =m_uHead; i < m_uTail; i++, cy += 14 ) {

  00051	0f b7 c0	 movzx	 eax, ax
  00054	0f 87 8d 00 00
	00		 ja	 $L186852
  0005a	0f b7 d1	 movzx	 edx, cx
  0005d	3b c2		 cmp	 eax, edx
  0005f	89 44 24 20	 mov	 DWORD PTR _i$186853[esp+24], eax
  00063	0f 8d 89 01 00
	00		 jge	 $L187218
  00069	69 c0 a8 00 00
	00		 imul	 eax, 168		; 000000a8H
  0006f	8d 6c 38 0c	 lea	 ebp, DWORD PTR [eax+edi+12]
$L186854:

; 124  : 			CMyTrace::TextOut( hDC, 4, cy, m_mts[i].szText, m_mts[i].fInverse );

  00073	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]
  00076	33 c9		 xor	 ecx, ecx
  00078	85 c0		 test	 eax, eax
  0007a	0f 95 c1	 setne	 cl
  0007d	89 44 24 10	 mov	 DWORD PTR $T187164[esp+28], eax
  00081	41		 inc	 ecx
  00082	51		 push	 ecx
  00083	56		 push	 esi
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  0008a	8b 44 24 10	 mov	 eax, DWORD PTR $T187164[esp+28]
  0008e	85 c0		 test	 eax, eax
  00090	74 08		 je	 SHORT $L187162
  00092	8b 87 28 11 00
	00		 mov	 eax, DWORD PTR [edi+4392]
  00098	eb 06		 jmp	 SHORT $L187163
$L187162:
  0009a	8b 87 24 11 00
	00		 mov	 eax, DWORD PTR [edi+4388]
$L187163:
  000a0	50		 push	 eax
  000a1	56		 push	 esi
  000a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
  000a8	8b c5		 mov	 eax, ebp
  000aa	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  000ad	8d 49 00	 npad	 3
$L187214:
  000b0	8a 10		 mov	 dl, BYTE PTR [eax]
  000b2	40		 inc	 eax
  000b3	84 d2		 test	 dl, dl
  000b5	75 f9		 jne	 SHORT $L187214
  000b7	2b c1		 sub	 eax, ecx
  000b9	50		 push	 eax
  000ba	55		 push	 ebp
  000bb	53		 push	 ebx
  000bc	6a 04		 push	 4
  000be	56		 push	 esi
  000bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  000c5	8b 44 24 20	 mov	 eax, DWORD PTR _i$186853[esp+24]
  000c9	0f b7 97 18 11
	00 00		 movzx	 edx, WORD PTR [edi+4376]
  000d0	40		 inc	 eax
  000d1	81 c5 a8 00 00
	00		 add	 ebp, 168		; 000000a8H
  000d7	83 c3 0e	 add	 ebx, 14			; 0000000eH
  000da	3b c2		 cmp	 eax, edx
  000dc	89 44 24 20	 mov	 DWORD PTR _i$186853[esp+24], eax
  000e0	7c 91		 jl	 SHORT $L186854

; 125  : 		}
; 126  : 	}
; 127  : 	else

  000e2	e9 0b 01 00 00	 jmp	 $L187218
$L186852:

; 128  : 	{
; 129  : 		for( int i = m_uHead; i < MAX_LOG; i++, cy += 14 ) {

  000e7	83 f8 1a	 cmp	 eax, 26			; 0000001aH
  000ea	0f 8d 7a 00 00
	00		 jge	 $L186861
  000f0	8b c8		 mov	 ecx, eax
  000f2	69 c9 a8 00 00
	00		 imul	 ecx, 168		; 000000a8H
  000f8	8d 6c 39 0c	 lea	 ebp, DWORD PTR [ecx+edi+12]
  000fc	b9 1a 00 00 00	 mov	 ecx, 26			; 0000001aH
  00101	2b c8		 sub	 ecx, eax
  00103	89 4c 24 20	 mov	 DWORD PTR tv173[esp+24], ecx
$L186859:

; 130  : 			CMyTrace::TextOut( hDC, 4, cy, m_mts[i].szText, m_mts[i].fInverse );

  00107	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]
  0010a	33 d2		 xor	 edx, edx
  0010c	85 c0		 test	 eax, eax
  0010e	0f 95 c2	 setne	 dl
  00111	89 44 24 10	 mov	 DWORD PTR $T187174[esp+28], eax
  00115	42		 inc	 edx
  00116	52		 push	 edx
  00117	56		 push	 esi
  00118	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  0011e	8b 44 24 10	 mov	 eax, DWORD PTR $T187174[esp+28]
  00122	85 c0		 test	 eax, eax
  00124	74 08		 je	 SHORT $L187172
  00126	8b 87 28 11 00
	00		 mov	 eax, DWORD PTR [edi+4392]
  0012c	eb 06		 jmp	 SHORT $L187173
$L187172:
  0012e	8b 87 24 11 00
	00		 mov	 eax, DWORD PTR [edi+4388]
$L187173:
  00134	50		 push	 eax
  00135	56		 push	 esi
  00136	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
  0013c	8b c5		 mov	 eax, ebp
  0013e	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
$L187215:
  00141	8a 10		 mov	 dl, BYTE PTR [eax]
  00143	40		 inc	 eax
  00144	84 d2		 test	 dl, dl
  00146	75 f9		 jne	 SHORT $L187215
  00148	2b c1		 sub	 eax, ecx
  0014a	50		 push	 eax
  0014b	55		 push	 ebp
  0014c	53		 push	 ebx
  0014d	6a 04		 push	 4
  0014f	56		 push	 esi
  00150	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  00156	8b 44 24 20	 mov	 eax, DWORD PTR tv173[esp+24]
  0015a	81 c5 a8 00 00
	00		 add	 ebp, 168		; 000000a8H
  00160	83 c3 0e	 add	 ebx, 14			; 0000000eH
  00163	48		 dec	 eax
  00164	89 44 24 20	 mov	 DWORD PTR tv173[esp+24], eax
  00168	75 9d		 jne	 SHORT $L186859
$L186861:

; 131  : 		}
; 132  : 		for( i = 0; i < m_uTail; i++, cy += 14 ) {

  0016a	66 83 bf 18 11
	00 00 00	 cmp	 WORD PTR [edi+4376], 0
  00172	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR _i$186858[esp+24], 0
  0017a	0f 86 72 00 00
	00		 jbe	 $L187218
  00180	8d 6f 0c	 lea	 ebp, DWORD PTR [edi+12]
$L186862:

; 133  : 			CMyTrace::TextOut( hDC, 4, cy, m_mts[i].szText, m_mts[i].fInverse );

  00183	8b 45 fc	 mov	 eax, DWORD PTR [ebp-4]
  00186	33 c9		 xor	 ecx, ecx
  00188	85 c0		 test	 eax, eax
  0018a	0f 95 c1	 setne	 cl
  0018d	89 44 24 10	 mov	 DWORD PTR $T187184[esp+28], eax
  00191	41		 inc	 ecx
  00192	51		 push	 ecx
  00193	56		 push	 esi
  00194	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  0019a	8b 44 24 10	 mov	 eax, DWORD PTR $T187184[esp+28]
  0019e	85 c0		 test	 eax, eax
  001a0	74 08		 je	 SHORT $L187182
  001a2	8b 87 28 11 00
	00		 mov	 eax, DWORD PTR [edi+4392]
  001a8	eb 06		 jmp	 SHORT $L187183
$L187182:
  001aa	8b 87 24 11 00
	00		 mov	 eax, DWORD PTR [edi+4388]
$L187183:
  001b0	50		 push	 eax
  001b1	56		 push	 esi
  001b2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
  001b8	8b c5		 mov	 eax, ebp
  001ba	8d 48 01	 lea	 ecx, DWORD PTR [eax+1]
  001bd	8d 49 00	 npad	 3
$L187216:
  001c0	8a 10		 mov	 dl, BYTE PTR [eax]
  001c2	40		 inc	 eax
  001c3	84 d2		 test	 dl, dl
  001c5	75 f9		 jne	 SHORT $L187216
  001c7	2b c1		 sub	 eax, ecx
  001c9	50		 push	 eax
  001ca	55		 push	 ebp
  001cb	53		 push	 ebx
  001cc	6a 04		 push	 4
  001ce	56		 push	 esi
  001cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
  001d5	8b 44 24 20	 mov	 eax, DWORD PTR _i$186858[esp+24]
  001d9	0f b7 97 18 11
	00 00		 movzx	 edx, WORD PTR [edi+4376]
  001e0	40		 inc	 eax
  001e1	81 c5 a8 00 00
	00		 add	 ebp, 168		; 000000a8H
  001e7	83 c3 0e	 add	 ebx, 14			; 0000000eH
  001ea	3b c2		 cmp	 eax, edx
  001ec	89 44 24 20	 mov	 DWORD PTR _i$186858[esp+24], eax
  001f0	7c 91		 jl	 SHORT $L186862
$L187218:

; 134  : 		}
; 135  : 	}
; 136  : 
; 137  : 	if( m_szStatusBar[0] != '\0' )

  001f2	8a 87 2c 11 00
	00		 mov	 al, BYTE PTR [edi+4396]
  001f8	84 c0		 test	 al, al
  001fa	8d af 2c 11 00
	00		 lea	 ebp, DWORD PTR [edi+4396]
  00200	74 6b		 je	 SHORT $L187198

; 138  : 	{
; 139  : 		CMyTrace::TextOut( hDC, 0, nYStatusBar-14, "________________________________________________________________________________________________________________________________________________________________", FALSE );

  00202	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nYStatusBar@?1??Paint@CMyTrace@@QAEXPAUHDC__@@@Z@4HA
  00208	6a 01		 push	 1
  0020a	56		 push	 esi
  0020b	83 c3 f2	 add	 ebx, -14		; fffffff2H
  0020e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  00214	8b 87 24 11 00
	00		 mov	 eax, DWORD PTR [edi+4388]
  0021a	50		 push	 eax
  0021b	56		 push	 esi
  0021c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
  00222	68 a0 00 00 00	 push	 160			; 000000a0H
  00227	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0KB@FMFNHDFD@________________________________@
  0022c	53		 push	 ebx
  0022d	6a 00		 push	 0
  0022f	56		 push	 esi
  00230	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20

; 140  : 		CMyTrace::TextOut( hDC, 4, nYStatusBar, m_szStatusBar, FALSE );

  00236	8b 1d 00 00 00
	00		 mov	 ebx, DWORD PTR ?nYStatusBar@?1??Paint@CMyTrace@@QAEXPAUHDC__@@@Z@4HA
  0023c	6a 01		 push	 1
  0023e	56		 push	 esi
  0023f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetBkMode@8
  00245	8b 8f 24 11 00
	00		 mov	 ecx, DWORD PTR [edi+4388]
  0024b	51		 push	 ecx
  0024c	56		 push	 esi
  0024d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetTextColor@8
  00253	8b c5		 mov	 eax, ebp
  00255	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
$L187217:
  00258	8a 08		 mov	 cl, BYTE PTR [eax]
  0025a	40		 inc	 eax
  0025b	84 c9		 test	 cl, cl
  0025d	75 f9		 jne	 SHORT $L187217
  0025f	2b c7		 sub	 eax, edi
  00261	50		 push	 eax
  00262	55		 push	 ebp
  00263	53		 push	 ebx
  00264	6a 04		 push	 4
  00266	56		 push	 esi
  00267	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__TextOutA@20
$L187198:

; 141  : 	}
; 142  : 
; 143  : 	m_AddRemoveLock.Leave();

  0026d	8b 54 24 14	 mov	 edx, DWORD PTR tv294[esp+28]
  00271	52		 push	 edx
  00272	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LeaveCriticalSection@4

; 144  : 
; 145  : 	SelectObject( hDC, hfontOld );

  00278	8b 44 24 18	 mov	 eax, DWORD PTR _hfontOld$[esp+28]
  0027c	50		 push	 eax
  0027d	56		 push	 esi
  0027e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SelectObject@8
  00284	5f		 pop	 edi
  00285	5e		 pop	 esi
  00286	5d		 pop	 ebp
  00287	5b		 pop	 ebx

; 146  : }

  00288	83 c4 0c	 add	 esp, 12			; 0000000cH
  0028b	c2 04 00	 ret	 4
?Paint@CMyTrace@@QAEXPAUHDC__@@@Z ENDP			; CMyTrace::Paint
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCMyTrace@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCMyTrace@@UAEPAXI@Z PROC NEAR			; CMyTrace::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CMyTrace@@UAE@XZ	; CMyTrace::~CMyTrace
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L187221
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L187221:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCMyTrace@@UAEPAXI@Z ENDP				; CMyTrace::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	_atexit:NEAR
CRT$XCU	SEGMENT
_$S4	DD	FLAT:_$E2
; Function compile flags: /Ogty
CRT$XCU	ENDS
;	COMDAT _$E2
text$yc	SEGMENT
_$E2	PROC NEAR					; COMDAT

; 168  : CMyTrace	g_MyTrace;

  00000	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_MyTrace@@3VCMyTrace@@A
  00005	e8 00 00 00 00	 call	 ??0CMyTrace@@QAE@XZ	; CMyTrace::CMyTrace
  0000a	68 00 00 00 00	 push	 OFFSET FLAT:_$E3
  0000f	e8 00 00 00 00	 call	 _atexit
  00014	59		 pop	 ecx
  00015	c3		 ret	 0
_$E2	ENDP
; Function compile flags: /Ogty
text$yc	ENDS
;	COMDAT _$E3
text$yd	SEGMENT
_$E3	PROC NEAR					; COMDAT
  00000	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:?g_MyTrace@@3VCMyTrace@@A
  00005	e9 00 00 00 00	 jmp	 ??1CMyTrace@@UAE@XZ	; CMyTrace::~CMyTrace
_$E3	ENDP
text$yd	ENDS
PUBLIC	?g_MyTrace@@3VCMyTrace@@A			; g_MyTrace
_BSS	SEGMENT
?g_MyTrace@@3VCMyTrace@@A DB 011e8H DUP (?)		; g_MyTrace
_BSS	ENDS
END
