; Listing generated by Microsoft (R) Optimizing Compiler Version 13.10.6030 

	TITLE	\Documents and Settings\test\Mes documents\Source\Virtuos_v17\Build\Program\_Common\lordskill.cpp
	.386P
include listing.inc
if @Version gt 510
.model FLAT
else
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
_BSS	SEGMENT DWORD USE32 PUBLIC 'BSS'
_BSS	ENDS
$$SYMBOLS	SEGMENT BYTE USE32 'DEBSYM'
$$SYMBOLS	ENDS
_TLS	SEGMENT DWORD USE32 PUBLIC 'TLS'
_TLS	ENDS
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ?GetId@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetCooltime@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetTick@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SetTick@CLordSkillComponent@@QAEXH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CLordSkillComponentExecutable@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLordSkillComponentExecutable@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Use@CLordSkillComponentExecutable@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Execute@CLordSkillComponentExecutable@@UAEXKKPAX@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLordSkillComponentExecutable@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CLordSkillComponent@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLordSkillComponent@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLordSkillComponent@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CLordSkillComponent@@QAEXHHHPBD00HHKKM@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Tick@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0CLordSkill@@QAE@PAVCLord@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_GCLordSkill@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1CLordSkill@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Clear@CLordSkill@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?AddSkillComponent@CLordSkill@@QAEXPAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?GetSkill@CLordSkill@@QAEPAVCLordSkillComponentExecutable@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?CreateSkillComponent@CLordSkill@@UAEPAVCLordSkillComponentExecutable@@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Reset@CLordSkill@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?Initialize@CLordSkill@@QAEHPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?SerializeTick@CLordSkill@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHABV12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?begin@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?end@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?push_back@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXABQAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?clear@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Diterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEAAPAVCLordSkillComponentExecutable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEHIIPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?capacity@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?insert@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Buy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_Vector_val@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE@V?$allocator@PAVCLordSkillComponentExecutable@@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Dconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEABQAVCLordSkillComponentExecutable@@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Destroy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXPAPAVCLordSkillComponentExecutable@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEXPAPAVCLordSkillComponentExecutable@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEPAPAVCLordSkillComponentExecutable@@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Hiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Giterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Yiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Gconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Iter_cat@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@@std@@YA?AUbidirectional_iterator_tag@0@ABViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Distance2@Viterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@I@std@@YAXViterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@0@0AAIUbidirectional_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAJPAJV?$allocator@J@std@@@std@@YAPAJPAJ00AAV?$allocator@J@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAJPAJ@std@@YAPAJPAJ00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@PAUtagDROPITEM@@PAU1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAUtagDROPITEM@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@UtagDROPITEM@@V?$allocator@UtagDROPITEM@@@std@@@std@@YAXPAUtagDROPITEM@@0AAV?$allocator@UtagDROPITEM@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@KV?$allocator@K@std@@@std@@YAXPAK0AAV?$allocator@K@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@JV?$allocator@J@std@@@std@@YAXPAJ0AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@JIJ@std@@YAXPAJIABJAAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$copy_backward@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@PAVCLordSkillComponentExecutable@@@std@@YAPAPAVCLordSkillComponentExecutable@@IPAPAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?destroy@?$allocator@UtagDROPITEM@@@std@@QAEXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@JJ@std@@YAPAJPAJ00AAV?$allocator@J@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAJIJ@std@@YAXPAJIABJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Ptr_cat@VCLordSkillComponentExecutable@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLordSkillComponentExecutable@@0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_fill_n@PAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninitialized_copy@PAPAVCLordSkillComponentExecutable@@PAPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Copy_backward_opt@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Destroy@UtagDROPITEM@@@std@@YAXPAUtagDROPITEM@@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Uninit_copy@PAVCLordSkillComponentExecutable@@PAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Ptr_cat@std@@YA?AU_Scalar_ptr_iterator_tag@1@PAJ0@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??9const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??8const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Eiterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??Econst_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inc@const_iterator@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@QAEXXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Min@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Left@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Isnil@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAADPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Parent@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Right@?$_Tree@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@std@@KAAAPAU_Node@?$_Tree_nod@V?$_Tmap_traits@KU_Friend@@U?$less@K@std@@V?$allocator@U?$pair@$$CBKU_Friend@@@std@@@3@$0A@@std@@@2@PAU342@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@G@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ?_Psave@?$_Facetptr@V?$ctype@D@std@@@std@@2PBVfacet@locale@2@B
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7logic_error@std@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT DWORD USE32 PUBLIC 'CONST'
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT DWORD USE32 PUBLIC 'DATA'
_DATA	ENDS
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?compare@?$char_traits@D@std@@SAHPBD0I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAH@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??5CAr@@QAEAAV0@AAI@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@H@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??6CAr@@QAEAAV0@I@Z
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT PARA USE32 PUBLIC 'CODE'
_TEXT	ENDS
;	COMDAT ??_7CLordSkill@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CLordSkillComponent@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
;	COMDAT ??_7CLordSkillComponentExecutable@@6B@
CONST	SEGMENT DWORD USE32 PUBLIC 'CONST'
CONST	ENDS
sxdata	SEGMENT DWORD USE32 'SXDATA'
sxdata	ENDS
FLAT	GROUP _DATA, CONST, _BSS
	ASSUME	CS: FLAT, DS: FLAT, SS: FLAT
endif

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?GetId@CLordSkillComponent@@QAEHXZ		; CLordSkillComponent::GetId
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.h
;	COMDAT ?GetId@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT
?GetId@CLordSkillComponent@@QAEHXZ PROC NEAR		; CLordSkillComponent::GetId, COMDAT
; _this$ = ecx

; 22   : 	int		GetId( void )	{	return m_nId;	}

  00000	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  00003	c3		 ret	 0
?GetId@CLordSkillComponent@@QAEHXZ ENDP			; CLordSkillComponent::GetId
_TEXT	ENDS
PUBLIC	?GetTick@CLordSkillComponent@@QAEHXZ		; CLordSkillComponent::GetTick
; Function compile flags: /Ogty
;	COMDAT ?GetTick@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT
?GetTick@CLordSkillComponent@@QAEHXZ PROC NEAR		; CLordSkillComponent::GetTick, COMDAT
; _this$ = ecx

; 30   : 	int		GetTick( void )		{	return m_nTick;		};

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	c3		 ret	 0
?GetTick@CLordSkillComponent@@QAEHXZ ENDP		; CLordSkillComponent::GetTick
_TEXT	ENDS
PUBLIC	?SetTick@CLordSkillComponent@@QAEXH@Z		; CLordSkillComponent::SetTick
; Function compile flags: /Ogty
;	COMDAT ?SetTick@CLordSkillComponent@@QAEXH@Z
_TEXT	SEGMENT
_nTick$ = 8						; size = 4
?SetTick@CLordSkillComponent@@QAEXH@Z PROC NEAR		; CLordSkillComponent::SetTick, COMDAT
; _this$ = ecx

; 31   : 	void	SetTick( int nTick )	{	m_nTick		= nTick;	}

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nTick$[esp-4]
  00004	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00007	c2 04 00	 ret	 4
?SetTick@CLordSkillComponent@@QAEXH@Z ENDP		; CLordSkillComponent::SetTick
_TEXT	ENDS
PUBLIC	??0CLordSkillComponent@@QAE@XZ			; CLordSkillComponent::CLordSkillComponent
PUBLIC	??_7CLordSkillComponent@@6B@			; CLordSkillComponent::`vftable'
PUBLIC	??_GCLordSkillComponent@@UAEPAXI@Z		; CLordSkillComponent::`scalar deleting destructor'
EXTRN	??_ECLordSkillComponent@@UAEPAXI@Z:NEAR		; CLordSkillComponent::`vector deleting destructor'
;	COMDAT ??_7CLordSkillComponent@@6B@
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
CONST	SEGMENT
??_7CLordSkillComponent@@6B@ DD FLAT:??_ECLordSkillComponent@@UAEPAXI@Z ; CLordSkillComponent::`vftable'
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0CLordSkillComponent@@QAE@XZ
_TEXT	SEGMENT
??0CLordSkillComponent@@QAE@XZ PROC NEAR		; CLordSkillComponent::CLordSkillComponent, COMDAT
; _this$ = ecx

; 30   : {

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLordSkillComponent@@6B@
  0000a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0000d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00010	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00013	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00016	89 88 f4 00 00
	00		 mov	 DWORD PTR [eax+244], ecx
  0001c	89 88 f8 00 00
	00		 mov	 DWORD PTR [eax+248], ecx

; 31   : 	*m_szName	= '\0';

  00022	88 48 14	 mov	 BYTE PTR [eax+20], cl

; 32   : 	*m_szDesc	= '\0';

  00025	88 48 34	 mov	 BYTE PTR [eax+52], cl

; 33   : 	*m_szIcon	= '\0';

  00028	88 88 b4 00 00
	00		 mov	 BYTE PTR [eax+180], cl

; 34   : }

  0002e	c3		 ret	 0
??0CLordSkillComponent@@QAE@XZ ENDP			; CLordSkillComponent::CLordSkillComponent
_TEXT	ENDS
PUBLIC	??1CLordSkillComponent@@UAE@XZ			; CLordSkillComponent::~CLordSkillComponent
; Function compile flags: /Ogty
;	COMDAT ??1CLordSkillComponent@@UAE@XZ
_TEXT	SEGMENT
??1CLordSkillComponent@@UAE@XZ PROC NEAR		; CLordSkillComponent::~CLordSkillComponent, COMDAT
; _this$ = ecx

; 37   : {

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CLordSkillComponent@@6B@

; 38   : }

  00006	c3		 ret	 0
??1CLordSkillComponent@@UAE@XZ ENDP			; CLordSkillComponent::~CLordSkillComponent
_TEXT	ENDS
PUBLIC	?Initialize@CLordSkillComponent@@QAEXHHHPBD00HHKKM@Z ; CLordSkillComponent::Initialize
EXTRN	__imp__lstrcpyA@8:NEAR
; Function compile flags: /Ogty
;	COMDAT ?Initialize@CLordSkillComponent@@QAEXHHHPBD00HHKKM@Z
_TEXT	SEGMENT
_nId$ = 8						; size = 4
_nCooltime$ = 12					; size = 4
_nItem$ = 16						; size = 4
_szName$ = 20						; size = 4
_szDesc$ = 24						; size = 4
_szIcon$ = 28						; size = 4
_bPassive$ = 32						; size = 4
_nTargetType$ = 36					; size = 4
_dwSrcSfx$ = 40						; size = 4
_dwDstSfx$ = 44						; size = 4
_fRange$ = 48						; size = 4
?Initialize@CLordSkillComponent@@QAEXHHHPBD00HHKKM@Z PROC NEAR ; CLordSkillComponent::Initialize, COMDAT
; _this$ = ecx

; 44   : 	m_nId	= nId;

  00000	8b 44 24 04	 mov	 eax, DWORD PTR _nId$[esp-4]

; 45   : 	m_nCooltime		= nCooltime;
; 46   : 	m_nItem		= nItem;

  00004	8b 54 24 0c	 mov	 edx, DWORD PTR _nItem$[esp-4]
  00008	56		 push	 esi
  00009	8b f1		 mov	 esi, ecx
  0000b	8b 4c 24 0c	 mov	 ecx, DWORD PTR _nCooltime$[esp]
  0000f	57		 push	 edi

; 47   : 	lstrcpy( m_szName, szName );

  00010	8b 3d 00 00 00
	00		 mov	 edi, DWORD PTR __imp__lstrcpyA@8
  00016	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00019	8b 44 24 18	 mov	 eax, DWORD PTR _szName$[esp+4]
  0001d	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00020	50		 push	 eax
  00021	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00024	51		 push	 ecx
  00025	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00028	ff d7		 call	 edi

; 48   : 	lstrcpy( m_szDesc, szDesc );

  0002a	8b 54 24 1c	 mov	 edx, DWORD PTR _szDesc$[esp+4]
  0002e	52		 push	 edx
  0002f	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  00032	50		 push	 eax
  00033	ff d7		 call	 edi

; 49   : 	lstrcpy( m_szIcon, szIcon );

  00035	8b 4c 24 20	 mov	 ecx, DWORD PTR _szIcon$[esp+4]
  00039	51		 push	 ecx
  0003a	8d 96 b4 00 00
	00		 lea	 edx, DWORD PTR [esi+180]
  00040	52		 push	 edx
  00041	ff d7		 call	 edi

; 50   : 	m_bPassive	= bPassive;

  00043	8b 44 24 24	 mov	 eax, DWORD PTR _bPassive$[esp+4]

; 51   : 	m_nTargetType	= nTargetType;

  00047	8b 4c 24 28	 mov	 ecx, DWORD PTR _nTargetType$[esp+4]
  0004b	5f		 pop	 edi
  0004c	89 86 f4 00 00
	00		 mov	 DWORD PTR [esi+244], eax
  00052	89 8e f8 00 00
	00		 mov	 DWORD PTR [esi+248], ecx
  00058	5e		 pop	 esi

; 52   : #ifdef __CLIENT
; 53   : 	m_dwSrcSfx	= dwSrcSfx;
; 54   : 	m_dwDstSfx	= dwDstSfx;
; 55   : #endif	// __CLIENT
; 56   : #ifndef __DBSERVER
; 57   : 	m_fRange	= fRange;
; 58   : #endif	// __DBSERVER
; 59   : }

  00059	c2 2c 00	 ret	 44			; 0000002cH
?Initialize@CLordSkillComponent@@QAEXHHHPBD00HHKKM@Z ENDP ; CLordSkillComponent::Initialize
_TEXT	ENDS
PUBLIC	?Tick@CLordSkillComponent@@QAEHXZ		; CLordSkillComponent::Tick
; Function compile flags: /Ogty
;	COMDAT ?Tick@CLordSkillComponent@@QAEHXZ
_TEXT	SEGMENT
?Tick@CLordSkillComponent@@QAEHXZ PROC NEAR		; CLordSkillComponent::Tick, COMDAT
; _this$ = ecx

; 72   : 	return 0;

  00000	33 c0		 xor	 eax, eax

; 73   : }

  00002	c3		 ret	 0
?Tick@CLordSkillComponent@@QAEHXZ ENDP			; CLordSkillComponent::Tick
_TEXT	ENDS
PUBLIC	?size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::size, COMDAT
; _this$ = ecx

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L188051
  00007	33 c0		 xor	 eax, eax

; 517  : 		}

  00009	c3		 ret	 0
$L188051:

; 516  : 		return (_Myfirst == 0 ? 0 : _Mylast - _Myfirst);

  0000a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 517  : 		}

  00012	c3		 ret	 0
?size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::size
_TEXT	ENDS
PUBLIC	??Eiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator++
; Function compile flags: /Ogty
;	COMDAT ??Eiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@XZ
_TEXT	SEGMENT
??Eiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator++, COMDAT
; _this$ = ecx

; 229  : 			{	// preincrement

  00000	8b c1		 mov	 eax, ecx

; 230  : 			++this->_Myptr;

  00002	83 00 04	 add	 DWORD PTR [eax], 4

; 231  : 			return (*this);
; 232  : 			}

  00005	c3		 ret	 0
??Eiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator++
_TEXT	ENDS
PUBLIC	?capacity@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::capacity
; Function compile flags: /Ogty
;	COMDAT ?capacity@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::capacity, COMDAT
; _this$ = ecx

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  00000	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00003	85 d2		 test	 edx, edx
  00005	75 03		 jne	 SHORT $L188057
  00007	33 c0		 xor	 eax, eax

; 459  : 		}

  00009	c3		 ret	 0
$L188057:

; 458  : 		return (_Myfirst == 0 ? 0 : _Myend - _Myfirst);

  0000a	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0000d	2b c2		 sub	 eax, edx
  0000f	c1 f8 02	 sar	 eax, 2

; 459  : 		}

  00012	c3		 ret	 0
?capacity@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::capacity
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@XZ ; std::allocator<CLordSkillComponentExecutable *>::allocator<CLordSkillComponentExecutable *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@XZ PROC NEAR ; std::allocator<CLordSkillComponentExecutable *>::allocator<CLordSkillComponentExecutable *>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@XZ ENDP ; std::allocator<CLordSkillComponentExecutable *>::allocator<CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	??Dconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEABQAVCLordSkillComponentExecutable@@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator*
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Dconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEABQAVCLordSkillComponentExecutable@@XZ
_TEXT	SEGMENT
??Dconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEABQAVCLordSkillComponentExecutable@@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator*, COMDAT
; _this$ = ecx

; 80   : 
; 81   : 
; 82   : 			return (*_Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 83   : 			}

  00002	c3		 ret	 0
??Dconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEABQAVCLordSkillComponentExecutable@@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator*
_TEXT	ENDS
PUBLIC	??8const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator==
; Function compile flags: /Ogty
;	COMDAT ??8const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator==, COMDAT
; _this$ = ecx

; 153  : 
; 154  : 
; 155  : 			return (_Myptr == _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	f7 d8		 neg	 eax
  0000a	1b c0		 sbb	 eax, eax
  0000c	40		 inc	 eax

; 156  : 			}

  0000d	c2 04 00	 ret	 4
??8const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator==
_TEXT	ENDS
PUBLIC	??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@ABV01@@Z ; std::allocator<CLordSkillComponentExecutable *>::allocator<CLordSkillComponentExecutable *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@ABV01@@Z PROC NEAR ; std::allocator<CLordSkillComponentExecutable *>::allocator<CLordSkillComponentExecutable *>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<CLordSkillComponentExecutable *>::allocator<CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEXPAPAVCLordSkillComponentExecutable@@I@Z ; std::allocator<CLordSkillComponentExecutable *>::deallocate
EXTRN	??3@YAXPAX@Z:NEAR				; operator delete
; Function compile flags: /Ogty
;	COMDAT ?deallocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEXPAPAVCLordSkillComponentExecutable@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEXPAPAVCLordSkillComponentExecutable@@I@Z PROC NEAR ; std::allocator<CLordSkillComponentExecutable *>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEXPAPAVCLordSkillComponentExecutable@@I@Z ENDP ; std::allocator<CLordSkillComponentExecutable *>::deallocate
_TEXT	ENDS
PUBLIC	??0const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::const_iterator
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??0const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::const_iterator, COMDAT
; _this$ = ecx

; 73   : 		const_iterator(_Tptr _Ptr)

  00000	8b c1		 mov	 eax, ecx

; 74   : 			{	// construct with pointer _Ptr
; 75   : 			_Myptr = _Ptr;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 76   : 			}

  00008	c2 04 00	 ret	 4
??0const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::const_iterator
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QBEIXZ ; std::allocator<CLordSkillComponentExecutable *>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QBEIXZ PROC NEAR ; std::allocator<CLordSkillComponentExecutable *>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 159  : 		}

  00005	c3		 ret	 0
?max_size@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QBEIXZ ENDP ; std::allocator<CLordSkillComponentExecutable *>::max_size
_TEXT	ENDS
PUBLIC	??Yiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@H@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator+=
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Yiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Yiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@H@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator+=, COMDAT
; _this$ = ecx

; 255  : 			{	// increment by integer

  00000	8b c1		 mov	 eax, ecx

; 256  : 			this->_Myptr += _Off;

  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR [ecx*4]
  0000d	01 10		 add	 DWORD PTR [eax], edx

; 257  : 			return (*this);
; 258  : 			}

  0000f	c2 04 00	 ret	 4
??Yiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEAAV012@H@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator+=
_TEXT	ENDS
PUBLIC	??Gconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABV012@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Gconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Gconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABV012@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator-, COMDAT
; _this$ = ecx

; 141  : 
; 142  : 
; 143  : 			return (_Myptr - _Right._Myptr);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 144  : 			}

  0000b	c2 04 00	 ret	 4
??Gconst_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABV012@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator-
_TEXT	ENDS
PUBLIC	??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z ; std::fill<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z PROC NEAR ; std::fill<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable *>, COMDAT

; 1135 : 	for (; _First != _Last; ++_First)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8b 4c 24 08	 mov	 ecx, DWORD PTR __Last$[esp-4]
  00008	3b c1		 cmp	 eax, ecx
  0000a	74 11		 je	 SHORT $L187769
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L187767:

; 1136 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	3b c1		 cmp	 eax, ecx
  0001a	75 f5		 jne	 SHORT $L187767
  0001c	5e		 pop	 esi
$L187769:

; 1137 : 	}

  0001d	c3		 ret	 0
??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z ENDP ; std::fill<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	??$_Allocate@PAVCLordSkillComponentExecutable@@@std@@YAPAPAVCLordSkillComponentExecutable@@IPAPAV1@@Z ; std::_Allocate<CLordSkillComponentExecutable *>
EXTRN	??2@YAPAXI@Z:NEAR				; operator new
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Allocate@PAVCLordSkillComponentExecutable@@@std@@YAPAPAVCLordSkillComponentExecutable@@IPAPAV1@@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@PAVCLordSkillComponentExecutable@@@std@@YAPAPAVCLordSkillComponentExecutable@@IPAPAV1@@Z PROC NEAR ; std::_Allocate<CLordSkillComponentExecutable *>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 35   : 	}

  00014	c3		 ret	 0
??$_Allocate@PAVCLordSkillComponentExecutable@@@std@@YAPAPAVCLordSkillComponentExecutable@@IPAPAV1@@Z ENDP ; std::_Allocate<CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	??$_Ptr_cat@VCLordSkillComponentExecutable@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLordSkillComponentExecutable@@0@Z ; std::_Ptr_cat<CLordSkillComponentExecutable>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Ptr_cat@VCLordSkillComponentExecutable@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLordSkillComponentExecutable@@0@Z
_TEXT	SEGMENT
__Cat$ = -1						; size = 1
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_cat@VCLordSkillComponentExecutable@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLordSkillComponentExecutable@@0@Z PROC NEAR ; std::_Ptr_cat<CLordSkillComponentExecutable>, COMDAT

; 218  : 	{	// return pointer category from pointer to pointer arguments

  00000	51		 push	 ecx

; 219  : 	_Scalar_ptr_iterator_tag _Cat;
; 220  : 	return (_Cat);

  00001	8a 44 24 03	 mov	 al, BYTE PTR __Cat$[esp+4]

; 221  : 	}

  00005	59		 pop	 ecx
  00006	c3		 ret	 0
??$_Ptr_cat@VCLordSkillComponentExecutable@@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVCLordSkillComponentExecutable@@0@Z ENDP ; std::_Ptr_cat<CLordSkillComponentExecutable>
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Destroy_range<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Destroy_range<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT

; 234  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Destroy_range<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	??$_Copy_backward_opt@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ; std::_Copy_backward_opt<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>
EXTRN	_memmove:NEAR
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$_Copy_backward_opt@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Copy_backward_opt@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Copy_backward_opt<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>, COMDAT

; 1059 : 	ptrdiff_t _Off = _Last - _First;	// NB: non-overlapping move

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2

; 1060 : 	return ((_OutIt)memmove(&*_Dest - _Off, &*_First,
; 1061 : 		_Off * sizeof (*_First)));

  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1062 : 	}

  00021	c3		 ret	 0
??$_Copy_backward_opt@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Copy_backward_opt<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>
_TEXT	ENDS
PUBLIC	??$fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@@Z ; std::fill_n<CLordSkillComponentExecutable * *,unsigned int,CLordSkillComponentExecutable *>
; Function compile flags: /Ogty
;	COMDAT ??$fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
??$fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@@Z PROC NEAR ; std::fill_n<CLordSkillComponentExecutable * *,unsigned int,CLordSkillComponentExecutable *>, COMDAT

; 1160 : 	for (; 0 < _Count; --_Count, ++_First)

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	76 14		 jbe	 SHORT $L187864
  00008	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  0000c	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00010	56		 push	 esi
$L187862:

; 1161 : 		*_First = _Val;

  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L187862
  0001b	5e		 pop	 esi
$L187864:

; 1162 : 	}

  0001c	c3		 ret	 0
??$fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@@Z ENDP ; std::fill_n<CLordSkillComponentExecutable * *,unsigned int,CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	??$_Uninit_copy@PAVCLordSkillComponentExecutable@@PAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_copy<CLordSkillComponentExecutable *,CLordSkillComponentExecutable *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_copy@PAVCLordSkillComponentExecutable@@PAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_copy@PAVCLordSkillComponentExecutable@@PAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_copy<CLordSkillComponentExecutable *,CLordSkillComponentExecutable *>, COMDAT

; 106  : 	size_t _Count = (size_t)(_Last - _First);

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2

; 107  : 	return ((_Ty2 *)memmove(&*_Dest, &*_First,
; 108  : 		_Count * sizeof (*_First)) + _Count);	// NB: non-overlapping move

  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 109  : 	}

  00027	c3		 ret	 0
??$_Uninit_copy@PAVCLordSkillComponentExecutable@@PAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_copy<CLordSkillComponentExecutable *,CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC NEAR	; std::char_traits<char>::assign, COMDAT

; 331  : 		_Left = _Right;

  00000	8b 44 24 08	 mov	 eax, DWORD PTR __Right$[esp-4]
  00004	8a 08		 mov	 cl, BYTE PTR [eax]
  00006	8b 54 24 04	 mov	 edx, DWORD PTR __Left$[esp-4]
  0000a	88 0a		 mov	 BYTE PTR [edx], cl

; 332  : 		}

  0000c	c3		 ret	 0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
PUBLIC	?length@?$char_traits@D@std@@SAIPBD@Z		; std::char_traits<char>::length
; Function compile flags: /Ogty
;	COMDAT ?length@?$char_traits@D@std@@SAIPBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIPBD@Z PROC NEAR		; std::char_traits<char>::length, COMDAT

; 352  : 		return (::strlen(_First));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  00004	8d 50 01	 lea	 edx, DWORD PTR [eax+1]
$L188101:
  00007	8a 08		 mov	 cl, BYTE PTR [eax]
  00009	40		 inc	 eax
  0000a	84 c9		 test	 cl, cl
  0000c	75 f9		 jne	 SHORT $L188101
  0000e	2b c2		 sub	 eax, edx

; 353  : 		}

  00010	c3		 ret	 0
?length@?$char_traits@D@std@@SAIPBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
PUBLIC	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::copy
; Function compile flags: /Ogty
;	COMDAT ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::copy, COMDAT

; 358  : 		return ((_Elem *)::memcpy(_First1, _First2, _Count));

  00000	8b 4c 24 0c	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	56		 push	 esi
  00005	8b 74 24 0c	 mov	 esi, DWORD PTR __First2$[esp]
  00009	57		 push	 edi
  0000a	8b 7c 24 0c	 mov	 edi, DWORD PTR __First1$[esp+4]
  0000e	8b c1		 mov	 eax, ecx
  00010	8b d7		 mov	 edx, edi
  00012	c1 e9 02	 shr	 ecx, 2
  00015	f3 a5		 rep movsd
  00017	8b c8		 mov	 ecx, eax
  00019	83 e1 03	 and	 ecx, 3
  0001c	f3 a4		 rep movsb
  0001e	5f		 pop	 edi
  0001f	8b c2		 mov	 eax, edx
  00021	5e		 pop	 esi

; 359  : 		}

  00022	c3		 ret	 0
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
PUBLIC	?move@?$char_traits@D@std@@SAPADPADPBDI@Z	; std::char_traits<char>::move
; Function compile flags: /Ogty
;	COMDAT ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC NEAR	; std::char_traits<char>::move, COMDAT

; 370  : 		return ((_Elem *)::memmove(_First1, _First2, _Count));

  00000	e9 00 00 00 00	 jmp	 _memmove
?move@?$char_traits@D@std@@SAPADPADPBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
PUBLIC	?IsStoring@CAr@@QBEHXZ				; CAr::IsStoring
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\include\ar.h
;	COMDAT ?IsStoring@CAr@@QBEHXZ
_TEXT	SEGMENT
?IsStoring@CAr@@QBEHXZ PROC NEAR			; CAr::IsStoring, COMDAT
; _this$ = ecx

; 96   : 	{ return (m_nMode & CAr::load) == 0; }

  00000	33 c0		 xor	 eax, eax
  00002	8a 01		 mov	 al, BYTE PTR [ecx]
  00004	f7 d0		 not	 eax
  00006	83 e0 01	 and	 eax, 1
  00009	c3		 ret	 0
?IsStoring@CAr@@QBEHXZ ENDP				; CAr::IsStoring
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@J@Z				; CAr::operator<<
EXTRN	?CheckBuf@CAr@@QAEXI@Z:NEAR			; CAr::CheckBuf
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@J@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??6CAr@@QAEAAV0@J@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 113  : 	{ CheckBuf( sizeof(LONG) );

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf

; 114  : 		*(UNALIGNED LONG*)m_lpBufCur = l; m_lpBufCur += sizeof(LONG); return *this; }

  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _l$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@J@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAJ@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAJ@Z
_TEXT	SEGMENT
_l$ = 8							; size = 4
??5CAr@@QAEAAV0@AAJ@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 152  : 	{	CAR_SAFE_READ( LONG, l );	}

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L162898
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _l$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L162898:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _l$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAJ@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size, COMDAT
; _this$ = ecx

; 1109 : 		return (_Mysize);

  00000	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]

; 1110 : 		}

  00003	c3		 ret	 0
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::size
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L188117
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  00009	c3		 ret	 0
$L188117:

; 1537 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1538 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC NEAR			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 111  : 	allocator()

  00000	8b c1		 mov	 eax, ecx

; 112  : 		{	// construct default allocator (do nothing)
; 113  : 		}

  00002	c3		 ret	 0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
; Function compile flags: /Ogty
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC NEAR		; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 115  : 	allocator(const allocator<_Ty>&)

  00000	8b c1		 mov	 eax, ecx

; 116  : 		{	// construct by copying (do nothing)
; 117  : 		}

  00002	c2 04 00	 ret	 4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
PUBLIC	?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L188125
  00006	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  00009	c3		 ret	 0
$L188125:

; 1532 : 		return (_BUF_SIZE <= _Myres ? _Bx._Ptr : _Bx._Buf);

  0000a	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]

; 1533 : 		}

  0000d	c3		 ret	 0
?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Myptr
_TEXT	ENDS
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
___formal$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC NEAR	; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 132  : 		operator delete(_Ptr);

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Ptr$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0000a	59		 pop	 ecx

; 133  : 		}

  0000b	c2 08 00	 ret	 8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 1494 : 		{	// test if _Ptr points inside string

  00000	56		 push	 esi

; 1495 : 		if (_Ptr < _Myptr() || _Myptr() + _Mysize <= _Ptr)

  00001	8b 71 18	 mov	 esi, DWORD PTR [ecx+24]
  00004	83 fe 10	 cmp	 esi, 16			; 00000010H
  00007	57		 push	 edi
  00008	8d 41 04	 lea	 eax, DWORD PTR [ecx+4]
  0000b	72 04		 jb	 SHORT $L188136
  0000d	8b 10		 mov	 edx, DWORD PTR [eax]
  0000f	eb 02		 jmp	 SHORT $L188137
$L188136:
  00011	8b d0		 mov	 edx, eax
$L188137:
  00013	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  00017	3b fa		 cmp	 edi, edx
  00019	72 17		 jb	 SHORT $L185560
  0001b	83 fe 10	 cmp	 esi, 16			; 00000010H
  0001e	72 02		 jb	 SHORT $L188144
  00020	8b 00		 mov	 eax, DWORD PTR [eax]
$L188144:
  00022	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  00025	03 c8		 add	 ecx, eax
  00027	3b cf		 cmp	 ecx, edi
  00029	76 07		 jbe	 SHORT $L185560
  0002b	5f		 pop	 edi

; 1497 : 		else
; 1498 : 			return (true);

  0002c	b0 01		 mov	 al, 1
  0002e	5e		 pop	 esi

; 1499 : 		}

  0002f	c2 04 00	 ret	 4
$L185560:
  00032	5f		 pop	 edi

; 1496 : 			return (false);	// don't ask

  00033	32 c0		 xor	 al, al
  00035	5e		 pop	 esi

; 1499 : 		}

  00036	c2 04 00	 ret	 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC NEAR		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 157  : 		_SIZT _Count = (_SIZT)(-1) / sizeof (_Ty);
; 158  : 		return (0 < _Count ? _Count : 1);

  00000	83 c8 ff	 or	 eax, -1

; 159  : 		}

  00003	c3		 ret	 0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
PUBLIC	??$_Allocate@D@std@@YAPADIPAD@Z			; std::_Allocate<char>
; Function compile flags: /Ogty
;	COMDAT ??$_Allocate@D@std@@YAPADIPAD@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Allocate@D@std@@YAPADIPAD@Z PROC NEAR		; std::_Allocate<char>, COMDAT

; 34   : 	return ((_Ty _FARQ *)operator new(_Count * sizeof (_Ty)));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 35   : 	}

  0000d	c3		 ret	 0
??$_Allocate@D@std@@YAPADIPAD@Z ENDP			; std::_Allocate<char>
_TEXT	ENDS
PUBLIC	??0CLordSkillComponentExecutable@@QAE@XZ	; CLordSkillComponentExecutable::CLordSkillComponentExecutable
PUBLIC	?Execute@CLordSkillComponentExecutable@@UAEXKKPAX@Z ; CLordSkillComponentExecutable::Execute
PUBLIC	??_7CLordSkillComponentExecutable@@6B@		; CLordSkillComponentExecutable::`vftable'
PUBLIC	??_GCLordSkillComponentExecutable@@UAEPAXI@Z	; CLordSkillComponentExecutable::`scalar deleting destructor'
EXTRN	??_ECLordSkillComponentExecutable@@UAEPAXI@Z:NEAR ; CLordSkillComponentExecutable::`vector deleting destructor'
;	COMDAT ??_7CLordSkillComponentExecutable@@6B@
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
CONST	SEGMENT
??_7CLordSkillComponentExecutable@@6B@ DD FLAT:??_ECLordSkillComponentExecutable@@UAEPAXI@Z ; CLordSkillComponentExecutable::`vftable'
	DD	FLAT:?Execute@CLordSkillComponentExecutable@@UAEXKKPAX@Z
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.h
CONST	ENDS
;	COMDAT ??0CLordSkillComponentExecutable@@QAE@XZ
_TEXT	SEGMENT
??0CLordSkillComponentExecutable@@QAE@XZ PROC NEAR	; CLordSkillComponentExecutable::CLordSkillComponentExecutable, COMDAT
; _this$ = ecx

; 67   : 	CLordSkillComponentExecutable() : CLordSkillComponent()	{}

  00000	8b c1		 mov	 eax, ecx
  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0000d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00010	89 88 f4 00 00
	00		 mov	 DWORD PTR [eax+244], ecx
  00016	89 88 f8 00 00
	00		 mov	 DWORD PTR [eax+248], ecx
  0001c	88 48 14	 mov	 BYTE PTR [eax+20], cl
  0001f	88 48 34	 mov	 BYTE PTR [eax+52], cl
  00022	88 88 b4 00 00
	00		 mov	 BYTE PTR [eax+180], cl
  00028	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLordSkillComponentExecutable@@6B@
  0002e	c3		 ret	 0
??0CLordSkillComponentExecutable@@QAE@XZ ENDP		; CLordSkillComponentExecutable::CLordSkillComponentExecutable
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?Execute@CLordSkillComponentExecutable@@UAEXKKPAX@Z
_TEXT	SEGMENT
_idPlayer$ = 8						; size = 4
_idTarget$ = 12						; size = 4
_pParam$ = 16						; size = 4
?Execute@CLordSkillComponentExecutable@@UAEXKKPAX@Z PROC NEAR ; CLordSkillComponentExecutable::Execute, COMDAT
; _this$ = ecx

; 72   : 	virtual	void	Execute( u_long idPlayer, u_long idTarget, VOID* pParam )	{	Use();	}

  00000	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00003	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00006	c2 0c 00	 ret	 12			; 0000000cH
?Execute@CLordSkillComponentExecutable@@UAEXKKPAX@Z ENDP ; CLordSkillComponentExecutable::Execute
_TEXT	ENDS
PUBLIC	??1CLordSkillComponentExecutable@@UAE@XZ	; CLordSkillComponentExecutable::~CLordSkillComponentExecutable
; Function compile flags: /Ogty
;	COMDAT ??_GCLordSkillComponentExecutable@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLordSkillComponentExecutable@@UAEPAXI@Z PROC NEAR	; CLordSkillComponentExecutable::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CLordSkillComponentExecutable@@UAE@XZ ; CLordSkillComponentExecutable::~CLordSkillComponentExecutable
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L188175
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L188175:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCLordSkillComponentExecutable@@UAEPAXI@Z ENDP	; CLordSkillComponentExecutable::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1CLordSkillComponentExecutable@@UAE@XZ
_TEXT	SEGMENT
??1CLordSkillComponentExecutable@@UAE@XZ PROC NEAR	; CLordSkillComponentExecutable::~CLordSkillComponentExecutable, COMDAT
; _this$ = ecx

; 68   : 	virtual	~CLordSkillComponentExecutable()	{}

  00000	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], OFFSET FLAT:??_7CLordSkillComponent@@6B@
  00006	c3		 ret	 0
??1CLordSkillComponentExecutable@@UAE@XZ ENDP		; CLordSkillComponentExecutable::~CLordSkillComponentExecutable
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCLordSkillComponent@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLordSkillComponent@@UAEPAXI@Z PROC NEAR		; CLordSkillComponent::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	f6 44 24 04 01	 test	 BYTE PTR ___flags$[esp-4], 1
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CLordSkillComponent@@6B@
  0000e	74 09		 je	 SHORT $L188187
  00010	56		 push	 esi
  00011	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00016	83 c4 04	 add	 esp, 4
$L188187:
  00019	8b c6		 mov	 eax, esi
  0001b	5e		 pop	 esi
  0001c	c2 04 00	 ret	 4
??_GCLordSkillComponent@@UAEPAXI@Z ENDP			; CLordSkillComponent::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?CreateSkillComponent@CLordSkill@@UAEPAVCLordSkillComponentExecutable@@H@Z ; CLordSkill::CreateSkillComponent
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
;	COMDAT ?CreateSkillComponent@CLordSkill@@UAEPAVCLordSkillComponentExecutable@@H@Z
_TEXT	SEGMENT
_nType$ = 8						; size = 4
?CreateSkillComponent@CLordSkill@@UAEPAVCLordSkillComponentExecutable@@H@Z PROC NEAR ; CLordSkill::CreateSkillComponent, COMDAT
; _this$ = ecx

; 111  : 	return new CLordSkillComponentExecutable;

  00000	68 fc 00 00 00	 push	 252			; 000000fcH
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	33 c9		 xor	 ecx, ecx
  0000c	83 c4 04	 add	 esp, 4
  0000f	3b c1		 cmp	 eax, ecx
  00011	74 2d		 je	 SHORT $L188192
  00013	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00016	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00019	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  0001c	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  0001f	89 88 f4 00 00
	00		 mov	 DWORD PTR [eax+244], ecx
  00025	89 88 f8 00 00
	00		 mov	 DWORD PTR [eax+248], ecx
  0002b	88 48 14	 mov	 BYTE PTR [eax+20], cl
  0002e	88 48 34	 mov	 BYTE PTR [eax+52], cl
  00031	88 88 b4 00 00
	00		 mov	 BYTE PTR [eax+180], cl
  00037	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLordSkillComponentExecutable@@6B@

; 112  : }

  0003d	c2 04 00	 ret	 4
$L188192:

; 111  : 	return new CLordSkillComponentExecutable;

  00040	33 c0		 xor	 eax, eax

; 112  : }

  00042	c2 04 00	 ret	 4
?CreateSkillComponent@CLordSkill@@UAEPAVCLordSkillComponentExecutable@@H@Z ENDP ; CLordSkill::CreateSkillComponent
_TEXT	ENDS
PUBLIC	??Diterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEAAPAVCLordSkillComponentExecutable@@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator*
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Diterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEAAPAVCLordSkillComponentExecutable@@XZ
_TEXT	SEGMENT
??Diterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEAAPAVCLordSkillComponentExecutable@@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator*, COMDAT
; _this$ = ecx

; 220  : 			return ((reference)**(const_iterator *)this);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]

; 221  : 			}

  00002	c3		 ret	 0
??Diterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEAAPAVCLordSkillComponentExecutable@@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator*
_TEXT	ENDS
PUBLIC	??9const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator!=
; Function compile flags: /Ogty
;	COMDAT ??9const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator!=, COMDAT
; _this$ = ecx

; 160  : 			return (!(*this == _Right));

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 54 24 04	 mov	 edx, DWORD PTR __Right$[esp-4]
  00006	56		 push	 esi
  00007	8b 32		 mov	 esi, DWORD PTR [edx]
  00009	33 c9		 xor	 ecx, ecx
  0000b	3b c6		 cmp	 eax, esi
  0000d	0f 95 c1	 setne	 cl
  00010	8a c1		 mov	 al, cl
  00012	5e		 pop	 esi

; 161  : 			}

  00013	c2 04 00	 ret	 4
??9const_iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE_NABV012@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::const_iterator::operator!=
_TEXT	ENDS
PUBLIC	??0?$_Vector_val@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE@V?$allocator@PAVCLordSkillComponentExecutable@@@1@@Z ; std::_Vector_val<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Vector_val<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$_Vector_val@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE@V?$allocator@PAVCLordSkillComponentExecutable@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_Vector_val@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE@V?$allocator@PAVCLordSkillComponentExecutable@@@1@@Z PROC NEAR ; std::_Vector_val<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Vector_val<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT
; _this$ = ecx

; 21   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 22   : 		}

  00002	c2 04 00	 ret	 4
??0?$_Vector_val@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE@V?$allocator@PAVCLordSkillComponentExecutable@@@1@@Z ENDP ; std::_Vector_val<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Vector_val<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	??0iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::iterator
; Function compile flags: /Ogty
;	COMDAT ??0iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::iterator, COMDAT
; _this$ = ecx

; 215  : 			{	// construct with pointer _Ptr

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Ptr$[esp-4]
  00006	89 08		 mov	 DWORD PTR [eax], ecx

; 216  : 			}

  00008	c2 04 00	 ret	 4
??0iterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@PAPAVCLordSkillComponentExecutable@@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::iterator
_TEXT	ENDS
PUBLIC	?max_size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::max_size, COMDAT
; _this$ = ecx

; 521  : 		return (this->_Alval.max_size());

  00000	b8 ff ff ff 3f	 mov	 eax, 1073741823		; 3fffffffH

; 522  : 		}

  00005	c3		 ret	 0
?max_size@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEIXZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEPAPAVCLordSkillComponentExecutable@@I@Z ; std::allocator<CLordSkillComponentExecutable *>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEPAPAVCLordSkillComponentExecutable@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEPAPAVCLordSkillComponentExecutable@@I@Z PROC NEAR ; std::allocator<CLordSkillComponentExecutable *>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR [eax*4]
  0000b	51		 push	 ecx
  0000c	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00011	83 c4 04	 add	 esp, 4

; 138  : 		}

  00014	c2 04 00	 ret	 4
?allocate@?$allocator@PAVCLordSkillComponentExecutable@@@std@@QAEPAPAVCLordSkillComponentExecutable@@I@Z ENDP ; std::allocator<CLordSkillComponentExecutable *>::allocate
_TEXT	ENDS
PUBLIC	??Hiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE?AV012@H@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator+
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??Hiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE?AV012@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??Hiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE?AV012@H@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator+, COMDAT
; _this$ = ecx

; 262  : 			iterator _Tmp = *this;
; 263  : 			return (_Tmp += _Off);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 08	 mov	 ecx, DWORD PTR __Off$[esp-4]
  00006	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  00009	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  0000d	89 10		 mov	 DWORD PTR [eax], edx

; 264  : 			}

  0000f	c2 08 00	 ret	 8
??Hiterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBE?AV012@H@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator+
_TEXT	ENDS
PUBLIC	??Giterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABVconst_iterator@12@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator-
; Function compile flags: /Ogty
;	COMDAT ??Giterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABVconst_iterator@12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??Giterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABVconst_iterator@12@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator-, COMDAT
; _this$ = ecx

; 279  : 			return ((const_iterator)*this - _Right);

  00000	8b 01		 mov	 eax, DWORD PTR [ecx]
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR __Right$[esp-4]
  00006	2b 01		 sub	 eax, DWORD PTR [ecx]
  00008	c1 f8 02	 sar	 eax, 2

; 280  : 			}

  0000b	c2 04 00	 ret	 4
??Giterator@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QBEHABVconst_iterator@12@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::iterator::operator-
_TEXT	ENDS
PUBLIC	??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z ; std::_Destroy_range<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z PROC NEAR ; std::_Destroy_range<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT

; 217  : 	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
; 218  : 	}

  00000	c3		 ret	 0
??$_Destroy_range@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@0AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z ENDP ; std::_Destroy_range<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	??$copy_backward@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00@Z ; std::copy_backward<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xutility
;	COMDAT ??$copy_backward@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$copy_backward@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00@Z PROC NEAR ; std::copy_backward<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>, COMDAT

; 1068 : 	return (_Copy_backward_opt(_First, _Last, _Dest,
; 1069 : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	c1 f8 02	 sar	 eax, 2
  0000d	c1 e0 02	 shl	 eax, 2
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	8b 4c 24 14	 mov	 ecx, DWORD PTR __Dest$[esp+4]
  00016	2b c8		 sub	 ecx, eax
  00018	51		 push	 ecx
  00019	e8 00 00 00 00	 call	 _memmove
  0001e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1070 : 	}

  00021	c3		 ret	 0
??$copy_backward@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00@Z ENDP ; std::copy_backward<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>
_TEXT	ENDS
PUBLIC	??$_Uninit_fill_n@PAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z ; std::_Uninit_fill_n<CLordSkillComponentExecutable *,unsigned int,CLordSkillComponentExecutable *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninit_fill_n@PAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
??$_Uninit_fill_n@PAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC NEAR ; std::_Uninit_fill_n<CLordSkillComponentExecutable *,unsigned int,CLordSkillComponentExecutable *>, COMDAT

; 237  : 	fill_n(_First, _Count, _Val);

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L188277
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L188275:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L188275
  0001b	5e		 pop	 esi
$L188277:

; 238  : 	}

  0001c	c3		 ret	 0
??$_Uninit_fill_n@PAVCLordSkillComponentExecutable@@IPAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@U_Scalar_ptr_iterator_tag@0@@Z ENDP ; std::_Uninit_fill_n<CLordSkillComponentExecutable *,unsigned int,CLordSkillComponentExecutable *>
_TEXT	ENDS
PUBLIC	??$_Uninitialized_copy@PAPAVCLordSkillComponentExecutable@@PAPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z ; std::_Uninitialized_copy<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
;	COMDAT ??$_Uninitialized_copy@PAPAVCLordSkillComponentExecutable@@PAPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAVCLordSkillComponentExecutable@@PAPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z PROC NEAR ; std::_Uninitialized_copy<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT

; 127  : 	return (_Uninit_copy(_First, _Last, _Dest, _Al,
; 128  : 		_Ptr_cat(_First, _Dest)));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Dest$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 129  : 	}

  00027	c3		 ret	 0
??$_Uninitialized_copy@PAPAVCLordSkillComponentExecutable@@PAPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z ENDP ; std::_Uninitialized_copy<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@H@Z				; CAr::operator<<
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_network\misc\include\ar.h
;	COMDAT ??6CAr@@QAEAAV0@H@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??6CAr@@QAEAAV0@H@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 99   : 	{ return CAr::operator<<((LONG)i); }

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _i$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@H@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??6CAr@@QAEAAV0@I@Z				; CAr::operator<<
; Function compile flags: /Ogty
;	COMDAT ??6CAr@@QAEAAV0@I@Z
_TEXT	SEGMENT
_u$ = 8							; size = 4
??6CAr@@QAEAAV0@I@Z PROC NEAR				; CAr::operator<<, COMDAT
; _this$ = ecx

; 101  : 	{ return CAr::operator<<((LONG)u); }

  00000	56		 push	 esi
  00001	6a 04		 push	 4
  00003	8b f1		 mov	 esi, ecx
  00005	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0000a	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0000d	8b 4c 24 08	 mov	 ecx, DWORD PTR _u$[esp]
  00011	89 08		 mov	 DWORD PTR [eax], ecx
  00013	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00017	8b c6		 mov	 eax, esi
  00019	5e		 pop	 esi
  0001a	c2 04 00	 ret	 4
??6CAr@@QAEAAV0@I@Z ENDP				; CAr::operator<<
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAH@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAH@Z
_TEXT	SEGMENT
_i$ = 8							; size = 4
??5CAr@@QAEAAV0@AAH@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 126  : 	{ return CAr::operator>>((LONG&)i); }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L188308
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _i$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L188308:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _i$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAH@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	??5CAr@@QAEAAV0@AAI@Z				; CAr::operator>>
; Function compile flags: /Ogty
;	COMDAT ??5CAr@@QAEAAV0@AAI@Z
_TEXT	SEGMENT
_u$ = 8							; size = 4
??5CAr@@QAEAAV0@AAI@Z PROC NEAR				; CAr::operator>>, COMDAT
; _this$ = ecx

; 128  : 	{ return CAr::operator>>((LONG&)u); }

  00000	8b c1		 mov	 eax, ecx
  00002	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00005	56		 push	 esi
  00006	8b 70 0c	 mov	 esi, DWORD PTR [eax+12]
  00009	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  0000c	3b d6		 cmp	 edx, esi
  0000e	5e		 pop	 esi
  0000f	77 0f		 ja	 SHORT $L188315
  00011	8b 09		 mov	 ecx, DWORD PTR [ecx]
  00013	8b 54 24 04	 mov	 edx, DWORD PTR _u$[esp-4]
  00017	89 0a		 mov	 DWORD PTR [edx], ecx
  00019	83 40 08 04	 add	 DWORD PTR [eax+8], 4
  0001d	c2 04 00	 ret	 4
$L188315:
  00020	8b 4c 24 04	 mov	 ecx, DWORD PTR _u$[esp-4]
  00024	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  0002a	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0002d	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00030	c2 04 00	 ret	 4
??5CAr@@QAEAAV0@AAI@Z ENDP				; CAr::operator>>
_TEXT	ENDS
PUBLIC	??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 1
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z PROC NEAR ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >, COMDAT
; _this$ = ecx

; 34   : 		{	// construct allocator from _Al

  00000	8b c1		 mov	 eax, ecx

; 35   : 		}

  00002	c2 04 00	 ret	 4
??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z ENDP ; std::_String_val<char,std::allocator<char> >::_String_val<char,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
; Function compile flags: /Ogty
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

  00000	83 79 18 10	 cmp	 DWORD PTR [ecx+24], 16	; 00000010H
  00004	8b 44 24 04	 mov	 eax, DWORD PTR __Newsize$[esp-4]
  00008	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  0000b	72 0a		 jb	 SHORT $L188331
  0000d	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00010	c6 04 01 00	 mov	 BYTE PTR [ecx+eax], 0

; 1476 : 		}

  00014	c2 04 00	 ret	 4

; 1475 : 		_Traits::assign(_Myptr()[_Mysize = _Newsize], _Elem());

$L188331:
  00017	c6 44 01 04 00	 mov	 BYTE PTR [ecx+eax+4], 0

; 1476 : 		}

  0001c	c2 04 00	 ret	 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
; Function compile flags: /Ogty
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1114 : 		size_type _Num = _Mybase::_Alval.max_size();
; 1115 : 		return (_Num <= 1 ? 1 : _Num - 1);

  00000	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH

; 1116 : 		}

  00005	c3		 ret	 0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC NEAR	; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 137  : 		return (_Allocate(_Count, (pointer)0));

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Count$[esp-4]
  00004	50		 push	 eax
  00005	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  0000a	83 c4 04	 add	 esp, 4

; 138  : 		}

  0000d	c2 04 00	 ret	 4
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
PUBLIC	?begin@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::begin
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?begin@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::begin, COMDAT
; _this$ = ecx

; 463  : 		return (iterator(_Myfirst));

  00000	8b 49 04	 mov	 ecx, DWORD PTR [ecx+4]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 464  : 		}

  00009	c2 04 00	 ret	 4
?begin@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::begin
_TEXT	ENDS
PUBLIC	?end@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::end
; Function compile flags: /Ogty
;	COMDAT ?end@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::end, COMDAT
; _this$ = ecx

; 473  : 		return (iterator(_Mylast));

  00000	8b 49 08	 mov	 ecx, DWORD PTR [ecx+8]
  00003	8b 44 24 04	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp-4]
  00007	89 08		 mov	 DWORD PTR [eax], ecx

; 474  : 		}

  00009	c2 04 00	 ret	 4
?end@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::end
_TEXT	ENDS
PUBLIC	?_Destroy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXPAPAVCLordSkillComponentExecutable@@0@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Destroy
; Function compile flags: /Ogty
;	COMDAT ?_Destroy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXPAPAVCLordSkillComponentExecutable@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXPAPAVCLordSkillComponentExecutable@@0@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Destroy, COMDAT
; _this$ = ecx

; 787  : 		_Destroy_range(_First, _Last, this->_Alval);
; 788  : 		}

  00000	c2 08 00	 ret	 8
?_Destroy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXPAPAVCLordSkillComponentExecutable@@0@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Destroy
_TEXT	ENDS
PUBLIC	??$_Uninitialized_fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z ; std::_Uninitialized_fill_n<CLordSkillComponentExecutable * *,unsigned int,CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\memory
;	COMDAT ??$_Uninitialized_fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z PROC NEAR ; std::_Uninitialized_fill_n<CLordSkillComponentExecutable * *,unsigned int,CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT

; 256  : 	_Uninit_fill_n(_First, _Count, _Val, _Al,
; 257  : 		_Ptr_cat(_First, _First));

  00000	8b 4c 24 08	 mov	 ecx, DWORD PTR __Count$[esp-4]
  00004	85 c9		 test	 ecx, ecx
  00006	8b 44 24 04	 mov	 eax, DWORD PTR __First$[esp-4]
  0000a	76 10		 jbe	 SHORT $L188398
  0000c	8b 54 24 0c	 mov	 edx, DWORD PTR __Val$[esp-4]
  00010	56		 push	 esi
$L188396:
  00011	8b 32		 mov	 esi, DWORD PTR [edx]
  00013	89 30		 mov	 DWORD PTR [eax], esi
  00015	83 c0 04	 add	 eax, 4
  00018	49		 dec	 ecx
  00019	75 f6		 jne	 SHORT $L188396
  0001b	5e		 pop	 esi
$L188398:

; 258  : 	}

  0001c	c3		 ret	 0
??$_Uninitialized_fill_n@PAPAVCLordSkillComponentExecutable@@IPAV1@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@YAXPAPAVCLordSkillComponentExecutable@@IABQAV1@AAV?$allocator@PAVCLordSkillComponentExecutable@@@0@@Z ENDP ; std::_Uninitialized_fill_n<CLordSkillComponentExecutable * *,unsigned int,CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ucopy<CLordSkillComponentExecutable * *>
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Ptr$ = 16						; size = 4
??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ucopy<CLordSkillComponentExecutable * *>, COMDAT
; _this$ = ecx

; 802  : 		{	// copy initializing [_First, _Last), using allocator
; 803  : 		return (_Uninitialized_copy(_First, _Last,
; 804  : 			_Ptr, this->_Alval));

  00000	8b 4c 24 04	 mov	 ecx, DWORD PTR __First$[esp-4]
  00004	8b 44 24 08	 mov	 eax, DWORD PTR __Last$[esp-4]
  00008	2b c1		 sub	 eax, ecx
  0000a	56		 push	 esi
  0000b	c1 f8 02	 sar	 eax, 2
  0000e	8d 34 85 00 00
	00 00		 lea	 esi, DWORD PTR [eax*4]
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Ptr$[esp]
  00019	56		 push	 esi
  0001a	51		 push	 ecx
  0001b	50		 push	 eax
  0001c	e8 00 00 00 00	 call	 _memmove
  00021	83 c4 0c	 add	 esp, 12			; 0000000cH
  00024	03 c6		 add	 eax, esi
  00026	5e		 pop	 esi

; 805  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ucopy<CLordSkillComponentExecutable * *>
_TEXT	ENDS
PUBLIC	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z
_TEXT	SEGMENT
__Built$ = 8						; size = 1
__Newsize$ = 12						; size = 4
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy, COMDAT
; _this$ = ecx

; 1510 : 		if (!_Built)

  00000	8a 44 24 04	 mov	 al, BYTE PTR __Built$[esp-4]
  00004	84 c0		 test	 al, al
  00006	53		 push	 ebx
  00007	55		 push	 ebp
  00008	8b 6c 24 10	 mov	 ebp, DWORD PTR __Newsize$[esp+4]
  0000c	8b d9		 mov	 ebx, ecx
  0000e	74 2f		 je	 SHORT $L188430

; 1511 : 			;
; 1512 : 		else if (_BUF_SIZE <= _Myres)

  00010	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  00014	72 29		 jb	 SHORT $L188430

; 1513 : 			{	// copy any leftovers to small buffer and deallocate
; 1514 : 			_Elem *_Ptr = _Bx._Ptr;
; 1515 : 			if (0 < _Newsize)

  00016	85 ed		 test	 ebp, ebp
  00018	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0001b	57		 push	 edi
  0001c	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
  0001f	76 14		 jbe	 SHORT $L188427
  00021	56		 push	 esi

; 1516 : 				_Traits::copy(_Bx._Buf, _Ptr, _Newsize);

  00022	8b cd		 mov	 ecx, ebp
  00024	8b d1		 mov	 edx, ecx
  00026	c1 e9 02	 shr	 ecx, 2
  00029	8b f0		 mov	 esi, eax
  0002b	f3 a5		 rep movsd
  0002d	8b ca		 mov	 ecx, edx
  0002f	83 e1 03	 and	 ecx, 3
  00032	f3 a4		 rep movsb
  00034	5e		 pop	 esi
$L188427:

; 1517 : 			_Mybase::_Alval.deallocate(_Ptr, _Myres + 1);

  00035	50		 push	 eax
  00036	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003b	83 c4 04	 add	 esp, 4
  0003e	5f		 pop	 edi
$L188430:

; 1518 : 			}
; 1519 : 		_Myres = _BUF_SIZE - 1;
; 1520 : 		_Eos(_Newsize);

  0003f	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00042	c7 43 18 0f 00
	00 00		 mov	 DWORD PTR [ebx+24], 15	; 0000000fH
  00049	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0004e	5d		 pop	 ebp
  0004f	5b		 pop	 ebx

; 1521 : 		}

  00050	c2 08 00	 ret	 8
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy
_TEXT	ENDS
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
EXTRN	?_Xran@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xran
; Function compile flags: /Ogty
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 792  : 		{	// erase elements [_Off, _Off + _Count)

  00000	55		 push	 ebp

; 793  : 		if (_Mysize < _Off)

  00001	8b 6c 24 08	 mov	 ebp, DWORD PTR __Off$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx
  00008	39 6e 14	 cmp	 DWORD PTR [esi+20], ebp
  0000b	57		 push	 edi
  0000c	73 05		 jae	 SHORT $L184993

; 794  : 			_String_base::_Xran();	// _Off off end

  0000e	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L184993:

; 795  : 		if (_Mysize - _Off < _Count)

  00013	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00016	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  0001a	2b c5		 sub	 eax, ebp
  0001c	3b c7		 cmp	 eax, edi
  0001e	73 02		 jae	 SHORT $L184994

; 796  : 			_Count = _Mysize - _Off;	// trim _Count

  00020	8b f8		 mov	 edi, eax
$L184994:

; 797  : 		if (0 < _Count)

  00022	85 ff		 test	 edi, edi
  00024	76 47		 jbe	 SHORT $L188494

; 798  : 			{	// move elements down
; 799  : 			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
; 800  : 				_Mysize - _Off - _Count);

  00026	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00029	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0002c	53		 push	 ebx
  0002d	8d 5e 04	 lea	 ebx, DWORD PTR [esi+4]
  00030	72 04		 jb	 SHORT $L188459
  00032	8b 13		 mov	 edx, DWORD PTR [ebx]
  00034	eb 02		 jmp	 SHORT $L188460
$L188459:
  00036	8b d3		 mov	 edx, ebx
$L188460:
  00038	83 f9 10	 cmp	 ecx, 16			; 00000010H
  0003b	72 04		 jb	 SHORT $L188466
  0003d	8b 0b		 mov	 ecx, DWORD PTR [ebx]
  0003f	eb 02		 jmp	 SHORT $L188467
$L188466:
  00041	8b cb		 mov	 ecx, ebx
$L188467:
  00043	2b c7		 sub	 eax, edi

; 803  : 			}
; 804  : 		return (*this);

  00045	03 d5		 add	 edx, ebp
  00047	50		 push	 eax
  00048	03 d7		 add	 edx, edi
  0004a	52		 push	 edx
  0004b	03 cd		 add	 ecx, ebp
  0004d	51		 push	 ecx
  0004e	e8 00 00 00 00	 call	 _memmove
  00053	8b 46 14	 mov	 eax, DWORD PTR [esi+20]
  00056	8b 4e 18	 mov	 ecx, DWORD PTR [esi+24]
  00059	2b c7		 sub	 eax, edi
  0005b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005e	83 f9 10	 cmp	 ecx, 16			; 00000010H
  00061	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00064	72 02		 jb	 SHORT $L188489

; 801  : 			size_type _Newsize = _Mysize - _Count;
; 802  : 			_Eos(_Newsize);

  00066	8b 1b		 mov	 ebx, DWORD PTR [ebx]
$L188489:
  00068	c6 04 03 00	 mov	 BYTE PTR [ebx+eax], 0
  0006c	5b		 pop	 ebx
$L188494:
  0006d	5f		 pop	 edi

; 803  : 			}
; 804  : 		return (*this);

  0006e	8b c6		 mov	 eax, esi
  00070	5e		 pop	 esi
  00071	5d		 pop	 ebp

; 805  : 		}

  00072	c2 08 00	 ret	 8
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
EXTRN	__CxxThrowException@8:NEAR
EXTRN	__except_list:DWORD
EXTRN	___CxxFrameHandler:NEAR
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T188701 DD	0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	01H
	DD	00H
	DD	01H
	DD	00H
$T188703 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L188501
$T188704 DD	00H
	DD	00H
	DD	00H
	DD	FLAT:$L188499
$T188702 DD	02H
	DD	02H
	DD	03H
	DD	01H
	DD	FLAT:$T188703
	DD	00H
	DD	00H
	DD	03H
	DD	01H
	DD	FLAT:$T188704
$T188695 DD	019930520H
	DD	04H
	DD	FLAT:$T188701
	DD	02H
	DD	FLAT:$T188702
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
xdata$x	ENDS
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
_TEXT	SEGMENT
__Newres$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Ptr$ = 8						; size = 4
__Newsize$ = 8						; size = 4
__Oldlen$ = 12						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 1444 : 		{	// copy _Oldlen elements to newly allocated buffer

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00010	50		 push	 eax
  00011	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00018	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 1445 : 		size_type _Newres = _Newsize | _ALLOC_MASK;

  0001b	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  0001e	53		 push	 ebx
  0001f	56		 push	 esi
  00020	8b d8		 mov	 ebx, eax
  00022	83 cb 0f	 or	 ebx, 15			; 0000000fH

; 1446 : 		if (max_size() < _Newres)

  00025	83 fb fe	 cmp	 ebx, -2			; fffffffeH
  00028	57		 push	 edi
  00029	8b f1		 mov	 esi, ecx
  0002b	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0002e	89 75 ec	 mov	 DWORD PTR _this$[ebp], esi
  00031	76 04		 jbe	 SHORT $L185550

; 1447 : 			_Newres = _Newsize;	// undo roundup if too big

  00033	8b d8		 mov	 ebx, eax

; 1448 : 		else if (_Newres / 3 < _Myres / 2

  00035	eb 22		 jmp	 SHORT $L185552
$L185550:

; 1449 : 			&& _Myres <= max_size() - _Myres / 2)

  00037	8b 7e 18	 mov	 edi, DWORD PTR [esi+24]
  0003a	b8 ab aa aa aa	 mov	 eax, -1431655765	; aaaaaaabH
  0003f	f7 e3		 mul	 ebx
  00041	8b cf		 mov	 ecx, edi
  00043	d1 e9		 shr	 ecx, 1
  00045	d1 ea		 shr	 edx, 1
  00047	3b d1		 cmp	 edx, ecx
  00049	73 0e		 jae	 SHORT $L185552
  0004b	b8 fe ff ff ff	 mov	 eax, -2			; fffffffeH
  00050	2b c1		 sub	 eax, ecx
  00052	3b f8		 cmp	 edi, eax
  00054	77 03		 ja	 SHORT $L185552

; 1450 : 			_Newres = _Myres + _Myres / 2;	// grow exponentially if possible

  00056	8d 1c 39	 lea	 ebx, DWORD PTR [ecx+edi]
$L185552:

; 1451 : 		_Elem *_Ptr;
; 1452 : 
; 1453 : 		_TRY_BEGIN
; 1454 : 			_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00059	8d 4b 01	 lea	 ecx, DWORD PTR [ebx+1]
  0005c	51		 push	 ecx
  0005d	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00064	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00069	8b d0		 mov	 edx, eax
  0006b	83 c4 04	 add	 esp, 4
  0006e	89 55 08	 mov	 DWORD PTR __Ptr$[ebp], edx
  00071	eb 29		 jmp	 SHORT $L185554
$L188499:

; 1455 : 		_CATCH_ALL
; 1456 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

  00073	8b 45 08	 mov	 eax, DWORD PTR __Newsize$[ebp]
  00076	89 45 e8	 mov	 DWORD PTR __Newres$[ebp], eax

; 1457 : 			_TRY_BEGIN
; 1458 : 				_Ptr = _Mybase::_Alval.allocate(_Newres + 1);

  00079	40		 inc	 eax
  0007a	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  0007d	50		 push	 eax
  0007e	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+12], 2
  00082	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new
  00087	89 45 08	 mov	 DWORD PTR __Ptr$[ebp], eax
  0008a	83 c4 04	 add	 esp, 4

; 1462 : 			_CATCH_END
; 1463 : 		_CATCH_END

  0008d	b8 00 00 00 00	 mov	 eax, $L188696
  00092	c3		 ret	 0
$L188696:
  00093	8b 5d e8	 mov	 ebx, DWORD PTR __Newres$[ebp]
  00096	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  00099	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
$L185554:

; 1464 : 
; 1465 : 		if (0 < _Oldlen)

  0009c	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  0009f	85 c9		 test	 ecx, ecx
  000a1	76 24		 jbe	 SHORT $L188619

; 1466 : 			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	// copy existing elements

  000a3	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000a7	72 05		 jb	 SHORT $L188614
  000a9	8b 76 04	 mov	 esi, DWORD PTR [esi+4]
  000ac	eb 03		 jmp	 SHORT $L188615
$L188614:
  000ae	83 c6 04	 add	 esi, 4
$L188615:
  000b1	8b c1		 mov	 eax, ecx
  000b3	c1 e9 02	 shr	 ecx, 2
  000b6	8b fa		 mov	 edi, edx
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb
  000c1	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  000c4	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
$L188619:

; 1467 : 		_Tidy(true);

  000c7	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  000cb	72 12		 jb	 SHORT $L188661
  000cd	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000d0	51		 push	 ecx
  000d1	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  000d6	8b 55 08	 mov	 edx, DWORD PTR __Ptr$[ebp]
  000d9	8b 4d 0c	 mov	 ecx, DWORD PTR __Oldlen$[ebp]
  000dc	83 c4 04	 add	 esp, 4
$L188661:

; 1468 : 		_Bx._Ptr = _Ptr;
; 1469 : 		_Myres = _Newres;
; 1470 : 		_Eos(_Oldlen);

  000df	83 fb 10	 cmp	 ebx, 16			; 00000010H
  000e2	8d 46 04	 lea	 eax, DWORD PTR [esi+4]
  000e5	c6 00 00	 mov	 BYTE PTR [eax], 0
  000e8	89 10		 mov	 DWORD PTR [eax], edx
  000ea	89 5e 18	 mov	 DWORD PTR [esi+24], ebx
  000ed	89 4e 14	 mov	 DWORD PTR [esi+20], ecx
  000f0	72 02		 jb	 SHORT $L188687
  000f2	8b c2		 mov	 eax, edx
$L188687:

; 1471 : 		}

  000f4	5f		 pop	 edi
  000f5	c6 04 08 00	 mov	 BYTE PTR [eax+ecx], 0
  000f9	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  000fc	5e		 pop	 esi
  000fd	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00104	5b		 pop	 ebx
  00105	8b e5		 mov	 esp, ebp
  00107	5d		 pop	 ebp
  00108	c2 08 00	 ret	 8
$L188501:

; 1459 : 			_CATCH_ALL
; 1460 : 			_Tidy(true);	// failed again, discard storage and reraise

  0010b	8b 75 ec	 mov	 esi, DWORD PTR _this$[ebp]
  0010e	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00112	72 0c		 jb	 SHORT $L188600
  00114	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  00117	52		 push	 edx
  00118	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0011d	83 c4 04	 add	 esp, 4
$L188600:

; 1461 : 			_RERAISE;

  00120	6a 00		 push	 0
  00122	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00129	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00130	6a 00		 push	 0
  00132	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  00136	e8 00 00 00 00	 call	 __CxxThrowException@8
$L188700:
  0013b	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T188695
  00005	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?GetSkill@CLordSkill@@QAEPAVCLordSkillComponentExecutable@@H@Z ; CLordSkill::GetSkill
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
;	COMDAT ?GetSkill@CLordSkill@@QAEPAVCLordSkillComponentExecutable@@H@Z
_TEXT	SEGMENT
_nId$ = 8						; size = 4
?GetSkill@CLordSkill@@QAEPAVCLordSkillComponentExecutable@@H@Z PROC NEAR ; CLordSkill::GetSkill, COMDAT
; _this$ = ecx

; 101  : 	for( VLSC::iterator i = m_vComponents.begin(); i != m_vComponents.end(); ++i )

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]

; 105  : 	}
; 106  : 	return NULL;

  00003	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  00006	3b c1		 cmp	 eax, ecx
  00008	56		 push	 esi
  00009	74 13		 je	 SHORT $L187306

; 101  : 	for( VLSC::iterator i = m_vComponents.begin(); i != m_vComponents.end(); ++i )

  0000b	8b 54 24 08	 mov	 edx, DWORD PTR _nId$[esp]
  0000f	90		 npad	 1
$L188727:

; 102  : 	{
; 103  : 		if( ( *i )->GetId() == nId )

  00010	8b 30		 mov	 esi, DWORD PTR [eax]
  00012	39 56 04	 cmp	 DWORD PTR [esi+4], edx
  00015	74 0d		 je	 SHORT $L188774
  00017	83 c0 04	 add	 eax, 4
  0001a	3b c1		 cmp	 eax, ecx
  0001c	75 f2		 jne	 SHORT $L188727
$L187306:

; 105  : 	}
; 106  : 	return NULL;

  0001e	33 c0		 xor	 eax, eax
  00020	5e		 pop	 esi

; 107  : }

  00021	c2 04 00	 ret	 4
$L188774:

; 104  : 			return ( *i );

  00024	8b 00		 mov	 eax, DWORD PTR [eax]
  00026	5e		 pop	 esi

; 107  : }

  00027	c2 04 00	 ret	 4
?GetSkill@CLordSkill@@QAEPAVCLordSkillComponentExecutable@@H@Z ENDP ; CLordSkill::GetSkill
_TEXT	ENDS
PUBLIC	?Reset@CLordSkill@@QAEXXZ			; CLordSkill::Reset
; Function compile flags: /Ogty
;	COMDAT ?Reset@CLordSkill@@QAEXXZ
_TEXT	SEGMENT
?Reset@CLordSkill@@QAEXXZ PROC NEAR			; CLordSkill::Reset, COMDAT
; _this$ = ecx

; 116  : 	for( VLSC::iterator i = m_vComponents.begin(); i != m_vComponents.end(); ++i )

  00000	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  00003	3b 41 10	 cmp	 eax, DWORD PTR [ecx+16]
  00006	74 18		 je	 SHORT $L187325
  00008	33 d2		 xor	 edx, edx
  0000a	56		 push	 esi
  0000b	eb 03 8d 49 00	 npad	 5
$L188797:

; 117  : 		( *i )->SetTick( 0 );

  00010	8b 30		 mov	 esi, DWORD PTR [eax]
  00012	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00015	8b 71 10	 mov	 esi, DWORD PTR [ecx+16]
  00018	83 c0 04	 add	 eax, 4
  0001b	3b c6		 cmp	 eax, esi
  0001d	75 f1		 jne	 SHORT $L188797
  0001f	5e		 pop	 esi
$L187325:

; 118  : }

  00020	c3		 ret	 0
?Reset@CLordSkill@@QAEXXZ ENDP				; CLordSkill::Reset
_TEXT	ENDS
PUBLIC	?SerializeTick@CLordSkill@@QAEXAAVCAr@@@Z	; CLordSkill::SerializeTick
; Function compile flags: /Ogty
;	COMDAT ?SerializeTick@CLordSkill@@QAEXAAVCAr@@@Z
_TEXT	SEGMENT
tv267 = 8						; size = 4
_ar$ = 8						; size = 4
?SerializeTick@CLordSkill@@QAEXAAVCAr@@@Z PROC NEAR	; CLordSkill::SerializeTick, COMDAT
; _this$ = ecx

; 158  : {

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 159  : 	if( ar.IsStoring() )

  00003	8b 74 24 10	 mov	 esi, DWORD PTR _ar$[esp+8]
  00007	33 c0		 xor	 eax, eax
  00009	8a 06		 mov	 al, BYTE PTR [esi]
  0000b	57		 push	 edi
  0000c	8b e9		 mov	 ebp, ecx
  0000e	f7 d0		 not	 eax
  00010	a8 01		 test	 al, 1
  00012	74 70		 je	 SHORT $L187355

; 160  : 	{
; 161  : 		ar << m_vComponents.size();

  00014	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $L188848
  0001b	33 ff		 xor	 edi, edi
  0001d	eb 08		 jmp	 SHORT $L188849
$L188848:
  0001f	8b 7d 10	 mov	 edi, DWORD PTR [ebp+16]
  00022	2b f8		 sub	 edi, eax
  00024	c1 ff 02	 sar	 edi, 2
$L188849:
  00027	6a 04		 push	 4
  00029	8b ce		 mov	 ecx, esi
  0002b	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00030	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00033	89 39		 mov	 DWORD PTR [ecx], edi
  00035	83 46 08 04	 add	 DWORD PTR [esi+8], 4

; 162  : 		for( VLSC::iterator i = m_vComponents.begin(); i != m_vComponents.end(); ++i )

  00039	8b 7d 0c	 mov	 edi, DWORD PTR [ebp+12]
  0003c	3b 7d 10	 cmp	 edi, DWORD PTR [ebp+16]
  0003f	0f 84 ba 00 00
	00		 je	 $L187367
$L188877:

; 163  : 		{
; 164  : 			ar << ( *i )->GetId();

  00045	8b 17		 mov	 edx, DWORD PTR [edi]
  00047	8b 5a 04	 mov	 ebx, DWORD PTR [edx+4]
  0004a	6a 04		 push	 4
  0004c	8b ce		 mov	 ecx, esi
  0004e	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  00053	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00056	89 18		 mov	 DWORD PTR [eax], ebx
  00058	83 46 08 04	 add	 DWORD PTR [esi+8], 4

; 165  : 			ar << ( *i )->GetTick();

  0005c	8b 0f		 mov	 ecx, DWORD PTR [edi]
  0005e	8b 59 0c	 mov	 ebx, DWORD PTR [ecx+12]
  00061	6a 04		 push	 4
  00063	8b ce		 mov	 ecx, esi
  00065	e8 00 00 00 00	 call	 ?CheckBuf@CAr@@QAEXI@Z	; CAr::CheckBuf
  0006a	8b 56 08	 mov	 edx, DWORD PTR [esi+8]
  0006d	89 1a		 mov	 DWORD PTR [edx], ebx
  0006f	83 46 08 04	 add	 DWORD PTR [esi+8], 4
  00073	8b 45 10	 mov	 eax, DWORD PTR [ebp+16]
  00076	83 c7 04	 add	 edi, 4
  00079	3b f8		 cmp	 edi, eax
  0007b	75 c8		 jne	 SHORT $L188877
  0007d	5f		 pop	 edi
  0007e	5e		 pop	 esi
  0007f	5d		 pop	 ebp
  00080	5b		 pop	 ebx

; 179  : 		}
; 180  : 	}
; 181  : }

  00081	c2 04 00	 ret	 4
$L187355:

; 166  : 		}
; 167  : 	}
; 168  : 	else
; 169  : 	{
; 170  : 		size_t nSize;
; 171  : 		ar >> nSize;

  00084	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  00087	8b 56 0c	 mov	 edx, DWORD PTR [esi+12]
  0008a	8d 48 04	 lea	 ecx, DWORD PTR [eax+4]
  0008d	3b ca		 cmp	 ecx, edx
  0008f	77 07		 ja	 SHORT $L188952
  00091	8b 00		 mov	 eax, DWORD PTR [eax]
  00093	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00096	eb 05		 jmp	 SHORT $L188953
$L188952:
  00098	33 c0		 xor	 eax, eax
  0009a	89 56 08	 mov	 DWORD PTR [esi+8], edx
$L188953:

; 172  : 		for( size_t i = 0; i < nSize; i++ )

  0009d	85 c0		 test	 eax, eax
  0009f	76 5e		 jbe	 SHORT $L187367
  000a1	89 44 24 14	 mov	 DWORD PTR tv267[esp+12], eax
$L189093:

; 173  : 		{
; 174  : 			int nSkill, nTick;
; 175  : 			ar >> nSkill >> nTick;

  000a5	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000a8	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  000ab	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  000ae	3b d0		 cmp	 edx, eax
  000b0	77 07		 ja	 SHORT $L188964
  000b2	8b 39		 mov	 edi, DWORD PTR [ecx]
  000b4	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000b7	eb 05		 jmp	 SHORT $L188965
$L188964:
  000b9	33 ff		 xor	 edi, edi
  000bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L188965:
  000be	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000c1	8d 51 04	 lea	 edx, DWORD PTR [ecx+4]
  000c4	3b d0		 cmp	 edx, eax
  000c6	77 07		 ja	 SHORT $L188976
  000c8	8b 09		 mov	 ecx, DWORD PTR [ecx]
  000ca	89 56 08	 mov	 DWORD PTR [esi+8], edx
  000cd	eb 05		 jmp	 SHORT $L188977
$L188976:
  000cf	33 c9		 xor	 ecx, ecx
  000d1	89 46 08	 mov	 DWORD PTR [esi+8], eax
$L188977:

; 176  : 			CLordSkillComponent* pSkill		= GetSkill( nSkill );

  000d4	8b 45 0c	 mov	 eax, DWORD PTR [ebp+12]
  000d7	8b 55 10	 mov	 edx, DWORD PTR [ebp+16]
  000da	3b c2		 cmp	 eax, edx
  000dc	74 1b		 je	 SHORT $L187366
  000de	8b ff		 npad	 2
$L189052:
  000e0	8b 18		 mov	 ebx, DWORD PTR [eax]
  000e2	39 7b 04	 cmp	 DWORD PTR [ebx+4], edi
  000e5	74 09		 je	 SHORT $L189087
  000e7	83 c0 04	 add	 eax, 4
  000ea	3b c2		 cmp	 eax, edx
  000ec	75 f2		 jne	 SHORT $L189052
  000ee	eb 09		 jmp	 SHORT $L187366
$L189087:
  000f0	8b 00		 mov	 eax, DWORD PTR [eax]

; 177  : 			if( pSkill )

  000f2	85 c0		 test	 eax, eax
  000f4	74 03		 je	 SHORT $L187366

; 178  : 				pSkill->SetTick( nTick );

  000f6	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$L187366:

; 172  : 		for( size_t i = 0; i < nSize; i++ )

  000f9	ff 4c 24 14	 dec	 DWORD PTR tv267[esp+12]
  000fd	75 a6		 jne	 SHORT $L189093
$L187367:
  000ff	5f		 pop	 edi
  00100	5e		 pop	 esi
  00101	5d		 pop	 ebp
  00102	5b		 pop	 ebx

; 179  : 		}
; 180  : 	}
; 181  : }

  00103	c2 04 00	 ret	 4
?SerializeTick@CLordSkill@@QAEXAAVCAr@@@Z ENDP		; CLordSkill::SerializeTick
_TEXT	ENDS
PUBLIC	?_Tidy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Tidy
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?_Tidy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXXZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Tidy, COMDAT
; _this$ = ecx

; 791  : 		{	// free all storage

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 792  : 		if (_Myfirst != 0)

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L189097

; 793  : 			{	// something to free, destroy and deallocate it
; 794  : 			_Destroy(_Myfirst, _Mylast);
; 795  : 			this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L189097:

; 796  : 			}
; 797  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;

  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 798  : 		}

  00029	c3		 ret	 0
?_Tidy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXXZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Tidy
_TEXT	ENDS
PUBLIC	?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ufill
; Function compile flags: /Ogty
;	COMDAT ?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Val$ = 16						; size = 4
?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ufill, COMDAT
; _this$ = ecx

; 877  : 		{	// copy initializing _Count * _Val, using allocator

  00000	56		 push	 esi

; 878  : 		_Uninitialized_fill_n(_Ptr, _Count, _Val, this->_Alval);

  00001	8b 74 24 0c	 mov	 esi, DWORD PTR __Count$[esp]
  00005	85 f6		 test	 esi, esi
  00007	57		 push	 edi
  00008	8b 7c 24 0c	 mov	 edi, DWORD PTR __Ptr$[esp+4]
  0000c	8b c7		 mov	 eax, edi
  0000e	76 12		 jbe	 SHORT $L189140
  00010	8b 54 24 14	 mov	 edx, DWORD PTR __Val$[esp+4]
  00014	8b ce		 mov	 ecx, esi
  00016	53		 push	 ebx
$L189134:
  00017	8b 1a		 mov	 ebx, DWORD PTR [edx]
  00019	89 18		 mov	 DWORD PTR [eax], ebx
  0001b	83 c0 04	 add	 eax, 4
  0001e	49		 dec	 ecx
  0001f	75 f6		 jne	 SHORT $L189134
  00021	5b		 pop	 ebx
$L189140:

; 879  : 		return (_Ptr + _Count);

  00022	8d 04 b7	 lea	 eax, DWORD PTR [edi+esi*4]
  00025	5f		 pop	 edi
  00026	5e		 pop	 esi

; 880  : 		}

  00027	c2 0c 00	 ret	 12			; 0000000cH
?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ufill
_TEXT	ENDS
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 456  : 		{	// destroy the string

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 457  : 		_Tidy(true);

  00003	83 7e 18 10	 cmp	 DWORD PTR [esi+24], 16	; 00000010H
  00007	72 0c		 jb	 SHORT $L189182
  00009	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  0000c	50		 push	 eax
  0000d	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00012	83 c4 04	 add	 esp, 4
$L189182:
  00015	33 c0		 xor	 eax, eax
  00017	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  0001e	89 46 14	 mov	 DWORD PTR [esi+20], eax
  00021	88 46 04	 mov	 BYTE PTR [esi+4], al
  00024	5e		 pop	 esi

; 458  : 		}

  00025	c3		 ret	 0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
EXTRN	?_Xlen@_String_base@std@@QBEXXZ:NEAR		; std::_String_base::_Xlen
; Function compile flags: /Ogty
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Trim$ = 12						; size = 1
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 1480 : 		{	// ensure buffer is big enough, trim to size if _Trim is true

  00000	55		 push	 ebp
  00001	56		 push	 esi

; 1481 : 		if (max_size() < _Newsize)

  00002	8b 74 24 0c	 mov	 esi, DWORD PTR __Newsize$[esp+4]
  00006	83 fe fe	 cmp	 esi, -2			; fffffffeH
  00009	8b e9		 mov	 ebp, ecx
  0000b	76 05		 jbe	 SHORT $L185002

; 1482 : 			_String_base::_Xlen();	// result too long

  0000d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L185002:

; 1483 : 		if (_Myres < _Newsize)

  00012	8b 45 18	 mov	 eax, DWORD PTR [ebp+24]
  00015	3b c6		 cmp	 eax, esi
  00017	73 19		 jae	 SHORT $L185003

; 1484 : 			_Copy(_Newsize, _Mysize);	// reallocate to grow

  00019	8b 45 14	 mov	 eax, DWORD PTR [ebp+20]
  0001c	50		 push	 eax
  0001d	56		 push	 esi
  0001e	8b cd		 mov	 ecx, ebp
  00020	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  00025	33 c0		 xor	 eax, eax
  00027	3b c6		 cmp	 eax, esi
  00029	1b c0		 sbb	 eax, eax
  0002b	5e		 pop	 esi
  0002c	f7 d8		 neg	 eax
  0002e	5d		 pop	 ebp

; 1491 : 		}

  0002f	c2 08 00	 ret	 8
$L185003:

; 1485 : 		else if (_Trim && _Newsize < _BUF_SIZE)

  00032	8a 4c 24 10	 mov	 cl, BYTE PTR __Trim$[esp+4]
  00036	84 c9		 test	 cl, cl
  00038	74 5c		 je	 SHORT $L185005
  0003a	83 fe 10	 cmp	 esi, 16			; 00000010H
  0003d	73 57		 jae	 SHORT $L185005
  0003f	53		 push	 ebx

; 1486 : 			_Tidy(true,	// copy and deallocate if trimming to small string
; 1487 : 				_Newsize < _Mysize ? _Newsize : _Mysize);

  00040	8b 5d 14	 mov	 ebx, DWORD PTR [ebp+20]
  00043	3b f3		 cmp	 esi, ebx
  00045	73 02		 jae	 SHORT $L189196
  00047	8b de		 mov	 ebx, esi
$L189196:
  00049	83 f8 10	 cmp	 eax, 16			; 00000010H
  0004c	72 2b		 jb	 SHORT $L189256
  0004e	85 db		 test	 ebx, ebx
  00050	8b 45 04	 mov	 eax, DWORD PTR [ebp+4]
  00053	57		 push	 edi
  00054	8d 7d 04	 lea	 edi, DWORD PTR [ebp+4]
  00057	76 16		 jbe	 SHORT $L189255
  00059	8b cb		 mov	 ecx, ebx
  0005b	8b d1		 mov	 edx, ecx
  0005d	c1 e9 02	 shr	 ecx, 2
  00060	8b f0		 mov	 esi, eax
  00062	f3 a5		 rep movsd
  00064	8b ca		 mov	 ecx, edx
  00066	83 e1 03	 and	 ecx, 3
  00069	f3 a4		 rep movsb
  0006b	8b 74 24 14	 mov	 esi, DWORD PTR __Newsize$[esp+12]
$L189255:
  0006f	50		 push	 eax
  00070	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00075	83 c4 04	 add	 esp, 4
  00078	5f		 pop	 edi
$L189256:
  00079	89 5d 14	 mov	 DWORD PTR [ebp+20], ebx

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  0007c	33 c0		 xor	 eax, eax
  0007e	c7 45 18 0f 00
	00 00		 mov	 DWORD PTR [ebp+24], 15	; 0000000fH
  00085	c6 44 2b 04 00	 mov	 BYTE PTR [ebx+ebp+4], 0
  0008a	3b c6		 cmp	 eax, esi
  0008c	5b		 pop	 ebx
  0008d	1b c0		 sbb	 eax, eax
  0008f	5e		 pop	 esi
  00090	f7 d8		 neg	 eax
  00092	5d		 pop	 ebp

; 1491 : 		}

  00093	c2 08 00	 ret	 8
$L185005:

; 1488 : 		else if (_Newsize == 0)

  00096	85 f6		 test	 esi, esi
  00098	75 23		 jne	 SHORT $L189288

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

  0009a	83 f8 10	 cmp	 eax, 16			; 00000010H
  0009d	89 75 14	 mov	 DWORD PTR [ebp+20], esi
  000a0	72 14		 jb	 SHORT $L189285
  000a2	8b 6d 04	 mov	 ebp, DWORD PTR [ebp+4]

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000a5	33 c0		 xor	 eax, eax
  000a7	3b c6		 cmp	 eax, esi
  000a9	1b c0		 sbb	 eax, eax
  000ab	5e		 pop	 esi
  000ac	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
  000b0	f7 d8		 neg	 eax
  000b2	5d		 pop	 ebp

; 1491 : 		}

  000b3	c2 08 00	 ret	 8

; 1489 : 			_Eos(0);	// new size is zero, just null terminate

$L189285:
  000b6	83 c5 04	 add	 ebp, 4
  000b9	c6 45 00 00	 mov	 BYTE PTR [ebp], 0
$L189288:

; 1490 : 		return (0 < _Newsize);	// return true only if more work to do

  000bd	33 c0		 xor	 eax, eax
  000bf	3b c6		 cmp	 eax, esi
  000c1	1b c0		 sbb	 eax, eax
  000c3	5e		 pop	 esi
  000c4	f7 d8		 neg	 eax
  000c6	5d		 pop	 ebp

; 1491 : 		}

  000c7	c2 08 00	 ret	 8
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
PUBLIC	??1?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::~vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ??1?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::~vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT
; _this$ = ecx

; 387  : 		{	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 388  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L189301
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L189301:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 389  : 		}

  00029	c3		 ret	 0
??1?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::~vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	?clear@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::clear
; Function compile flags: /Ogty
;	COMDAT ?clear@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?clear@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXXZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::clear, COMDAT
; _this$ = ecx

; 743  : 		{	// erase all

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx

; 744  : 		_Tidy();

  00003	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00006	85 c0		 test	 eax, eax
  00008	74 09		 je	 SHORT $L189314
  0000a	50		 push	 eax
  0000b	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00010	83 c4 04	 add	 esp, 4
$L189314:
  00013	c7 46 04 00 00
	00 00		 mov	 DWORD PTR [esi+4], 0
  0001a	c7 46 08 00 00
	00 00		 mov	 DWORD PTR [esi+8], 0
  00021	c7 46 0c 00 00
	00 00		 mov	 DWORD PTR [esi+12], 0
  00028	5e		 pop	 esi

; 745  : 		}

  00029	c3		 ret	 0
?clear@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXXZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::clear
_TEXT	ENDS
PUBLIC	??_7logic_error@std@@6B@			; std::logic_error::`vftable'
PUBLIC	??_Glogic_error@std@@UAEPAXI@Z			; std::logic_error::`scalar deleting destructor'
PUBLIC	??1logic_error@std@@UAE@XZ			; std::logic_error::~logic_error
PUBLIC	?what@logic_error@std@@UBEPBDXZ			; std::logic_error::what
EXTRN	??_Elogic_error@std@@UAEPAXI@Z:NEAR		; std::logic_error::`vector deleting destructor'
EXTRN	??1exception@@UAE@XZ:NEAR			; exception::~exception
;	COMDAT ??_7logic_error@std@@6B@
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
CONST	SEGMENT
??_7logic_error@std@@6B@ DD FLAT:??_Elogic_error@std@@UAEPAXI@Z ; std::logic_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
CONST	ENDS
;	COMDAT ??1logic_error@std@@UAE@XZ
_TEXT	SEGMENT
??1logic_error@std@@UAE@XZ PROC NEAR			; std::logic_error::~logic_error, COMDAT
; _this$ = ecx

; 23   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L189382
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L189382:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1logic_error@std@@UAE@XZ ENDP				; std::logic_error::~logic_error
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ?what@logic_error@std@@UBEPBDXZ
_TEXT	SEGMENT
?what@logic_error@std@@UBEPBDXZ PROC NEAR		; std::logic_error::what, COMDAT
; _this$ = ecx

; 27   : 		return (_Str.c_str());

  00000	83 79 24 10	 cmp	 DWORD PTR [ecx+36], 16	; 00000010H
  00004	72 04		 jb	 SHORT $L189409
  00006	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  00009	c3		 ret	 0

; 27   : 		return (_Str.c_str());

$L189409:
  0000a	8d 41 10	 lea	 eax, DWORD PTR [ecx+16]

; 28   : 		}

  0000d	c3		 ret	 0
?what@logic_error@std@@UBEPBDXZ ENDP			; std::logic_error::what
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_Glogic_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glogic_error@std@@UAEPAXI@Z PROC NEAR		; std::logic_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1logic_error@std@@UAE@XZ ; std::logic_error::~logic_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L189414
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L189414:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glogic_error@std@@UAEPAXI@Z ENDP			; std::logic_error::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 590  : 		{	// assign _Right [_Roff, _Roff + _Count)

  00000	53		 push	 ebx
  00001	55		 push	 ebp
  00002	56		 push	 esi

; 591  : 		if (_Right.size() < _Roff)

  00003	8b 74 24 14	 mov	 esi, DWORD PTR __Roff$[esp+8]
  00007	57		 push	 edi
  00008	8b 7c 24 14	 mov	 edi, DWORD PTR __Right$[esp+12]
  0000c	39 77 14	 cmp	 DWORD PTR [edi+20], esi
  0000f	8b d9		 mov	 ebx, ecx
  00011	73 05		 jae	 SHORT $L184271

; 592  : 			_String_base::_Xran();	// _Roff off end

  00013	e8 00 00 00 00	 call	 ?_Xran@_String_base@std@@QBEXXZ ; std::_String_base::_Xran
$L184271:

; 593  : 		size_type _Num = _Right.size() - _Roff;

  00018	8b 6f 14	 mov	 ebp, DWORD PTR [edi+20]

; 594  : 		if (_Count < _Num)

  0001b	8b 44 24 1c	 mov	 eax, DWORD PTR __Count$[esp+12]
  0001f	2b ee		 sub	 ebp, esi
  00021	3b c5		 cmp	 eax, ebp
  00023	73 02		 jae	 SHORT $L184273

; 595  : 			_Num = _Count;	// trim _Num to size

  00025	8b e8		 mov	 ebp, eax
$L184273:

; 596  : 
; 597  : 		if (this == &_Right)

  00027	3b df		 cmp	 ebx, edi
  00029	75 1f		 jne	 SHORT $L184274

; 598  : 			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	// substring

  0002b	6a ff		 push	 -1
  0002d	03 ee		 add	 ebp, esi
  0002f	55		 push	 ebp
  00030	8b cb		 mov	 ecx, ebx
  00032	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00037	56		 push	 esi
  00038	6a 00		 push	 0
  0003a	8b cb		 mov	 ecx, ebx
  0003c	e8 00 00 00 00	 call	 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
  00041	5f		 pop	 edi
  00042	5e		 pop	 esi
  00043	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00044	8b c3		 mov	 eax, ebx
  00046	5b		 pop	 ebx

; 605  : 		}

  00047	c2 0c 00	 ret	 12			; 0000000cH
$L184274:

; 599  : 		else if (_Grow(_Num))

  0004a	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  0004d	76 07		 jbe	 SHORT $L189560
  0004f	8b cb		 mov	 ecx, ebx
  00051	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L189560:
  00056	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00059	3b c5		 cmp	 eax, ebp
  0005b	73 21		 jae	 SHORT $L189561
  0005d	8b 43 14	 mov	 eax, DWORD PTR [ebx+20]
  00060	50		 push	 eax
  00061	55		 push	 ebp
  00062	8b cb		 mov	 ecx, ebx
  00064	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00069	85 ed		 test	 ebp, ebp
$L189610:
  0006b	76 6d		 jbe	 SHORT $L189609

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

  0006d	8b 4f 18	 mov	 ecx, DWORD PTR [edi+24]
  00070	b8 10 00 00 00	 mov	 eax, 16			; 00000010H
  00075	3b c8		 cmp	 ecx, eax
  00077	72 2f		 jb	 SHORT $L189575
  00079	8b 57 04	 mov	 edx, DWORD PTR [edi+4]
  0007c	eb 2d		 jmp	 SHORT $L189576

; 599  : 		else if (_Grow(_Num))

$L189561:
  0007e	85 ed		 test	 ebp, ebp
  00080	75 e9		 jne	 SHORT $L189610
  00082	83 f8 10	 cmp	 eax, 16			; 00000010H
  00085	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  00088	72 0f		 jb	 SHORT $L189553
  0008a	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  0008d	5f		 pop	 edi
  0008e	5e		 pop	 esi
  0008f	c6 00 00	 mov	 BYTE PTR [eax], 0
  00092	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  00093	8b c3		 mov	 eax, ebx
  00095	5b		 pop	 ebx

; 605  : 		}

  00096	c2 0c 00	 ret	 12			; 0000000cH

; 599  : 		else if (_Grow(_Num))

$L189553:
  00099	5f		 pop	 edi
  0009a	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  0009d	5e		 pop	 esi
  0009e	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a1	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000a2	8b c3		 mov	 eax, ebx
  000a4	5b		 pop	 ebx

; 605  : 		}

  000a5	c2 0c 00	 ret	 12			; 0000000cH

; 600  : 			{	// make room and assign new stuff
; 601  : 			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);

$L189575:
  000a8	8d 57 04	 lea	 edx, DWORD PTR [edi+4]
$L189576:
  000ab	39 43 18	 cmp	 DWORD PTR [ebx+24], eax
  000ae	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000b1	72 04		 jb	 SHORT $L189581
  000b3	8b 38		 mov	 edi, DWORD PTR [eax]
  000b5	eb 02		 jmp	 SHORT $L189582
$L189581:
  000b7	8b f8		 mov	 edi, eax
$L189582:
  000b9	03 f2		 add	 esi, edx
  000bb	8b cd		 mov	 ecx, ebp
  000bd	8b d1		 mov	 edx, ecx
  000bf	c1 e9 02	 shr	 ecx, 2
  000c2	f3 a5		 rep movsd
  000c4	8b ca		 mov	 ecx, edx
  000c6	83 e1 03	 and	 ecx, 3
  000c9	f3 a4		 rep movsb

; 602  : 			_Eos(_Num);

  000cb	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000cf	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000d2	72 02		 jb	 SHORT $L189604
  000d4	8b 00		 mov	 eax, DWORD PTR [eax]
$L189604:
  000d6	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L189609:
  000da	5f		 pop	 edi
  000db	5e		 pop	 esi
  000dc	5d		 pop	 ebp

; 603  : 			}
; 604  : 		return (*this);

  000dd	8b c3		 mov	 eax, ebx
  000df	5b		 pop	 ebx

; 605  : 		}

  000e0	c2 0c 00	 ret	 12			; 0000000cH
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Num$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 608  : 		{	// assign [_Ptr, _Ptr + _Num)

  00000	53		 push	 ebx
  00001	8b d9		 mov	 ebx, ecx

; 609  : 		if (_Inside(_Ptr))

  00003	8b 53 18	 mov	 edx, DWORD PTR [ebx+24]
  00006	83 fa 10	 cmp	 edx, 16			; 00000010H
  00009	56		 push	 esi
  0000a	57		 push	 edi
  0000b	72 05		 jb	 SHORT $L189630
  0000d	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00010	eb 03		 jmp	 SHORT $L189631
$L189630:
  00012	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
$L189631:
  00015	8b 74 24 10	 mov	 esi, DWORD PTR __Ptr$[esp+8]
  00019	3b f0		 cmp	 esi, eax
  0001b	72 34		 jb	 SHORT $L184989
  0001d	83 fa 10	 cmp	 edx, 16			; 00000010H
  00020	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  00023	72 04		 jb	 SHORT $L189634
  00025	8b 08		 mov	 ecx, DWORD PTR [eax]
  00027	eb 02		 jmp	 SHORT $L189635
$L189634:
  00029	8b c8		 mov	 ecx, eax
$L189635:
  0002b	8b 7b 14	 mov	 edi, DWORD PTR [ebx+20]
  0002e	03 f9		 add	 edi, ecx
  00030	3b fe		 cmp	 edi, esi
  00032	76 1d		 jbe	 SHORT $L184989

; 610  : 			return (assign(*this, _Ptr - _Myptr(), _Num));	// substring

  00034	83 fa 10	 cmp	 edx, 16			; 00000010H
  00037	72 02		 jb	 SHORT $L189647
  00039	8b 00		 mov	 eax, DWORD PTR [eax]
$L189647:
  0003b	8b 4c 24 14	 mov	 ecx, DWORD PTR __Num$[esp+8]
  0003f	51		 push	 ecx
  00040	2b f0		 sub	 esi, eax
  00042	56		 push	 esi
  00043	53		 push	 ebx
  00044	8b cb		 mov	 ecx, ebx
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi
  0004d	5b		 pop	 ebx

; 618  : 		}

  0004e	c2 08 00	 ret	 8
$L184989:
  00051	55		 push	 ebp

; 611  : 
; 612  : 		if (_Grow(_Num))

  00052	8b 6c 24 18	 mov	 ebp, DWORD PTR __Num$[esp+12]
  00056	83 fd fe	 cmp	 ebp, -2			; fffffffeH
  00059	76 07		 jbe	 SHORT $L189788
  0005b	8b cb		 mov	 ecx, ebx
  0005d	e8 00 00 00 00	 call	 ?_Xlen@_String_base@std@@QBEXXZ ; std::_String_base::_Xlen
$L189788:
  00062	8b 43 18	 mov	 eax, DWORD PTR [ebx+24]
  00065	3b c5		 cmp	 eax, ebp
  00067	73 1b		 jae	 SHORT $L189789
  00069	8b 53 14	 mov	 edx, DWORD PTR [ebx+20]
  0006c	52		 push	 edx
  0006d	55		 push	 ebp
  0006e	8b cb		 mov	 ecx, ebx
  00070	e8 00 00 00 00	 call	 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
  00075	85 ed		 test	 ebp, ebp
$L189827:
  00077	76 68		 jbe	 SHORT $L189824

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

  00079	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  0007d	72 2f		 jb	 SHORT $L189798
  0007f	8b 7b 04	 mov	 edi, DWORD PTR [ebx+4]
  00082	eb 2d		 jmp	 SHORT $L189799

; 611  : 
; 612  : 		if (_Grow(_Num))

$L189789:
  00084	85 ed		 test	 ebp, ebp
  00086	75 ef		 jne	 SHORT $L189827
  00088	83 f8 10	 cmp	 eax, 16			; 00000010H
  0008b	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  0008e	72 0f		 jb	 SHORT $L189781
  00090	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  00093	5d		 pop	 ebp
  00094	5f		 pop	 edi
  00095	c6 00 00	 mov	 BYTE PTR [eax], 0
  00098	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  00099	8b c3		 mov	 eax, ebx
  0009b	5b		 pop	 ebx

; 618  : 		}

  0009c	c2 08 00	 ret	 8

; 611  : 
; 612  : 		if (_Grow(_Num))

$L189781:
  0009f	5d		 pop	 ebp
  000a0	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000a3	5f		 pop	 edi
  000a4	c6 00 00	 mov	 BYTE PTR [eax], 0
  000a7	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000a8	8b c3		 mov	 eax, ebx
  000aa	5b		 pop	 ebx

; 618  : 		}

  000ab	c2 08 00	 ret	 8

; 613  : 			{	// make room and assign new stuff
; 614  : 			_Traits::copy(_Myptr(), _Ptr, _Num);

$L189798:
  000ae	8d 7b 04	 lea	 edi, DWORD PTR [ebx+4]
$L189799:
  000b1	8b cd		 mov	 ecx, ebp
  000b3	8b c1		 mov	 eax, ecx
  000b5	c1 e9 02	 shr	 ecx, 2
  000b8	f3 a5		 rep movsd
  000ba	8b c8		 mov	 ecx, eax
  000bc	83 e1 03	 and	 ecx, 3
  000bf	f3 a4		 rep movsb

; 615  : 			_Eos(_Num);

  000c1	83 7b 18 10	 cmp	 DWORD PTR [ebx+24], 16	; 00000010H
  000c5	89 6b 14	 mov	 DWORD PTR [ebx+20], ebp
  000c8	72 10		 jb	 SHORT $L189820
  000ca	8b 43 04	 mov	 eax, DWORD PTR [ebx+4]
  000cd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
  000d1	5d		 pop	 ebp
  000d2	5f		 pop	 edi
  000d3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000d4	8b c3		 mov	 eax, ebx
  000d6	5b		 pop	 ebx

; 618  : 		}

  000d7	c2 08 00	 ret	 8

; 615  : 			_Eos(_Num);

$L189820:
  000da	8d 43 04	 lea	 eax, DWORD PTR [ebx+4]
  000dd	c6 04 28 00	 mov	 BYTE PTR [eax+ebp], 0
$L189824:
  000e1	5d		 pop	 ebp
  000e2	5f		 pop	 edi
  000e3	5e		 pop	 esi

; 616  : 			}
; 617  : 		return (*this);

  000e4	8b c3		 mov	 eax, ebx
  000e6	5b		 pop	 ebx

; 618  : 		}

  000e7	c2 08 00	 ret	 8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	?Clear@CLordSkill@@QAEXXZ			; CLordSkill::Clear
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
;	COMDAT ?Clear@CLordSkill@@QAEXXZ
_TEXT	SEGMENT
?Clear@CLordSkill@@QAEXXZ PROC NEAR			; CLordSkill::Clear, COMDAT
; _this$ = ecx

; 88   : {

  00000	56		 push	 esi
  00001	57		 push	 edi
  00002	8b f9		 mov	 edi, ecx

; 89   : 	for( VLSC::iterator i = m_vComponents.begin(); i != m_vComponents.end(); ++i )

  00004	8b 77 0c	 mov	 esi, DWORD PTR [edi+12]
  00007	3b 77 10	 cmp	 esi, DWORD PTR [edi+16]
  0000a	74 1a		 je	 SHORT $L187289
  0000c	8d 64 24 00	 npad	 4
$L189852:

; 90   : 		safe_delete( *i );

  00010	8b 0e		 mov	 ecx, DWORD PTR [esi]
  00012	85 c9		 test	 ecx, ecx
  00014	74 06		 je	 SHORT $L187288
  00016	8b 01		 mov	 eax, DWORD PTR [ecx]
  00018	6a 01		 push	 1
  0001a	ff 10		 call	 DWORD PTR [eax]
$L187288:
  0001c	8b 47 10	 mov	 eax, DWORD PTR [edi+16]
  0001f	83 c6 04	 add	 esi, 4
  00022	3b f0		 cmp	 esi, eax
  00024	75 ea		 jne	 SHORT $L189852
$L187289:

; 91   : 	m_vComponents.clear();

  00026	8b 47 0c	 mov	 eax, DWORD PTR [edi+12]
  00029	85 c0		 test	 eax, eax
  0002b	74 09		 je	 SHORT $L189903
  0002d	50		 push	 eax
  0002e	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00033	83 c4 04	 add	 esp, 4
$L189903:
  00036	c7 47 0c 00 00
	00 00		 mov	 DWORD PTR [edi+12], 0
  0003d	c7 47 10 00 00
	00 00		 mov	 DWORD PTR [edi+16], 0
  00044	c7 47 14 00 00
	00 00		 mov	 DWORD PTR [edi+20], 0
  0004b	5f		 pop	 edi
  0004c	5e		 pop	 esi

; 92   : }

  0004d	c3		 ret	 0
?Clear@CLordSkill@@QAEXXZ ENDP				; CLordSkill::Clear
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 323  : 		{	// construct by copying _Right

  00000	56		 push	 esi

; 324  : 		_Tidy();

  00001	33 c0		 xor	 eax, eax
  00003	8b f1		 mov	 esi, ecx

; 325  : 		assign(_Right, 0, npos);

  00005	6a ff		 push	 -1
  00007	89 46 14	 mov	 DWORD PTR [esi+20], eax
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	50		 push	 eax
  00012	88 46 04	 mov	 BYTE PTR [esi+4], al
  00015	8b 44 24 10	 mov	 eax, DWORD PTR __Right$[esp+8]
  00019	50		 push	 eax
  0001a	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 326  : 		}

  0001f	8b c6		 mov	 eax, esi
  00021	5e		 pop	 esi
  00022	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; Function compile flags: /Ogty
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 621  : 		{	// assign [_Ptr, <null>)

  00000	56		 push	 esi

; 622  : 		return (assign(_Ptr, _Traits::length(_Ptr)));

  00001	8b 74 24 08	 mov	 esi, DWORD PTR __Ptr$[esp]
  00005	8b c6		 mov	 eax, esi
  00007	57		 push	 edi
  00008	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0000b	eb 03 8d 49 00	 npad	 5
$L189979:
  00010	8a 10		 mov	 dl, BYTE PTR [eax]
  00012	40		 inc	 eax
  00013	84 d2		 test	 dl, dl
  00015	75 f9		 jne	 SHORT $L189979
  00017	2b c7		 sub	 eax, edi
  00019	50		 push	 eax
  0001a	56		 push	 esi
  0001b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00020	5f		 pop	 edi
  00021	5e		 pop	 esi

; 623  : 		}

  00022	c2 04 00	 ret	 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
PUBLIC	??1CLordSkill@@UAE@XZ				; CLordSkill::~CLordSkill
PUBLIC	??_7CLordSkill@@6B@				; CLordSkill::`vftable'
PUBLIC	??_GCLordSkill@@UAEPAXI@Z			; CLordSkill::`scalar deleting destructor'
EXTRN	??_ECLordSkill@@UAEPAXI@Z:NEAR			; CLordSkill::`vector deleting destructor'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xmemory
xdata$x	SEGMENT
$T190006 DD	0ffffffffH
	DD	FLAT:$L189982
$T190004 DD	019930520H
	DD	01H
	DD	FLAT:$T190006
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_7CLordSkill@@6B@
CONST	SEGMENT
??_7CLordSkill@@6B@ DD FLAT:??_ECLordSkill@@UAEPAXI@Z	; CLordSkill::`vftable'
	DD	FLAT:?CreateSkillComponent@CLordSkill@@UAEPAVCLordSkillComponentExecutable@@H@Z
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
CONST	ENDS
;	COMDAT ??1CLordSkill@@UAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLordSkill@@UAE@XZ PROC NEAR				; CLordSkill::~CLordSkill, COMDAT
; _this$ = ecx

; 83   : {

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??1CLordSkill@@UAE@XZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	57		 push	 edi
  0001a	89 74 24 08	 mov	 DWORD PTR _this$[esp+24], esi
  0001e	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7CLordSkill@@6B@
  00024	33 ff		 xor	 edi, edi
  00026	89 7c 24 14	 mov	 DWORD PTR __$EHRec$[esp+32], edi

; 84   : 	Clear();

  0002a	e8 00 00 00 00	 call	 ?Clear@CLordSkill@@QAEXXZ ; CLordSkill::Clear

; 85   : }

  0002f	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  00032	3b c7		 cmp	 eax, edi
  00034	74 09		 je	 SHORT $L189999
  00036	50		 push	 eax
  00037	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  0003c	83 c4 04	 add	 esp, 4
$L189999:
  0003f	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00043	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00046	89 7e 10	 mov	 DWORD PTR [esi+16], edi
  00049	89 7e 14	 mov	 DWORD PTR [esi+20], edi
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00055	83 c4 10	 add	 esp, 16			; 00000010H
  00058	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L189982:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	83 c1 08	 add	 ecx, 8
  00006	e9 00 00 00 00	 jmp	 ??1?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::~vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
__ehhandler$??1CLordSkill@@UAE@XZ:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T190004
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??1CLordSkill@@UAE@XZ ENDP				; CLordSkill::~CLordSkill
PUBLIC	??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
EXTRN	??0exception@@QAE@XZ:NEAR			; exception::exception
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\iosfwd
xdata$x	SEGMENT
$T190111 DD	0ffffffffH
	DD	FLAT:$L190011
$T190109 DD	019930520H
	DD	01H
	DD	FLAT:$T190111
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
__Message$ = 8						; size = 4
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::logic_error::logic_error, COMDAT
; _this$ = ecx

; 19   : 		{	// construct from message string

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	8b f1		 mov	 esi, ecx
  00019	89 74 24 04	 mov	 DWORD PTR _this$[esp+20], esi
  0001d	e8 00 00 00 00	 call	 ??0exception@@QAE@XZ	; exception::exception
  00022	33 c0		 xor	 eax, eax
  00024	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  00027	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  0002d	6a ff		 push	 -1
  0002f	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00032	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00039	50		 push	 eax
  0003a	89 44 24 18	 mov	 DWORD PTR __$EHRec$[esp+36], eax
  0003e	88 41 04	 mov	 BYTE PTR [ecx+4], al
  00041	8b 44 24 20	 mov	 eax, DWORD PTR __Message$[esp+24]
  00045	50		 push	 eax
  00046	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 20   : 		}

  0004b	8b 4c 24 08	 mov	 ecx, DWORD PTR __$EHRec$[esp+20]
  0004f	8b c6		 mov	 eax, esi
  00051	5e		 pop	 esi
  00052	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  00059	83 c4 10	 add	 esp, 16			; 00000010H
  0005c	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L190011:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T190109
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::length_error::length_error
PUBLIC	??_7length_error@std@@6B@			; std::length_error::`vftable'
PUBLIC	??_Glength_error@std@@UAEPAXI@Z			; std::length_error::`scalar deleting destructor'
EXTRN	??_Elength_error@std@@UAEPAXI@Z:NEAR		; std::length_error::`vector deleting destructor'
;	COMDAT ??_7length_error@std@@6B@
CONST	SEGMENT
??_7length_error@std@@6B@ DD FLAT:??_Elength_error@std@@UAEPAXI@Z ; std::length_error::`vftable'
	DD	FLAT:?what@logic_error@std@@UBEPBDXZ
; Function compile flags: /Ogty
CONST	ENDS
;	COMDAT ??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
_TEXT	SEGMENT
__Message$ = 8						; size = 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z PROC NEAR ; std::length_error::length_error, COMDAT
; _this$ = ecx

; 95   : 		{	// construct from message string

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Message$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@

; 96   : 		}

  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ENDP ; std::length_error::length_error
_TEXT	ENDS
PUBLIC	??1length_error@std@@UAE@XZ			; std::length_error::~length_error
; Function compile flags: /Ogty
;	COMDAT ??_Glength_error@std@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Glength_error@std@@UAEPAXI@Z PROC NEAR		; std::length_error::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1length_error@std@@UAE@XZ ; std::length_error::~length_error
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L190119
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L190119:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_Glength_error@std@@UAEPAXI@Z ENDP			; std::length_error::`scalar deleting destructor'
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??1length_error@std@@UAE@XZ
_TEXT	SEGMENT
??1length_error@std@@UAE@XZ PROC NEAR			; std::length_error::~length_error, COMDAT
; _this$ = ecx

; 99   : 		{}	// destroy the object

  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00009	83 7e 24 10	 cmp	 DWORD PTR [esi+36], 16	; 00000010H
  0000d	72 0c		 jb	 SHORT $L190213
  0000f	8b 46 10	 mov	 eax, DWORD PTR [esi+16]
  00012	50		 push	 eax
  00013	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00018	83 c4 04	 add	 esp, 4
$L190213:
  0001b	33 c0		 xor	 eax, eax
  0001d	c7 46 24 0f 00
	00 00		 mov	 DWORD PTR [esi+36], 15	; 0000000fH
  00024	89 46 20	 mov	 DWORD PTR [esi+32], eax
  00027	88 46 10	 mov	 BYTE PTR [esi+16], al
  0002a	8b ce		 mov	 ecx, esi
  0002c	5e		 pop	 esi
  0002d	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
??1length_error@std@@UAE@XZ ENDP			; std::length_error::~length_error
_TEXT	ENDS
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC NEAR ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 361  : 		_Tidy();
; 362  : 		assign(_Ptr);

  00000	8b 54 24 04	 mov	 edx, DWORD PTR __Ptr$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	8b c2		 mov	 eax, edx
  00009	57		 push	 edi
  0000a	c7 46 18 0f 00
	00 00		 mov	 DWORD PTR [esi+24], 15	; 0000000fH
  00011	c7 46 14 00 00
	00 00		 mov	 DWORD PTR [esi+20], 0
  00018	c6 46 04 00	 mov	 BYTE PTR [esi+4], 0
  0001c	8d 78 01	 lea	 edi, DWORD PTR [eax+1]
  0001f	90		 npad	 1
$L190299:
  00020	8a 08		 mov	 cl, BYTE PTR [eax]
  00022	40		 inc	 eax
  00023	84 c9		 test	 cl, cl
  00025	75 f9		 jne	 SHORT $L190299
  00027	2b c7		 sub	 eax, edi
  00029	50		 push	 eax
  0002a	52		 push	 edx
  0002b	8b ce		 mov	 ecx, esi
  0002d	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00032	5f		 pop	 edi

; 363  : 		}

  00033	8b c6		 mov	 eax, esi
  00035	5e		 pop	 esi
  00036	c2 04 00	 ret	 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
; Function compile flags: /Ogty
_TEXT	ENDS
;	COMDAT ??_GCLordSkill@@UAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_GCLordSkill@@UAEPAXI@Z PROC NEAR			; CLordSkill::`scalar deleting destructor', COMDAT
; _this$ = ecx
  00000	56		 push	 esi
  00001	8b f1		 mov	 esi, ecx
  00003	e8 00 00 00 00	 call	 ??1CLordSkill@@UAE@XZ	; CLordSkill::~CLordSkill
  00008	f6 44 24 08 01	 test	 BYTE PTR ___flags$[esp], 1
  0000d	74 09		 je	 SHORT $L190302
  0000f	56		 push	 esi
  00010	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00015	83 c4 04	 add	 esp, 4
$L190302:
  00018	8b c6		 mov	 eax, esi
  0001a	5e		 pop	 esi
  0001b	c2 04 00	 ret	 4
??_GCLordSkill@@UAEPAXI@Z ENDP				; CLordSkill::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_R0?AVlogic_error@std@@@8			; std::logic_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
PUBLIC	??_R0?AVexception@@@8				; exception `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
PUBLIC	??0logic_error@std@@QAE@ABV01@@Z		; std::logic_error::logic_error
PUBLIC	??0length_error@std@@QAE@ABV01@@Z		; std::length_error::length_error
PUBLIC	__TI3?AVlength_error@std@@
PUBLIC	__CTA3?AVlength_error@std@@
PUBLIC	??_R0?AVlength_error@std@@@8			; std::length_error `RTTI Type Descriptor'
PUBLIC	__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
PUBLIC	?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Xlen
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??0exception@@QAE@ABV0@@Z:NEAR			; exception::exception
EXTRN	??_7type_info@@6B@:DWORD			; type_info::`vftable'
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\stdexcept
xdata$x	SEGMENT
$T190422 DD	0ffffffffH
	DD	FLAT:$L190307
$T190419 DD	019930520H
	DD	01H
	DD	FLAT:$T190422
	DD	2 DUP(00H)
	DD	2 DUP(00H)
xdata$x	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT __TI3?AVlength_error@std@@
xdata$x	SEGMENT
__TI3?AVlength_error@std@@ DD 00H
	DD	FLAT:??1length_error@std@@UAE@XZ
	DD	00H
	DD	FLAT:__CTA3?AVlength_error@std@@
xdata$x	ENDS
;	COMDAT __CTA3?AVlength_error@std@@
xdata$x	SEGMENT
__CTA3?AVlength_error@std@@ DD 03H
	DD	FLAT:__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
	DD	FLAT:__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlength_error@std@@@8??0length_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlength_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0length_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlength_error@std@@@8
_DATA	SEGMENT
??_R0?AVlength_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::length_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlength_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40
xdata$x	SEGMENT
__CT??_R0?AVlogic_error@std@@@8??0logic_error@std@@QAE@ABV01@@Z40 DD 00H
	DD	FLAT:??_R0?AVlogic_error@std@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	028H
	DD	FLAT:??0logic_error@std@@QAE@ABV01@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVlogic_error@std@@@8
_DATA	SEGMENT
??_R0?AVlogic_error@std@@@8 DD FLAT:??_7type_info@@6B@	; std::logic_error `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVlogic_error@std@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVexception@@@8??0exception@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVexception@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0exception@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT ??_R0?AVexception@@@8
_DATA	SEGMENT
??_R0?AVexception@@@8 DD FLAT:??_7type_info@@6B@	; exception `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVexception@@', 00H
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
_DATA	ENDS
;	COMDAT ?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ
_TEXT	SEGMENT
$T190306 = -80						; size = 28
$T190305 = -52						; size = 40
__$EHRec$ = -12						; size = 12
?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Xlen, COMDAT
; _this$ = ecx

; 883  : 		{	// report a length_error

  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	83 ec 44	 sub	 esp, 68			; 00000044H

; 884  : 		_THROW(length_error, "vector<T> too long");

  00018	6a 12		 push	 18			; 00000012H
  0001a	68 00 00 00 00	 push	 OFFSET FLAT:??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
  0001f	8d 4c 24 08	 lea	 ecx, DWORD PTR $T190306[esp+88]
  00023	c7 44 24 20 0f
	00 00 00	 mov	 DWORD PTR $T190306[esp+112], 15 ; 0000000fH
  0002b	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR $T190306[esp+108], 0
  00033	c6 44 24 0c 00	 mov	 BYTE PTR $T190306[esp+92], 0
  00038	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  0003d	8d 04 24	 lea	 eax, DWORD PTR $T190306[esp+80]
  00040	50		 push	 eax
  00041	8d 4c 24 20	 lea	 ecx, DWORD PTR $T190305[esp+84]
  00045	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR __$EHRec$[esp+92], 0
  0004d	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z ; std::logic_error::logic_error
  00052	68 00 00 00 00	 push	 OFFSET FLAT:__TI3?AVlength_error@std@@
  00057	8d 4c 24 20	 lea	 ecx, DWORD PTR $T190305[esp+84]
  0005b	51		 push	 ecx
  0005c	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR $T190305[esp+88], OFFSET FLAT:??_7length_error@std@@6B@
  00064	e8 00 00 00 00	 call	 __CxxThrowException@8
$L190421:
  00069	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L190307:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR $T190306[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T190419
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Xlen
;	COMDAT xdata$x
xdata$x	SEGMENT
$T190527 DD	0ffffffffH
	DD	FLAT:$L190427
$T190525 DD	019930520H
	DD	01H
	DD	FLAT:$T190527
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
xdata$x	ENDS
;	COMDAT ??0logic_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0logic_error@std@@QAE@ABV01@@Z PROC NEAR		; std::logic_error::logic_error, COMDAT
; _this$ = ecx
  00000	6a ff		 push	 -1
  00002	68 00 00 00 00	 push	 __ehhandler$??0logic_error@std@@QAE@ABV01@@Z
  00007	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  0000d	50		 push	 eax
  0000e	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  00015	51		 push	 ecx
  00016	56		 push	 esi
  00017	57		 push	 edi
  00018	8b 7c 24 1c	 mov	 edi, DWORD PTR ___that$[esp+20]
  0001c	8b f1		 mov	 esi, ecx
  0001e	57		 push	 edi
  0001f	89 74 24 0c	 mov	 DWORD PTR _this$[esp+28], esi
  00023	e8 00 00 00 00	 call	 ??0exception@@QAE@ABV0@@Z ; exception::exception
  00028	33 c0		 xor	 eax, eax
  0002a	6a ff		 push	 -1
  0002c	8d 4e 0c	 lea	 ecx, DWORD PTR [esi+12]
  0002f	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7logic_error@std@@6B@
  00035	50		 push	 eax
  00036	83 c7 0c	 add	 edi, 12			; 0000000cH
  00039	c7 41 18 0f 00
	00 00		 mov	 DWORD PTR [ecx+24], 15	; 0000000fH
  00040	89 41 14	 mov	 DWORD PTR [ecx+20], eax
  00043	57		 push	 edi
  00044	89 44 24 20	 mov	 DWORD PTR __$EHRec$[esp+44], eax
  00048	88 41 04	 mov	 BYTE PTR [ecx+4], al
  0004b	e8 00 00 00 00	 call	 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
  00050	8b 4c 24 0c	 mov	 ecx, DWORD PTR __$EHRec$[esp+24]
  00054	5f		 pop	 edi
  00055	8b c6		 mov	 eax, esi
  00057	5e		 pop	 esi
  00058	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  0005f	83 c4 10	 add	 esp, 16			; 00000010H
  00062	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L190427:
  00000	8b 4d f0	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1exception@@UAE@XZ	; exception::~exception
__ehhandler$??0logic_error@std@@QAE@ABV01@@Z:
  00008	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T190525
  0000d	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
??0logic_error@std@@QAE@ABV01@@Z ENDP			; std::logic_error::logic_error
; Function compile flags: /Ogty
;	COMDAT ??0length_error@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0length_error@std@@QAE@ABV01@@Z PROC NEAR		; std::length_error::length_error, COMDAT
; _this$ = ecx
  00000	8b 44 24 04	 mov	 eax, DWORD PTR ___that$[esp-4]
  00004	56		 push	 esi
  00005	50		 push	 eax
  00006	8b f1		 mov	 esi, ecx
  00008	e8 00 00 00 00	 call	 ??0logic_error@std@@QAE@ABV01@@Z
  0000d	c7 06 00 00 00
	00		 mov	 DWORD PTR [esi], OFFSET FLAT:??_7length_error@std@@6B@
  00013	8b c6		 mov	 eax, esi
  00015	5e		 pop	 esi
  00016	c2 04 00	 ret	 4
??0length_error@std@@QAE@ABV01@@Z ENDP			; std::length_error::length_error
_TEXT	ENDS
PUBLIC	?_Buy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE_NI@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Buy
; Function compile flags: /Ogty
;	COMDAT ?_Buy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE_NI@Z
_TEXT	SEGMENT
__Capacity$ = 8						; size = 4
?_Buy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE_NI@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Buy, COMDAT
; _this$ = ecx

; 771  : 		_Myfirst = 0, _Mylast = 0, _Myend = 0;
; 772  : 		if (_Capacity == 0)

  00000	8b 44 24 04	 mov	 eax, DWORD PTR __Capacity$[esp-4]
  00004	56		 push	 esi
  00005	8b f1		 mov	 esi, ecx
  00007	33 c9		 xor	 ecx, ecx
  00009	3b c1		 cmp	 eax, ecx
  0000b	89 4e 04	 mov	 DWORD PTR [esi+4], ecx
  0000e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00011	89 4e 0c	 mov	 DWORD PTR [esi+12], ecx
  00014	75 06		 jne	 SHORT $L187428

; 773  : 			return (false);

  00016	32 c0		 xor	 al, al
  00018	5e		 pop	 esi

; 783  : 		}

  00019	c2 04 00	 ret	 4
$L187428:

; 774  : 		else if (max_size() < _Capacity)

  0001c	3d ff ff ff 3f	 cmp	 eax, 1073741823		; 3fffffffH
  00021	76 07		 jbe	 SHORT $L187430

; 775  : 			_Xlen();	// result too long

  00023	8b ce		 mov	 ecx, esi
  00025	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Xlen
$L187430:
  0002a	57		 push	 edi

; 776  : 		else
; 777  : 			{	// nonempty array, allocate storage
; 778  : 			_Myfirst = this->_Alval.allocate(_Capacity);

  0002b	8d 3c 85 00 00
	00 00		 lea	 edi, DWORD PTR [eax*4]
  00032	57		 push	 edi
  00033	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 779  : 			_Mylast = _Myfirst;
; 780  : 			_Myend = _Myfirst + _Capacity;

  00038	03 f8		 add	 edi, eax
  0003a	83 c4 04	 add	 esp, 4
  0003d	89 7e 0c	 mov	 DWORD PTR [esi+12], edi
  00040	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00043	89 46 08	 mov	 DWORD PTR [esi+8], eax
  00046	5f		 pop	 edi

; 781  : 			}
; 782  : 		return (true);

  00047	b0 01		 mov	 al, 1
  00049	5e		 pop	 esi

; 783  : 		}

  0004a	c2 04 00	 ret	 4
$L190559:
?_Buy@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAE_NI@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Buy
_TEXT	ENDS
PUBLIC	?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n
; Function compile flags: /Ogty
;	COMDAT ?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT
__Newvec$187478 = -4					; size = 4
tv393 = 8						; size = 4
__Where$ = 8						; size = 4
tv382 = 12						; size = 4
__Count$ = 12						; size = 4
__Tmp$ = 16						; size = 4
__Val$ = 16						; size = 4
?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n, COMDAT
; _this$ = ecx

; 809  : 		{	// insert _Count * _Val at _Where

  00000	51		 push	 ecx

; 810  : 		_Ty _Tmp = _Val;	// in case _Val is in sequence

  00001	8b 44 24 10	 mov	 eax, DWORD PTR __Val$[esp]
  00005	56		 push	 esi
  00006	8b f1		 mov	 esi, ecx

; 811  : 		size_type _Capacity = capacity();

  00008	8b 56 04	 mov	 edx, DWORD PTR [esi+4]
  0000b	85 d2		 test	 edx, edx
  0000d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0000f	57		 push	 edi
  00010	89 4c 24 18	 mov	 DWORD PTR __Tmp$[esp+8], ecx
  00014	75 04		 jne	 SHORT $L190573
  00016	33 c0		 xor	 eax, eax
  00018	eb 08		 jmp	 SHORT $L190574
$L190573:
  0001a	8b 46 0c	 mov	 eax, DWORD PTR [esi+12]
  0001d	2b c2		 sub	 eax, edx
  0001f	c1 f8 02	 sar	 eax, 2
$L190574:

; 812  : 
; 813  : 		if (_Count == 0)

  00022	8b 7c 24 14	 mov	 edi, DWORD PTR __Count$[esp+8]
  00026	85 ff		 test	 edi, edi
  00028	0f 84 ac 01 00
	00		 je	 $L187498

; 814  : 			;
; 815  : 		else if (max_size() - size() < _Count)

  0002e	85 d2		 test	 edx, edx
  00030	75 04		 jne	 SHORT $L190596
  00032	33 c9		 xor	 ecx, ecx
  00034	eb 08		 jmp	 SHORT $L190597
$L190596:
  00036	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00039	2b ca		 sub	 ecx, edx
  0003b	c1 f9 02	 sar	 ecx, 2
$L190597:
  0003e	53		 push	 ebx
  0003f	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00044	2b d9		 sub	 ebx, ecx
  00046	3b df		 cmp	 ebx, edi
  00048	73 07		 jae	 SHORT $L187474

; 816  : 			_Xlen();	// result too long

  0004a	8b ce		 mov	 ecx, esi
  0004c	e8 00 00 00 00	 call	 ?_Xlen@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IBEXXZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Xlen
$L187474:

; 817  : 		else if (_Capacity < size() + _Count)

  00051	85 d2		 test	 edx, edx
  00053	75 04		 jne	 SHORT $L190603
  00055	33 c9		 xor	 ecx, ecx
  00057	eb 08		 jmp	 SHORT $L190604
$L190603:
  00059	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0005c	2b ca		 sub	 ecx, edx
  0005e	c1 f9 02	 sar	 ecx, 2
$L190604:
  00061	03 cf		 add	 ecx, edi
  00063	3b c1		 cmp	 eax, ecx
  00065	55		 push	 ebp
  00066	0f 83 d6 00 00
	00		 jae	 $L187476

; 818  : 			{	// not enough room, reallocate
; 819  : 			_Capacity = max_size() - _Capacity / 2 < _Capacity
; 820  : 				? 0 : _Capacity + _Capacity / 2;	// try to grow by 50%

  0006c	8b c8		 mov	 ecx, eax
  0006e	d1 e9		 shr	 ecx, 1
  00070	bb ff ff ff 3f	 mov	 ebx, 1073741823		; 3fffffffH
  00075	2b d9		 sub	 ebx, ecx
  00077	3b d8		 cmp	 ebx, eax
  00079	73 04		 jae	 SHORT $L190562
  0007b	33 c0		 xor	 eax, eax
  0007d	eb 02		 jmp	 SHORT $L190563
$L190562:
  0007f	03 c1		 add	 eax, ecx
$L190563:

; 821  : 			if (_Capacity < size() + _Count)

  00081	85 d2		 test	 edx, edx
  00083	75 04		 jne	 SHORT $L190626
  00085	33 c9		 xor	 ecx, ecx
  00087	eb 08		 jmp	 SHORT $L190627
$L190626:
  00089	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  0008c	2b ca		 sub	 ecx, edx
  0008e	c1 f9 02	 sar	 ecx, 2
$L190627:
  00091	03 cf		 add	 ecx, edi
  00093	3b c1		 cmp	 eax, ecx
  00095	73 12		 jae	 SHORT $L187477

; 822  : 				_Capacity = size() + _Count;

  00097	85 d2		 test	 edx, edx
  00099	75 04		 jne	 SHORT $L190633
  0009b	33 c0		 xor	 eax, eax
  0009d	eb 08		 jmp	 SHORT $L190634
$L190633:
  0009f	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  000a2	2b c2		 sub	 eax, edx
  000a4	c1 f8 02	 sar	 eax, 2
$L190634:
  000a7	03 c7		 add	 eax, edi
$L187477:

; 823  : 			pointer _Newvec = this->_Alval.allocate(_Capacity);

  000a9	c1 e0 02	 shl	 eax, 2
  000ac	50		 push	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR tv382[esp+20], eax
  000b1	e8 00 00 00 00	 call	 ??2@YAPAXI@Z		; operator new

; 824  : 			pointer _Ptr = _Newvec;
; 825  : 
; 826  : 			_TRY_BEGIN
; 827  : 			_Ptr = _Ucopy(_Myfirst, _ITER_BASE(_Where),
; 828  : 				_Newvec);	// copy prefix

  000b6	8b 4e 04	 mov	 ecx, DWORD PTR [esi+4]
  000b9	8b 5c 24 1c	 mov	 ebx, DWORD PTR __Where$[esp+20]
  000bd	8b d0		 mov	 edx, eax
  000bf	8b c3		 mov	 eax, ebx
  000c1	2b c1		 sub	 eax, ecx
  000c3	c1 f8 02	 sar	 eax, 2
  000c6	8d 2c 85 00 00
	00 00		 lea	 ebp, DWORD PTR [eax*4]
  000cd	55		 push	 ebp
  000ce	51		 push	 ecx
  000cf	52		 push	 edx
  000d0	89 54 24 20	 mov	 DWORD PTR __Newvec$187478[esp+36], edx
  000d4	e8 00 00 00 00	 call	 _memmove
  000d9	83 c4 10	 add	 esp, 16			; 00000010H

; 829  : 			_Ptr = _Ufill(_Ptr, _Count, _Tmp);	// add new stuff

  000dc	8d 54 24 20	 lea	 edx, DWORD PTR __Tmp$[esp+16]
  000e0	52		 push	 edx
  000e1	03 c5		 add	 eax, ebp
  000e3	57		 push	 edi
  000e4	50		 push	 eax
  000e5	8b ce		 mov	 ecx, esi
  000e7	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ufill

; 830  : 			_Ucopy(_ITER_BASE(_Where), _Mylast, _Ptr);	// copy suffix

  000ec	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  000ef	2b cb		 sub	 ecx, ebx
  000f1	c1 f9 02	 sar	 ecx, 2
  000f4	c1 e1 02	 shl	 ecx, 2
  000f7	51		 push	 ecx
  000f8	53		 push	 ebx
  000f9	50		 push	 eax
  000fa	e8 00 00 00 00	 call	 _memmove

; 831  : 			_CATCH_ALL
; 832  : 			_Destroy(_Newvec, _Ptr);
; 833  : 			this->_Alval.deallocate(_Newvec, _Capacity);
; 834  : 			_RERAISE;
; 835  : 			_CATCH_END
; 836  : 
; 837  : 			_Count += size();

  000ff	8b 46 04	 mov	 eax, DWORD PTR [esi+4]
  00102	83 c4 0c	 add	 esp, 12			; 0000000cH
  00105	85 c0		 test	 eax, eax
  00107	75 04		 jne	 SHORT $L190715
  00109	33 c9		 xor	 ecx, ecx
  0010b	eb 08		 jmp	 SHORT $L190716
$L190715:
  0010d	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00110	2b c8		 sub	 ecx, eax
  00112	c1 f9 02	 sar	 ecx, 2
$L190716:
  00115	03 f9		 add	 edi, ecx

; 838  : 			if (_Myfirst != 0)

  00117	85 c0		 test	 eax, eax
  00119	74 09		 je	 SHORT $L190718

; 839  : 				{	// destroy and deallocate old array
; 840  : 				_Destroy(_Myfirst, _Mylast);
; 841  : 				this->_Alval.deallocate(_Myfirst, _Myend - _Myfirst);

  0011b	50		 push	 eax
  0011c	e8 00 00 00 00	 call	 ??3@YAXPAX@Z		; operator delete
  00121	83 c4 04	 add	 esp, 4
$L190718:

; 842  : 				}
; 843  : 			_Myend = _Newvec + _Capacity;

  00124	8b 44 24 10	 mov	 eax, DWORD PTR __Newvec$187478[esp+20]
  00128	8b 54 24 1c	 mov	 edx, DWORD PTR tv382[esp+16]
  0012c	5d		 pop	 ebp
  0012d	5b		 pop	 ebx

; 844  : 			_Mylast = _Newvec + _Count;

  0012e	8d 0c b8	 lea	 ecx, DWORD PTR [eax+edi*4]
  00131	03 d0		 add	 edx, eax
  00133	5f		 pop	 edi
  00134	89 56 0c	 mov	 DWORD PTR [esi+12], edx
  00137	89 4e 08	 mov	 DWORD PTR [esi+8], ecx

; 845  : 			_Myfirst = _Newvec;

  0013a	89 46 04	 mov	 DWORD PTR [esi+4], eax
  0013d	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  0013e	59		 pop	 ecx
  0013f	c2 0c 00	 ret	 12			; 0000000cH
$L187476:

; 846  : 			}
; 847  : 		else if ((size_type)(_Mylast - _ITER_BASE(_Where)) < _Count)

  00142	8b 6e 08	 mov	 ebp, DWORD PTR [esi+8]
  00145	8b 5c 24 18	 mov	 ebx, DWORD PTR __Where$[esp+16]
  00149	8b d5		 mov	 edx, ebp
  0014b	2b d3		 sub	 edx, ebx
  0014d	c1 fa 02	 sar	 edx, 2
  00150	3b d7		 cmp	 edx, edi

; 848  : 			{	// new stuff spills off end
; 849  : 			_Ucopy(_ITER_BASE(_Where), _Mylast,
; 850  : 				_ITER_BASE(_Where) + _Count);	// copy suffix

  00152	8d 04 bd 00 00
	00 00		 lea	 eax, DWORD PTR [edi*4]
  00159	8b ce		 mov	 ecx, esi
  0015b	89 44 24 18	 mov	 DWORD PTR tv393[esp+16], eax
  0015f	73 4b		 jae	 SHORT $L187489
  00161	03 c3		 add	 eax, ebx
  00163	50		 push	 eax
  00164	55		 push	 ebp
  00165	53		 push	 ebx
  00166	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ucopy<CLordSkillComponentExecutable * *>

; 851  : 
; 852  : 			_TRY_BEGIN
; 853  : 			_Ufill(_Mylast, _Count - (_Mylast - _ITER_BASE(_Where)),
; 854  : 				_Tmp);	// insert new stuff off end

  0016b	8b 46 08	 mov	 eax, DWORD PTR [esi+8]
  0016e	8b d0		 mov	 edx, eax
  00170	2b d3		 sub	 edx, ebx
  00172	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00176	51		 push	 ecx
  00177	c1 fa 02	 sar	 edx, 2
  0017a	2b fa		 sub	 edi, edx
  0017c	57		 push	 edi
  0017d	50		 push	 eax
  0017e	8b ce		 mov	 ecx, esi
  00180	e8 00 00 00 00	 call	 ?_Ufill@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV3@IABQAV3@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ufill

; 855  : 			_CATCH_ALL
; 856  : 			_Destroy(_ITER_BASE(_Where) + _Count, _Mylast + _Count);
; 857  : 			_RERAISE;
; 858  : 			_CATCH_END
; 859  : 
; 860  : 			_Mylast += _Count;

  00185	8b 4e 08	 mov	 ecx, DWORD PTR [esi+8]
  00188	8b 44 24 18	 mov	 eax, DWORD PTR tv393[esp+16]
  0018c	03 c8		 add	 ecx, eax
  0018e	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  00191	8b f1		 mov	 esi, ecx

; 861  : 			fill(_ITER_BASE(_Where), _Mylast - _Count,
; 862  : 				_Tmp);	// insert up to old end

  00193	8d 4c 24 20	 lea	 ecx, DWORD PTR __Tmp$[esp+16]
  00197	51		 push	 ecx
  00198	2b f0		 sub	 esi, eax
  0019a	56		 push	 esi
  0019b	53		 push	 ebx
  0019c	e8 00 00 00 00	 call	 ??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z ; std::fill<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable *>
  001a1	83 c4 0c	 add	 esp, 12			; 0000000cH
  001a4	5d		 pop	 ebp
  001a5	5b		 pop	 ebx
  001a6	5f		 pop	 edi
  001a7	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001a8	59		 pop	 ecx
  001a9	c2 0c 00	 ret	 12			; 0000000cH
$L187489:

; 863  : 			}
; 864  : 		else
; 865  : 			{	// new stuff can all be assigned
; 866  : 			pointer _Oldend = _Mylast;
; 867  : 			_Mylast = _Ucopy(_Oldend - _Count, _Oldend,
; 868  : 				_Mylast);	// copy suffix

  001ac	55		 push	 ebp
  001ad	8b fd		 mov	 edi, ebp
  001af	2b f8		 sub	 edi, eax
  001b1	55		 push	 ebp
  001b2	57		 push	 edi
  001b3	e8 00 00 00 00	 call	 ??$_Ucopy@PAPAVCLordSkillComponentExecutable@@@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEPAPAVCLordSkillComponentExecutable@@PAPAV2@00@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Ucopy<CLordSkillComponentExecutable * *>

; 869  : 			copy_backward(_ITER_BASE(_Where), _Oldend - _Count,
; 870  : 				_Oldend);	// copy hole

  001b8	55		 push	 ebp
  001b9	57		 push	 edi
  001ba	53		 push	 ebx
  001bb	89 46 08	 mov	 DWORD PTR [esi+8], eax
  001be	e8 00 00 00 00	 call	 ??$copy_backward@PAPAVCLordSkillComponentExecutable@@PAPAV1@@std@@YAPAPAVCLordSkillComponentExecutable@@PAPAV1@00@Z ; std::copy_backward<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable * *>

; 871  : 			fill(_ITER_BASE(_Where), _ITER_BASE(_Where) + _Count,
; 872  : 				_Tmp);	// insert into hole

  001c3	8b 44 24 24	 mov	 eax, DWORD PTR tv393[esp+28]
  001c7	8d 54 24 2c	 lea	 edx, DWORD PTR __Tmp$[esp+28]
  001cb	52		 push	 edx
  001cc	03 c3		 add	 eax, ebx
  001ce	50		 push	 eax
  001cf	53		 push	 ebx
  001d0	e8 00 00 00 00	 call	 ??$fill@PAPAVCLordSkillComponentExecutable@@PAV1@@std@@YAXPAPAVCLordSkillComponentExecutable@@0ABQAV1@@Z ; std::fill<CLordSkillComponentExecutable * *,CLordSkillComponentExecutable *>
  001d5	83 c4 18	 add	 esp, 24			; 00000018H
  001d8	5d		 pop	 ebp
  001d9	5b		 pop	 ebx
$L187498:
  001da	5f		 pop	 edi
  001db	5e		 pop	 esi

; 873  : 			}
; 874  : 		}

  001dc	59		 pop	 ecx
  001dd	c2 0c 00	 ret	 12			; 0000000cH
$L190726:
?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n
_TEXT	ENDS
PUBLIC	??0?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
; Function compile flags: /Ogty
;	COMDAT ??0?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >, COMDAT
; _this$ = ecx

; 299  : 		{	// construct empty vector

  00000	8b c1		 mov	 eax, ecx

; 300  : 		_Buy(0);

  00002	33 c9		 xor	 ecx, ecx
  00004	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00007	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  0000a	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 301  : 		}

  0000d	c3		 ret	 0
??0?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE@XZ ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >
_TEXT	ENDS
PUBLIC	?insert@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::insert
; Function compile flags: /Ogty
;	COMDAT ?insert@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
__Val$ = 16						; size = 4
?insert@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLordSkillComponentExecutable@@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::insert, COMDAT
; _this$ = ecx

; 621  : 		size_type _Off = size() == 0 ? 0 : _Where - begin();

  00000	8b 54 24 08	 mov	 edx, DWORD PTR __Where$[esp-4]
  00004	56		 push	 esi
  00005	57		 push	 edi
  00006	8b f9		 mov	 edi, ecx
  00008	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  0000b	85 c9		 test	 ecx, ecx
  0000d	74 0c		 je	 SHORT $L190850
  0000f	8b 47 08	 mov	 eax, DWORD PTR [edi+8]
  00012	2b c1		 sub	 eax, ecx
  00014	c1 f8 02	 sar	 eax, 2
  00017	85 c0		 test	 eax, eax
  00019	75 04		 jne	 SHORT $L190789
$L190850:
  0001b	33 f6		 xor	 esi, esi
  0001d	eb 07		 jmp	 SHORT $L190790
$L190789:
  0001f	8b f2		 mov	 esi, edx
  00021	2b f1		 sub	 esi, ecx
  00023	c1 fe 02	 sar	 esi, 2
$L190790:

; 622  : 		_Insert_n(_Where, (size_type)1, _Val);

  00026	8b 44 24 14	 mov	 eax, DWORD PTR __Val$[esp+4]
  0002a	50		 push	 eax
  0002b	6a 01		 push	 1
  0002d	52		 push	 edx
  0002e	8b cf		 mov	 ecx, edi
  00030	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n

; 623  : 		return (begin() + _Off);

  00035	8b 4f 04	 mov	 ecx, DWORD PTR [edi+4]
  00038	8b 44 24 0c	 mov	 eax, DWORD PTR ___$ReturnUdt$[esp+4]
  0003c	8d 14 b1	 lea	 edx, DWORD PTR [ecx+esi*4]
  0003f	5f		 pop	 edi
  00040	89 10		 mov	 DWORD PTR [eax], edx
  00042	5e		 pop	 esi

; 624  : 		}

  00043	c2 0c 00	 ret	 12			; 0000000cH
?insert@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAE?AViterator@12@V312@ABQAVCLordSkillComponentExecutable@@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::insert
_TEXT	ENDS
PUBLIC	??0CLordSkill@@QAE@PAVCLord@@@Z			; CLordSkill::CLordSkill
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
;	COMDAT ??0CLordSkill@@QAE@PAVCLord@@@Z
_TEXT	SEGMENT
_pLord$ = 8						; size = 4
??0CLordSkill@@QAE@PAVCLord@@@Z PROC NEAR		; CLordSkill::CLordSkill, COMDAT
; _this$ = ecx

; 79   : {

  00000	8b c1		 mov	 eax, ecx
  00002	8b 4c 24 04	 mov	 ecx, DWORD PTR _pLord$[esp-4]
  00006	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00009	33 c9		 xor	 ecx, ecx
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], OFFSET FLAT:??_7CLordSkill@@6B@
  00011	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
  00014	89 48 10	 mov	 DWORD PTR [eax+16], ecx
  00017	89 48 14	 mov	 DWORD PTR [eax+20], ecx

; 80   : }

  0001a	c2 04 00	 ret	 4
??0CLordSkill@@QAE@PAVCLord@@@Z ENDP			; CLordSkill::CLordSkill
_TEXT	ENDS
PUBLIC	?push_back@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::push_back
; Function compile flags: /Ogty
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
;	COMDAT ?push_back@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXABQAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXABQAVCLordSkillComponentExecutable@@@Z PROC NEAR ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::push_back, COMDAT
; _this$ = ecx

; 579  : 		{	// insert element at end

  00000	56		 push	 esi

; 580  : 		if (size() < capacity())

  00001	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00004	85 f6		 test	 esi, esi
  00006	75 04		 jne	 SHORT $L190949
  00008	33 d2		 xor	 edx, edx
  0000a	eb 08		 jmp	 SHORT $L190950
$L190949:
  0000c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0000f	2b d6		 sub	 edx, esi
  00011	c1 fa 02	 sar	 edx, 2
$L190950:
  00014	85 f6		 test	 esi, esi
  00016	74 21		 je	 SHORT $L187396
  00018	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001b	2b c6		 sub	 eax, esi
  0001d	c1 f8 02	 sar	 eax, 2
  00020	3b d0		 cmp	 edx, eax
  00022	73 15		 jae	 SHORT $L187396

; 581  : 			_Mylast = _Ufill(_Mylast, 1, _Val);

  00024	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00027	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0002b	8b 12		 mov	 edx, DWORD PTR [edx]
  0002d	89 10		 mov	 DWORD PTR [eax], edx
  0002f	83 c0 04	 add	 eax, 4
  00032	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00035	5e		 pop	 esi

; 584  : 		}

  00036	c2 04 00	 ret	 4
$L187396:

; 582  : 		else
; 583  : 			insert(end(), _Val);

  00039	8b 54 24 08	 mov	 edx, DWORD PTR __Val$[esp]
  0003d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00040	52		 push	 edx
  00041	6a 01		 push	 1
  00043	50		 push	 eax
  00044	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n
  00049	5e		 pop	 esi

; 584  : 		}

  0004a	c2 04 00	 ret	 4
?push_back@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@QAEXABQAVCLordSkillComponentExecutable@@@Z ENDP ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::push_back
_TEXT	ENDS
PUBLIC	?AddSkillComponent@CLordSkill@@QAEXPAVCLordSkillComponentExecutable@@@Z ; CLordSkill::AddSkillComponent
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
;	COMDAT ?AddSkillComponent@CLordSkill@@QAEXPAVCLordSkillComponentExecutable@@@Z
_TEXT	SEGMENT
_pComponent$ = 8					; size = 4
?AddSkillComponent@CLordSkill@@QAEXPAVCLordSkillComponentExecutable@@@Z PROC NEAR ; CLordSkill::AddSkillComponent, COMDAT
; _this$ = ecx

; 96   : 	m_vComponents.push_back( pComponent );

  00000	83 c1 08	 add	 ecx, 8
  00003	56		 push	 esi
  00004	8b 71 04	 mov	 esi, DWORD PTR [ecx+4]
  00007	85 f6		 test	 esi, esi
  00009	75 04		 jne	 SHORT $L191317
  0000b	33 d2		 xor	 edx, edx
  0000d	eb 08		 jmp	 SHORT $L191318
$L191317:
  0000f	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00012	2b d6		 sub	 edx, esi
  00014	c1 fa 02	 sar	 edx, 2
$L191318:
  00017	85 f6		 test	 esi, esi
  00019	74 1f		 je	 SHORT $L191310
  0001b	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  0001e	2b c6		 sub	 eax, esi
  00020	c1 f8 02	 sar	 eax, 2
  00023	3b d0		 cmp	 edx, eax
  00025	73 13		 jae	 SHORT $L191310
  00027	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0002a	8b 54 24 08	 mov	 edx, DWORD PTR _pComponent$[esp]
  0002e	89 10		 mov	 DWORD PTR [eax], edx
  00030	83 c0 04	 add	 eax, 4
  00033	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  00036	5e		 pop	 esi

; 97   : }

  00037	c2 04 00	 ret	 4

; 96   : 	m_vComponents.push_back( pComponent );

$L191310:
  0003a	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  0003d	8d 54 24 08	 lea	 edx, DWORD PTR _pComponent$[esp]
  00041	52		 push	 edx
  00042	6a 01		 push	 1
  00044	50		 push	 eax
  00045	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n
  0004a	5e		 pop	 esi

; 97   : }

  0004b	c2 04 00	 ret	 4
?AddSkillComponent@CLordSkill@@QAEXPAVCLordSkillComponentExecutable@@@Z ENDP ; CLordSkill::AddSkillComponent
_TEXT	ENDS
PUBLIC	?Initialize@CLordSkill@@QAEHPBD@Z		; CLordSkill::Initialize
EXTRN	_strncpy:NEAR
EXTRN	?GetNumber@CScanner@@QAEHH@Z:NEAR		; CScanner::GetNumber
EXTRN	?GetFloat@CScanner@@QAEMH@Z:NEAR		; CScanner::GetFloat
EXTRN	__chkstk:NEAR
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:NEAR
EXTRN	__fltused:NEAR
EXTRN	??0CScript@@QAE@H@Z:NEAR			; CScript::CScript
EXTRN	??1CScript@@UAE@XZ:NEAR				; CScript::~CScript
EXTRN	?Load@CScript@@QAEHPBDHH@Z:NEAR			; CScript::Load
EXTRN	?GetToken@CScript@@UAEHH@Z:NEAR			; CScript::GetToken
;	COMDAT xdata$x
; File c:\program files\microsoft visual studio .net 2003\vc7\include\vector
xdata$x	SEGMENT
$T191727 DD	0ffffffffH
	DD	FLAT:$L191385
$T191715 DD	019930520H
	DD	01H
	DD	FLAT:$T191727
	DD	2 DUP(00H)
	DD	2 DUP(00H)
; Function compile flags: /Ogty
; File c:\documents and settings\test\mes documents\source\virtuos_v17\build\program\_common\lordskill.cpp
xdata$x	ENDS
;	COMDAT ?Initialize@CLordSkill@@QAEHPBD@Z
_TEXT	SEGMENT
$T191711 = -8028					; size = 4
_bPassive$187344 = -8028				; size = 4
$T191712 = -8024					; size = 4
_nId$ = -8020						; size = 4
_nItem$187342 = -8016					; size = 4
_nCooltime$187343 = -8012				; size = 4
_s$ = -8008						; size = 7760
_szName$187337 = -248					; size = 32
_szIcon$187339 = -216					; size = 64
_szDesc$187338 = -152					; size = 128
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -12						; size = 12
__$ReturnAddr$ = 4					; size = 4
_szFile$ = 8						; size = 4
?Initialize@CLordSkill@@QAEHPBD@Z PROC NEAR		; CLordSkill::Initialize, COMDAT
; _this$ = ecx

; 121  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 e4 f8	 and	 esp, -8			; fffffff8H
  00006	6a ff		 push	 -1
  00008	68 00 00 00 00	 push	 __ehhandler$?Initialize@CLordSkill@@QAEHPBD@Z
  0000d	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:__except_list
  00013	50		 push	 eax
  00014	64 89 25 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, esp
  0001b	51		 push	 ecx
  0001c	b8 4c 1f 00 00	 mov	 eax, 8012		; 00001f4cH
  00021	e8 00 00 00 00	 call	 __chkstk
  00026	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  0002b	53		 push	 ebx
  0002c	56		 push	 esi
  0002d	8b 75 08	 mov	 esi, DWORD PTR _szFile$[ebp]
  00030	57		 push	 edi
  00031	33 c5		 xor	 eax, ebp
  00033	89 4c 24 10	 mov	 DWORD PTR $T191712[esp+8040], ecx

; 122  : 	CScript s;

  00037	33 db		 xor	 ebx, ebx
  00039	53		 push	 ebx
  0003a	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  0003e	89 84 24 58 1f
	00 00		 mov	 DWORD PTR __$ArrayPad$[esp+8044], eax
  00045	e8 00 00 00 00	 call	 ??0CScript@@QAE@H@Z	; CScript::CScript

; 123  : 	if( !s.Load( szFile, FALSE ) )

  0004a	53		 push	 ebx
  0004b	53		 push	 ebx
  0004c	56		 push	 esi
  0004d	8d 4c 24 2c	 lea	 ecx, DWORD PTR _s$[esp+8052]
  00051	89 9c 24 70 1f
	00 00		 mov	 DWORD PTR __$EHRec$[esp+8060], ebx
  00058	e8 00 00 00 00	 call	 ?Load@CScript@@QAEHPBDHH@Z ; CScript::Load
  0005d	85 c0		 test	 eax, eax

; 124  : 		return FALSE;

  0005f	8d 4c 24 20	 lea	 ecx, DWORD PTR _s$[esp+8040]
  00063	75 17		 jne	 SHORT $L187331
  00065	c7 84 24 64 1f
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+8048], -1
  00070	e8 00 00 00 00	 call	 ??1CScript@@UAE@XZ	; CScript::~CScript
  00075	33 c0		 xor	 eax, eax
  00077	e9 66 02 00 00	 jmp	 $L187329
$L187331:

; 125  : 
; 126  : 	int nId		= s.GetNumber();

  0007c	53		 push	 ebx
  0007d	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber
  00082	89 44 24 14	 mov	 DWORD PTR _nId$[esp+8040], eax

; 127  : 	while( s.tok != FINISHED )

  00086	83 bc 24 4c 08
	00 00 15	 cmp	 DWORD PTR _s$[esp+10132], 21 ; 00000015H
  0008e	0f 84 35 02 00
	00		 je	 $L187336
  00094	eb 0a 8d a4 24
	00 00 00 00 8d
	49 00		 npad	 12
$L187335:

; 128  : 	{
; 129  : 		char szName[CLordSkillComponent::eMaxName]	= { 0,};

  000a0	33 c0		 xor	 eax, eax
  000a2	89 84 24 71 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8041], eax
  000a9	89 84 24 75 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8045], eax
  000b0	89 84 24 79 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8049], eax
  000b7	89 84 24 7d 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8053], eax
  000be	89 84 24 81 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8057], eax
  000c5	89 84 24 85 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8061], eax
  000cc	89 84 24 89 1e
	00 00		 mov	 DWORD PTR _szName$187337[esp+8065], eax
  000d3	66 89 84 24 8d
	1e 00 00	 mov	 WORD PTR _szName$187337[esp+8069], ax
  000db	88 84 24 8f 1e
	00 00		 mov	 BYTE PTR _szName$187337[esp+8071], al

; 130  : 		char szDesc[CLordSkillComponent::eMaxDesc]	= { 0,};

  000e2	88 9c 24 d0 1e
	00 00		 mov	 BYTE PTR _szDesc$187338[esp+8040], bl
  000e9	b9 1f 00 00 00	 mov	 ecx, 31			; 0000001fH
  000ee	8d bc 24 d1 1e
	00 00		 lea	 edi, DWORD PTR _szDesc$187338[esp+8041]

; 131  : 		char szIcon[CLordSkillComponent::eMaxIcon]	= { 0,};

  000f5	88 9c 24 90 1e
	00 00		 mov	 BYTE PTR _szIcon$187339[esp+8040], bl

; 132  : 		int nType	= s.GetNumber();

  000fc	53		 push	 ebx
  000fd	f3 ab		 rep stosd
  000ff	66 ab		 stosw
  00101	aa		 stosb
  00102	33 c0		 xor	 eax, eax
  00104	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  00109	8d bc 24 95 1e
	00 00		 lea	 edi, DWORD PTR _szIcon$187339[esp+8045]
  00110	f3 ab		 rep stosd
  00112	66 ab		 stosw
  00114	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  00118	88 9c 24 74 1e
	00 00		 mov	 BYTE PTR _szName$187337[esp+8044], bl
  0011f	aa		 stosb
  00120	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 133  : 		s.GetToken();

  00125	53		 push	 ebx
  00126	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  0012a	8b f0		 mov	 esi, eax
  0012c	e8 00 00 00 00	 call	 ?GetToken@CScript@@UAEHH@Z ; CScript::GetToken

; 134  : 		strncpy( szName, s.token, CLordSkillComponent::eMaxName );

  00131	8b 4c 24 44	 mov	 ecx, DWORD PTR _s$[esp+8076]
  00135	6a 20		 push	 32			; 00000020H
  00137	51		 push	 ecx
  00138	8d 94 24 78 1e
	00 00		 lea	 edx, DWORD PTR _szName$187337[esp+8048]
  0013f	52		 push	 edx
  00140	e8 00 00 00 00	 call	 _strncpy
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH

; 135  : 		szName[CLordSkillComponent::eMaxName - 1]	= '\0';
; 136  : 		s.GetToken();

  00148	53		 push	 ebx
  00149	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  0014d	88 9c 24 93 1e
	00 00		 mov	 BYTE PTR _szName$187337[esp+8075], bl
  00154	e8 00 00 00 00	 call	 ?GetToken@CScript@@UAEHH@Z ; CScript::GetToken

; 137  : 		strncpy( szDesc, s.token, CLordSkillComponent::eMaxDesc );

  00159	8b 44 24 44	 mov	 eax, DWORD PTR _s$[esp+8076]
  0015d	68 80 00 00 00	 push	 128			; 00000080H
  00162	50		 push	 eax
  00163	8d 8c 24 d8 1e
	00 00		 lea	 ecx, DWORD PTR _szDesc$187338[esp+8048]
  0016a	51		 push	 ecx
  0016b	e8 00 00 00 00	 call	 _strncpy
  00170	83 c4 0c	 add	 esp, 12			; 0000000cH

; 138  : 		szDesc[CLordSkillComponent::eMaxDesc - 1]	= '\0';
; 139  : 		int nTargetType		= s.GetNumber();

  00173	53		 push	 ebx
  00174	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  00178	88 9c 24 53 1f
	00 00		 mov	 BYTE PTR _szDesc$187338[esp+8171], bl
  0017f	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 140  : 		int	nItem	= s.GetNumber();

  00184	53		 push	 ebx
  00185	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  00189	8b f8		 mov	 edi, eax
  0018b	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 141  : 		int nCooltime	= s.GetNumber();

  00190	53		 push	 ebx
  00191	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  00195	89 44 24 1c	 mov	 DWORD PTR _nItem$187342[esp+8044], eax
  00199	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 142  : 		s.GetToken();

  0019e	53		 push	 ebx
  0019f	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  001a3	89 44 24 20	 mov	 DWORD PTR _nCooltime$187343[esp+8044], eax
  001a7	e8 00 00 00 00	 call	 ?GetToken@CScript@@UAEHH@Z ; CScript::GetToken

; 143  : 		strncpy( szIcon, s.token, CLordSkillComponent::eMaxIcon );

  001ac	8b 54 24 44	 mov	 edx, DWORD PTR _s$[esp+8076]
  001b0	6a 40		 push	 64			; 00000040H
  001b2	52		 push	 edx
  001b3	8d 84 24 98 1e
	00 00		 lea	 eax, DWORD PTR _szIcon$187339[esp+8048]
  001ba	50		 push	 eax
  001bb	e8 00 00 00 00	 call	 _strncpy
  001c0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 144  : 		szIcon[CLordSkillComponent::eMaxIcon - 1]	= '\0';
; 145  : 		BOOL bPassive	= static_cast<BOOL>( s.GetNumber() );

  001c3	53		 push	 ebx
  001c4	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  001c8	88 9c 24 d3 1e
	00 00		 mov	 BYTE PTR _szIcon$187339[esp+8107], bl
  001cf	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 146  : 		DWORD dwSrcSfx	= s.GetNumber();

  001d4	53		 push	 ebx
  001d5	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  001d9	89 44 24 10	 mov	 DWORD PTR _bPassive$187344[esp+8044], eax
  001dd	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 147  : 		DWORD dwDstSfx	= s.GetNumber();

  001e2	53		 push	 ebx
  001e3	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  001e7	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber

; 148  : 		FLOAT fRange	= s.GetFloat();

  001ec	53		 push	 ebx
  001ed	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  001f1	e8 00 00 00 00	 call	 ?GetFloat@CScanner@@QAEMH@Z ; CScanner::GetFloat
  001f6	dd d8		 fstp	 ST(0)

; 149  : 		CLordSkillComponentExecutable* pComponent		= CreateSkillComponent( nType );

  001f8	8b 4c 24 10	 mov	 ecx, DWORD PTR $T191712[esp+8040]
  001fc	8b 11		 mov	 edx, DWORD PTR [ecx]
  001fe	56		 push	 esi
  001ff	ff 52 04	 call	 DWORD PTR [edx+4]

; 150  : 		pComponent->Initialize( nId, nCooltime, nItem, szName, szDesc, szIcon, bPassive, nTargetType, dwSrcSfx, dwDstSfx, fRange );

  00202	8b 4c 24 1c	 mov	 ecx, DWORD PTR _nCooltime$187343[esp+8040]
  00206	8b 54 24 18	 mov	 edx, DWORD PTR _nItem$187342[esp+8040]
  0020a	8b f0		 mov	 esi, eax
  0020c	8b 44 24 14	 mov	 eax, DWORD PTR _nId$[esp+8040]
  00210	89 46 04	 mov	 DWORD PTR [esi+4], eax
  00213	8d 84 24 70 1e
	00 00		 lea	 eax, DWORD PTR _szName$187337[esp+8040]
  0021a	89 4e 08	 mov	 DWORD PTR [esi+8], ecx
  0021d	50		 push	 eax
  0021e	8d 4e 14	 lea	 ecx, DWORD PTR [esi+20]
  00221	51		 push	 ecx
  00222	89 56 10	 mov	 DWORD PTR [esi+16], edx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyA@8
  0022b	8d 94 24 d0 1e
	00 00		 lea	 edx, DWORD PTR _szDesc$187338[esp+8040]
  00232	52		 push	 edx
  00233	8d 46 34	 lea	 eax, DWORD PTR [esi+52]
  00236	50		 push	 eax
  00237	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyA@8
  0023d	8d 8c 24 90 1e
	00 00		 lea	 ecx, DWORD PTR _szIcon$187339[esp+8040]
  00244	51		 push	 ecx
  00245	8d 96 b4 00 00
	00		 lea	 edx, DWORD PTR [esi+180]
  0024b	52		 push	 edx
  0024c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcpyA@8
  00252	8b 44 24 0c	 mov	 eax, DWORD PTR _bPassive$187344[esp+8040]

; 151  : 		AddSkillComponent( pComponent );

  00256	8b 4c 24 10	 mov	 ecx, DWORD PTR $T191712[esp+8040]
  0025a	83 c1 08	 add	 ecx, 8
  0025d	89 86 f4 00 00
	00		 mov	 DWORD PTR [esi+244], eax
  00263	89 be f8 00 00
	00		 mov	 DWORD PTR [esi+248], edi
  00269	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0026c	3b c3		 cmp	 eax, ebx
  0026e	89 74 24 0c	 mov	 DWORD PTR $T191711[esp+8040], esi
  00272	75 04		 jne	 SHORT $L191682
  00274	33 ff		 xor	 edi, edi
  00276	eb 08		 jmp	 SHORT $L191683
$L191682:
  00278	8b 79 08	 mov	 edi, DWORD PTR [ecx+8]
  0027b	2b f8		 sub	 edi, eax
  0027d	c1 ff 02	 sar	 edi, 2
$L191683:
  00280	3b c3		 cmp	 eax, ebx
  00282	74 19		 je	 SHORT $L191642
  00284	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00287	2b d0		 sub	 edx, eax
  00289	c1 fa 02	 sar	 edx, 2
  0028c	3b fa		 cmp	 edi, edx
  0028e	73 0d		 jae	 SHORT $L191642
  00290	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  00293	89 30		 mov	 DWORD PTR [eax], esi
  00295	83 c0 04	 add	 eax, 4
  00298	89 41 08	 mov	 DWORD PTR [ecx+8], eax
  0029b	eb 10		 jmp	 SHORT $L191666
$L191642:
  0029d	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  002a0	8d 54 24 0c	 lea	 edx, DWORD PTR $T191711[esp+8040]
  002a4	52		 push	 edx
  002a5	6a 01		 push	 1
  002a7	50		 push	 eax
  002a8	e8 00 00 00 00	 call	 ?_Insert_n@?$vector@PAVCLordSkillComponentExecutable@@V?$allocator@PAVCLordSkillComponentExecutable@@@std@@@std@@IAEXViterator@12@IABQAVCLordSkillComponentExecutable@@@Z ; std::vector<CLordSkillComponentExecutable *,std::allocator<CLordSkillComponentExecutable *> >::_Insert_n
$L191666:

; 152  : 		nId		= s.GetNumber();

  002ad	53		 push	 ebx
  002ae	8d 4c 24 24	 lea	 ecx, DWORD PTR _s$[esp+8044]
  002b2	e8 00 00 00 00	 call	 ?GetNumber@CScanner@@QAEHH@Z ; CScanner::GetNumber
  002b7	89 44 24 14	 mov	 DWORD PTR _nId$[esp+8040], eax
  002bb	83 bc 24 4c 08
	00 00 15	 cmp	 DWORD PTR _s$[esp+10132], 21 ; 00000015H
  002c3	0f 85 d7 fd ff
	ff		 jne	 $L187335
$L187336:

; 153  : 	}
; 154  : 	return TRUE;

  002c9	8d 4c 24 20	 lea	 ecx, DWORD PTR _s$[esp+8040]
  002cd	c7 84 24 64 1f
	00 00 ff ff ff
	ff		 mov	 DWORD PTR __$EHRec$[esp+8048], -1
  002d8	e8 00 00 00 00	 call	 ??1CScript@@UAE@XZ	; CScript::~CScript
  002dd	b8 01 00 00 00	 mov	 eax, 1
$L187329:

; 155  : }

  002e2	8b 8c 24 5c 1f
	00 00		 mov	 ecx, DWORD PTR __$EHRec$[esp+8040]
  002e9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:__except_list, ecx
  002f0	8b 8c 24 54 1f
	00 00		 mov	 ecx, DWORD PTR __$ArrayPad$[esp+8040]
  002f7	5f		 pop	 edi
  002f8	5e		 pop	 esi
  002f9	33 cd		 xor	 ecx, ebp
  002fb	5b		 pop	 ebx
  002fc	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00301	8b e5		 mov	 esp, ebp
  00303	5d		 pop	 ebp
  00304	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
$L191385:
  00000	8d 8d b8 e0 ff
	ff		 lea	 ecx, DWORD PTR _s$[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1CScript@@UAE@XZ	; CScript::~CScript
__ehhandler$?Initialize@CLordSkill@@QAEHPBD@Z:
  0000b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:$T191715
  00010	e9 00 00 00 00	 jmp	 ___CxxFrameHandler
text$x	ENDS
?Initialize@CLordSkill@@QAEHPBD@Z ENDP			; CLordSkill::Initialize
END
